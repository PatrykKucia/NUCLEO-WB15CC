
Sending_Receiving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092bc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080093fc  080093fc  0000a3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800972c  0800972c  0000a72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009734  08009734  0000a734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009738  08009738  0000a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000bc  20000008  0800973c  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000c4  080097f8  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000fc  0800982d  0000b0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000110  0800983e  0000b110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  0800983e  0000b5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800983e  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002baa7  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000615b  00000000  00000000  0003753e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000025a0  00000000  00000000  0003d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ca8  00000000  00000000  0003fc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027dbb  00000000  00000000  000418e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002c0d8  00000000  00000000  000696a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d55ca  00000000  00000000  0009577b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0016ad45  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a39c  00000000  00000000  0016ad88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  00175124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000110 	.word	0x20000110
 800015c:	00000000 	.word	0x00000000
 8000160:	080093e4 	.word	0x080093e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000114 	.word	0x20000114
 800017c:	080093e4 	.word	0x080093e4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <APPD_EnableCPU2+0x5c>)
 8000528:	881a      	ldrh	r2, [r3, #0]
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800052c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <APPD_EnableCPU2+0x64>)
 8000530:	881a      	ldrh	r2, [r3, #0]
 8000532:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <APPD_EnableCPU2+0x60>)
 8000534:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <APPD_EnableCPU2+0x68>)
 8000538:	881a      	ldrh	r2, [r3, #0]
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800053c:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <APPD_EnableCPU2+0x6c>)
 8000540:	881a      	ldrh	r2, [r3, #0]
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <APPD_EnableCPU2+0x60>)
 8000544:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000546:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <APPD_EnableCPU2+0x70>)
 8000548:	881a      	ldrh	r2, [r3, #0]
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800054c:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <APPD_EnableCPU2+0x74>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	c403      	stmia	r4!, {r0, r1}
 800055e:	8022      	strh	r2, [r4, #0]
 8000560:	3402      	adds	r4, #2
 8000562:	0c13      	lsrs	r3, r2, #16
 8000564:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000566:	f006 fd51 	bl	800700c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f005 ffe2 	bl	8006536 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000572:	bf00      	nop
}
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bdb0      	pop	{r4, r5, r7, pc}
 800057a:	bf00      	nop
 800057c:	20000008 	.word	0x20000008
 8000580:	200301e8 	.word	0x200301e8
 8000584:	2000000a 	.word	0x2000000a
 8000588:	2000000c 	.word	0x2000000c
 800058c:	2000000e 	.word	0x2000000e
 8000590:	20000010 	.word	0x20000010
 8000594:	080093fc 	.word	0x080093fc

08000598 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <LL_C2_PWR_SetPowerMode+0x28>)
 80005a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005a6:	f023 0207 	bic.w	r2, r3, #7
 80005aa:	4905      	ldr	r1, [pc, #20]	@ (80005c0 <LL_C2_PWR_SetPowerMode+0x28>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	58000400 	.word	0x58000400

080005c4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80005d2:	4905      	ldr	r1, [pc, #20]	@ (80005e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	58000800 	.word	0x58000800

080005ec <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000602:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000606:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000612:	4313      	orrs	r3, r2
 8000614:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	cafecafe 	.word	0xcafecafe

08000628 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800063a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	608b      	str	r3, [r1, #8]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <LL_DBGMCU_GetDeviceID+0x18>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e0042000 	.word	0xe0042000

0800066c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <LL_DBGMCU_GetRevisionID+0x18>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	b29b      	uxth	r3, r3
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e0042000 	.word	0xe0042000

08000688 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	22ff      	movs	r2, #255	@ 0xff
 8000694:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	22ca      	movs	r2, #202	@ 0xca
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2253      	movs	r2, #83	@ 0x53
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f023 0207 	bic.w	r2, r3, #7
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	431a      	orrs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	609a      	str	r2, [r3, #8]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <MX_APPE_Config+0x18>)
 80006ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006f2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80006f4:	f000 f824 	bl	8000740 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80006f8:	f000 f829 	bl	800074e <Config_HSE>

  return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58004000 	.word	0x58004000

08000704 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000708:	f000 f835 	bl	8000776 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800070c:	f000 f84e 	bl	80007ac <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000710:	4903      	ldr	r1, [pc, #12]	@ (8000720 <MX_APPE_Init+0x1c>)
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fd78 	bl	8001208 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000718:	f000 f858 	bl	80007cc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800071c:	bf00      	nop
}
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000208 	.word	0x20000208

08000724 <Init_Smps>:

void Init_Smps(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000728:	bf00      	nop
}
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <Init_Exti>:

void Init_Exti(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000736:	2050      	movs	r0, #80	@ 0x50
 8000738:	f7ff ff44 	bl	80005c4 <LL_EXTI_EnableIT_32_63>

  return;
 800073c:	bf00      	nop
}
 800073e:	bd80      	pop	{r7, pc}

08000740 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000744:	bf00      	nop
}
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000754:	2000      	movs	r0, #0
 8000756:	f006 fce5 	bl	8007124 <OTP_Read>
 800075a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d005      	beq.n	800076e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	799b      	ldrb	r3, [r3, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff40 	bl	80005ec <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800076c:	bf00      	nop
 800076e:	bf00      	nop
}
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <System_Init>:

static void System_Init(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  Init_Smps();
 800077a:	f7ff ffd3 	bl	8000724 <Init_Smps>

  Init_Exti();
 800077e:	f7ff ffd8 	bl	8000732 <Init_Exti>

  Init_Rtc();
 8000782:	f000 f803 	bl	800078c <Init_Rtc>

  return;
 8000786:	bf00      	nop
}
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <Init_Rtc>:

static void Init_Rtc(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000790:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <Init_Rtc+0x1c>)
 8000792:	f7ff ff86 	bl	80006a2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000796:	2100      	movs	r1, #0
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <Init_Rtc+0x1c>)
 800079a:	f7ff ff92 	bl	80006c2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800079e:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <Init_Rtc+0x1c>)
 80007a0:	f7ff ff72 	bl	8000688 <LL_RTC_EnableWriteProtection>

  return;
 80007a4:	bf00      	nop
}
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40002800 	.word	0x40002800

080007ac <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80007b0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80007b4:	f7ff ff38 	bl	8000628 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80007b8:	f007 fc3e 	bl	8008038 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff feeb 	bl	8000598 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80007c2:	f002 f8eb 	bl	800299c <HAL_PWREx_EnableSRAMRetention>

  return;
 80007c6:	bf00      	nop
}
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80007d2:	f006 fa65 	bl	8006ca0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <appe_Tl_Init+0x50>)
 80007d8:	2100      	movs	r1, #0
 80007da:	2004      	movs	r0, #4
 80007dc:	f007 fd6a 	bl	80082b4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <appe_Tl_Init+0x54>)
 80007e2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <appe_Tl_Init+0x58>)
 80007e6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	480e      	ldr	r0, [pc, #56]	@ (8000828 <appe_Tl_Init+0x5c>)
 80007ee:	f006 f919 	bl	8006a24 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <appe_Tl_Init+0x60>)
 80007f4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <appe_Tl_Init+0x64>)
 80007f8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <appe_Tl_Init+0x68>)
 80007fc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007fe:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000802:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f006 fb8b 	bl	8006f24 <TL_MM_Init>

  TL_Enable();
 800080e:	f006 fa41 	bl	8006c94 <TL_Enable>

  return;
 8000812:	bf00      	nop
}
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08006a5d 	.word	0x08006a5d
 8000820:	20030734 	.word	0x20030734
 8000824:	08000839 	.word	0x08000839
 8000828:	08000851 	.word	0x08000851
 800082c:	2003094c 	.word	0x2003094c
 8000830:	20030840 	.word	0x20030840
 8000834:	200301f8 	.word	0x200301f8

08000838 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000842:	bf00      	nop
}
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	330b      	adds	r3, #11
 800085e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800086a:	2b07      	cmp	r3, #7
 800086c:	d81f      	bhi.n	80008ae <APPE_SysUserEvtRx+0x5e>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <APPE_SysUserEvtRx+0x24>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000895 	.word	0x08000895
 8000878:	080008a7 	.word	0x080008a7
 800087c:	080008af 	.word	0x080008af
 8000880:	080008af 	.word	0x080008af
 8000884:	080008af 	.word	0x080008af
 8000888:	080008af 	.word	0x080008af
 800088c:	080008af 	.word	0x080008af
 8000890:	080008af 	.word	0x080008af
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4618      	mov	r0, r3
 800089a:	f005 fe79 	bl	8006590 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 f81b 	bl	80008da <APPE_SysEvtReadyProcessing>
    break;
 80008a4:	e004      	b.n	80008b0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f806 	bl	80008b8 <APPE_SysEvtError>
    break;
 80008ac:	e000      	b.n	80008b0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80008ae:	bf00      	nop
  }

  return;
 80008b0:	bf00      	nop
}
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	330b      	adds	r3, #11
 80008c6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3302      	adds	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80008ce:	bf00      	nop
}
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b08a      	sub	sp, #40	@ 0x28
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	330b      	adds	r3, #11
 80008fe:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	3302      	adds	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11d      	bne.n	800094a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800090e:	f7ff fe07 	bl	8000520 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000912:	230f      	movs	r3, #15
 8000914:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000916:	237f      	movs	r3, #127	@ 0x7f
 8000918:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800091a:	f7ff fea7 	bl	800066c <LL_DBGMCU_GetRevisionID>
 800091e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000922:	b29b      	uxth	r3, r3
 8000924:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000926:	f7ff fe93 	bl	8000650 <LL_DBGMCU_GetDeviceID>
 800092a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	b29b      	uxth	r3, r3
 8000930:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4618      	mov	r0, r3
 8000938:	f005 fe14 	bl	8006564 <SHCI_C2_Config>

    APP_BLE_Init();
 800093c:	f006 fcfc 	bl	8007338 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f007 fb8a 	bl	800805c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000948:	e007      	b.n	800095a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d103      	bne.n	800095a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
  return;
 8000958:	bf00      	nop
 800095a:	bf00      	nop
}
 800095c:	3728      	adds	r7, #40	@ 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000966:	f04f 30ff 	mov.w	r0, #4294967295
 800096a:	f007 fba7 	bl	80080bc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}

08000972 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000976:	bf00      	nop
}
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	f007 fb95 	bl	80080bc <UTIL_SEQ_Run>
  return;
 8000992:	bf00      	nop
}
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2004      	movs	r0, #4
 80009a6:	f007 fca7 	bl	80082f8 <UTIL_SEQ_SetTask>
  return;
 80009aa:	bf00      	nop
}
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80009ba:	2002      	movs	r0, #2
 80009bc:	f007 fd08 	bl	80083d0 <UTIL_SEQ_SetEvt>
  return;
 80009c0:	bf00      	nop
}
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f007 fd1d 	bl	8008410 <UTIL_SEQ_WaitEvt>
  return;
 80009d6:	bf00      	nop
}
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <LL_EXTI_EnableIT_0_31>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <LL_EXTI_EnableIT_0_31+0x24>)
 80009ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80009ee:	4905      	ldr	r1, [pc, #20]	@ (8000a04 <LL_EXTI_EnableIT_0_31+0x24>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58000800 	.word	0x58000800

08000a08 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4904      	ldr	r1, [pc, #16]	@ (8000a28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	600b      	str	r3, [r1, #0]

}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	58000800 	.word	0x58000800

08000a2c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a42:	e005      	b.n	8000a50 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d1f5      	bne.n	8000a44 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a58:	683b      	ldr	r3, [r7, #0]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40002800 	.word	0x40002800

08000a6c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	491d      	ldr	r1, [pc, #116]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3315      	adds	r3, #21
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d009      	beq.n	8000aaa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	4916      	ldr	r1, [pc, #88]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	4911      	ldr	r1, [pc, #68]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3315      	adds	r3, #21
 8000aba:	7bfa      	ldrb	r2, [r7, #15]
 8000abc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	490c      	ldr	r1, [pc, #48]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79ba      	ldrb	r2, [r7, #6]
 8000ad0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	4907      	ldr	r1, [pc, #28]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	701a      	strb	r2, [r3, #0]

  return;
 8000ae6:	bf00      	nop
}
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000012c 	.word	0x2000012c

08000af8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <LinkTimerBefore+0xb8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d032      	beq.n	8000b7a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	4927      	ldr	r1, [pc, #156]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3314      	adds	r3, #20
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	4922      	ldr	r1, [pc, #136]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3315      	adds	r3, #21
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	491d      	ldr	r1, [pc, #116]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3315      	adds	r3, #21
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	4918      	ldr	r1, [pc, #96]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3314      	adds	r3, #20
 8000b60:	7bfa      	ldrb	r2, [r7, #15]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	4913      	ldr	r1, [pc, #76]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3314      	adds	r3, #20
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b78:	e014      	b.n	8000ba4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	440b      	add	r3, r1
 8000b88:	3315      	adds	r3, #21
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8e:	79ba      	ldrb	r2, [r7, #6]
 8000b90:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3314      	adds	r3, #20
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	701a      	strb	r2, [r3, #0]
  return;
 8000ba2:	bf00      	nop
}
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200001bc 	.word	0x200001bc
 8000bb4:	2000012c 	.word	0x2000012c

08000bb8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cfc <linkTimer+0x144>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d118      	bne.n	8000bfe <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <linkTimer+0x144>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d00 <linkTimer+0x148>)
 8000bd4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bd6:	4a49      	ldr	r2, [pc, #292]	@ (8000cfc <linkTimer+0x144>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	4949      	ldr	r1, [pc, #292]	@ (8000d04 <linkTimer+0x14c>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	3315      	adds	r3, #21
 8000bec:	2206      	movs	r2, #6
 8000bee:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bf0:	4b45      	ldr	r3, [pc, #276]	@ (8000d08 <linkTimer+0x150>)
 8000bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	81fb      	strh	r3, [r7, #14]
 8000bfc:	e078      	b.n	8000cf0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bfe:	f000 f909 	bl	8000e14 <ReturnTimeElapsed>
 8000c02:	4603      	mov	r3, r0
 8000c04:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	493e      	ldr	r1, [pc, #248]	@ (8000d04 <linkTimer+0x14c>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	3308      	adds	r3, #8
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	4419      	add	r1, r3
 8000c1e:	4839      	ldr	r0, [pc, #228]	@ (8000d04 <linkTimer+0x14c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4403      	add	r3, r0
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	4934      	ldr	r1, [pc, #208]	@ (8000d04 <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c42:	4b2e      	ldr	r3, [pc, #184]	@ (8000cfc <linkTimer+0x144>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d04 <linkTimer+0x14c>)
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	440b      	add	r3, r1
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	3308      	adds	r3, #8
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d337      	bcc.n	8000cd0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <linkTimer+0x144>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c66:	7b7a      	ldrb	r2, [r7, #13]
 8000c68:	4926      	ldr	r1, [pc, #152]	@ (8000d04 <linkTimer+0x14c>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	3315      	adds	r3, #21
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c7a:	e013      	b.n	8000ca4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c7c:	7b7a      	ldrb	r2, [r7, #13]
 8000c7e:	4921      	ldr	r1, [pc, #132]	@ (8000d04 <linkTimer+0x14c>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	3315      	adds	r3, #21
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c90:	7b7a      	ldrb	r2, [r7, #13]
 8000c92:	491c      	ldr	r1, [pc, #112]	@ (8000d04 <linkTimer+0x14c>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3315      	adds	r3, #21
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca4:	7b3b      	ldrb	r3, [r7, #12]
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d00b      	beq.n	8000cc2 <linkTimer+0x10a>
 8000caa:	7b3a      	ldrb	r2, [r7, #12]
 8000cac:	4915      	ldr	r1, [pc, #84]	@ (8000d04 <linkTimer+0x14c>)
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3308      	adds	r3, #8
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d2dc      	bcs.n	8000c7c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cc2:	7b7a      	ldrb	r2, [r7, #13]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fecf 	bl	8000a6c <LinkTimerAfter>
 8000cce:	e00f      	b.n	8000cf0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <linkTimer+0x144>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff0c 	bl	8000af8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <linkTimer+0x144>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <linkTimer+0x148>)
 8000ce8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cea:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <linkTimer+0x144>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001bc 	.word	0x200001bc
 8000d00:	200001bd 	.word	0x200001bd
 8000d04:	2000012c 	.word	0x2000012c
 8000d08:	200001c0 	.word	0x200001c0

08000d0c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d1c:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	79fa      	ldrb	r2, [r7, #7]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d111      	bne.n	8000d4c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <UnlinkTimer+0xfc>)
 8000d30:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	4935      	ldr	r1, [pc, #212]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3315      	adds	r3, #21
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b2f      	ldr	r3, [pc, #188]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e03e      	b.n	8000dca <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	492f      	ldr	r1, [pc, #188]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	3314      	adds	r3, #20
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	492a      	ldr	r1, [pc, #168]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3315      	adds	r3, #21
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d74:	79f9      	ldrb	r1, [r7, #7]
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	4824      	ldr	r0, [pc, #144]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	440b      	add	r3, r1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4403      	add	r3, r0
 8000d84:	3315      	adds	r3, #21
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2d8      	uxtb	r0, r3
 8000d8a:	4920      	ldr	r1, [pc, #128]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	4602      	mov	r2, r0
 8000d9a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d013      	beq.n	8000dca <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000da2:	79f9      	ldrb	r1, [r7, #7]
 8000da4:	7bba      	ldrb	r2, [r7, #14]
 8000da6:	4819      	ldr	r0, [pc, #100]	@ (8000e0c <UnlinkTimer+0x100>)
 8000da8:	460b      	mov	r3, r1
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	440b      	add	r3, r1
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4403      	add	r3, r0
 8000db2:	3314      	adds	r3, #20
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2d8      	uxtb	r0, r3
 8000db8:	4914      	ldr	r1, [pc, #80]	@ (8000e0c <UnlinkTimer+0x100>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3314      	adds	r3, #20
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	490f      	ldr	r1, [pc, #60]	@ (8000e0c <UnlinkTimer+0x100>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	330c      	adds	r3, #12
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	d107      	bne.n	8000df8 <UnlinkTimer+0xec>
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <UnlinkTimer+0x104>)
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
}
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200001bc 	.word	0x200001bc
 8000e08:	200001bd 	.word	0x200001bd
 8000e0c:	2000012c 	.word	0x2000012c
 8000e10:	200001c0 	.word	0x200001c0

08000e14 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e22:	d026      	beq.n	8000e72 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e24:	f7ff fe02 	bl	8000a2c <ReadRtcSsrValue>
 8000e28:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d805      	bhi.n	8000e40 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	e00a      	b.n	8000e56 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <ReturnTimeElapsed+0x74>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <ReturnTimeElapsed+0x78>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <ReturnTimeElapsed+0x7c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	40d3      	lsrs	r3, r2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	b29b      	uxth	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001c0 	.word	0x200001c0
 8000e88:	200001c8 	.word	0x200001c8
 8000e8c:	200001c6 	.word	0x200001c6
 8000e90:	200001c5 	.word	0x200001c5

08000e94 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d108      	bne.n	8000eb6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ea4:	f7ff fdc2 	bl	8000a2c <ReadRtcSsrValue>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a21      	ldr	r2, [pc, #132]	@ (8000f30 <RestartWakeupCounter+0x9c>)
 8000eac:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f001 fac5 	bl	800243e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000eb4:	e039      	b.n	8000f2a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d803      	bhi.n	8000ec4 <RestartWakeupCounter+0x30>
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <RestartWakeupCounter+0xa0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000eca:	bf00      	nop
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000eea:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <RestartWakeupCounter+0xa8>)
 8000eee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ef2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f001 fab0 	bl	800245a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <RestartWakeupCounter+0xac>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	490e      	ldr	r1, [pc, #56]	@ (8000f40 <RestartWakeupCounter+0xac>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f0a:	f7ff fd8f 	bl	8000a2c <ReadRtcSsrValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <RestartWakeupCounter+0x9c>)
 8000f12:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f22:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f24:	f3af 8000 	nop.w
  return ;
 8000f28:	bf00      	nop
}
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001c0 	.word	0x200001c0
 8000f34:	200001c5 	.word	0x200001c5
 8000f38:	20000208 	.word	0x20000208
 8000f3c:	58000800 	.word	0x58000800
 8000f40:	40002800 	.word	0x40002800

08000f44 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f4a:	4b45      	ldr	r3, [pc, #276]	@ (8001060 <RescheduleTimerList+0x11c>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f56:	d107      	bne.n	8000f68 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f58:	bf00      	nop
 8000f5a:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f8      	bne.n	8000f5a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f68:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f76:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f78:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <RescheduleTimerList+0x124>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	493a      	ldr	r1, [pc, #232]	@ (800106c <RescheduleTimerList+0x128>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f92:	f7ff ff3f 	bl	8000e14 <ReturnTimeElapsed>
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d205      	bcs.n	8000fae <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e04d      	b.n	800104a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	4a30      	ldr	r2, [pc, #192]	@ (8001074 <RescheduleTimerList+0x130>)
 8000fb2:	8812      	ldrh	r2, [r2, #0]
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d906      	bls.n	8000fce <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <RescheduleTimerList+0x130>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e03d      	b.n	800104a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fde:	e034      	b.n	800104a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4922      	ldr	r1, [pc, #136]	@ (800106c <RescheduleTimerList+0x128>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	3308      	adds	r3, #8
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d20a      	bcs.n	800100e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	491c      	ldr	r1, [pc, #112]	@ (800106c <RescheduleTimerList+0x128>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	3308      	adds	r3, #8
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e013      	b.n	8001036 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	4916      	ldr	r1, [pc, #88]	@ (800106c <RescheduleTimerList+0x128>)
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3308      	adds	r3, #8
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	1ac9      	subs	r1, r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	@ (800106c <RescheduleTimerList+0x128>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4403      	add	r3, r0
 8001032:	3308      	adds	r3, #8
 8001034:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	490c      	ldr	r1, [pc, #48]	@ (800106c <RescheduleTimerList+0x128>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3315      	adds	r3, #21
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b06      	cmp	r3, #6
 800104e:	d1c7      	bne.n	8000fe0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff1e 	bl	8000e94 <RestartWakeupCounter>

  return ;
 8001058:	bf00      	nop
}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40002800 	.word	0x40002800
 8001064:	20000208 	.word	0x20000208
 8001068:	200001bc 	.word	0x200001bc
 800106c:	2000012c 	.word	0x2000012c
 8001070:	200001c4 	.word	0x200001c4
 8001074:	200001ca 	.word	0x200001ca

08001078 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800107e:	f3ef 8310 	mrs	r3, PRIMASK
 8001082:	617b      	str	r3, [r7, #20]
  return(result);
 8001084:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800108c:	4b59      	ldr	r3, [pc, #356]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22ca      	movs	r2, #202	@ 0xca
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
 8001094:	4b57      	ldr	r3, [pc, #348]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2253      	movs	r2, #83	@ 0x53
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800109c:	4b55      	ldr	r3, [pc, #340]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010aa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010ac:	4b52      	ldr	r3, [pc, #328]	@ (80011f8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010b8:	4950      	ldr	r1, [pc, #320]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	330c      	adds	r3, #12
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d16e      	bne.n	80011ac <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010d2:	494a      	ldr	r1, [pc, #296]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010e6:	4945      	ldr	r1, [pc, #276]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	3310      	adds	r3, #16
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010f8:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d04c      	beq.n	800119c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001102:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001106:	493d      	ldr	r1, [pc, #244]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	330d      	adds	r3, #13
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d124      	bne.n	8001166 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800111c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001120:	2101      	movs	r1, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fdf2 	bl	8000d0c <UnlinkTimer>
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f383 8810 	msr	PRIMASK, r3
}
 8001132:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001134:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001138:	4930      	ldr	r1, [pc, #192]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	3304      	adds	r3, #4
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f9b8 	bl	80014c4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	22ca      	movs	r2, #202	@ 0xca
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
 800115c:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2253      	movs	r2, #83	@ 0x53
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
 8001164:	e012      	b.n	800118c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f383 8810 	msr	PRIMASK, r3
}
 8001170:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001172:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f920 	bl	80013bc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800117c:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	22ca      	movs	r2, #202	@ 0xca
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	@ 0x53
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800118c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	4619      	mov	r1, r3
 8001194:	69b8      	ldr	r0, [r7, #24]
 8001196:	f000 fa1b 	bl	80015d0 <HW_TS_RTC_Int_AppNot>
 800119a:	e022      	b.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800119c:	f7ff fed2 	bl	8000f44 <RescheduleTimerList>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f383 8810 	msr	PRIMASK, r3
}
 80011aa:	e01a      	b.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011ac:	bf00      	nop
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f8      	beq.n	80011ae <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80011cc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f383 8810 	msr	PRIMASK, r3
}
 80011e0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80011ea:	bf00      	nop
}
 80011ec:	3728      	adds	r7, #40	@ 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000208 	.word	0x20000208
 80011f8:	200001bc 	.word	0x200001bc
 80011fc:	2000012c 	.word	0x2000012c
 8001200:	200001c4 	.word	0x200001c4
 8001204:	58000800 	.word	0x58000800

08001208 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001214:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <HW_TS_Init+0x188>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	22ca      	movs	r2, #202	@ 0xca
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24
 800121c:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <HW_TS_Init+0x188>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2253      	movs	r2, #83	@ 0x53
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001224:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <HW_TS_Init+0x18c>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a5a      	ldr	r2, [pc, #360]	@ (8001394 <HW_TS_Init+0x18c>)
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001230:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <HW_TS_Init+0x18c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f1c3 0304 	rsb	r3, r3, #4
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <HW_TS_Init+0x190>)
 8001244:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001246:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <HW_TS_Init+0x18c>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800124e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001252:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	fa92 f2a2 	rbit	r2, r2
 800125a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	2a00      	cmp	r2, #0
 8001264:	d101      	bne.n	800126a <HW_TS_Init+0x62>
  {
    return 32U;
 8001266:	2220      	movs	r2, #32
 8001268:	e003      	b.n	8001272 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	40d3      	lsrs	r3, r2
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b48      	ldr	r3, [pc, #288]	@ (800139c <HW_TS_Init+0x194>)
 800127c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800127e:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <HW_TS_Init+0x18c>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	b29b      	uxth	r3, r3
 8001284:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001288:	b29b      	uxth	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b44      	ldr	r3, [pc, #272]	@ (80013a0 <HW_TS_Init+0x198>)
 8001290:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HW_TS_Init+0x198>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	4a40      	ldr	r2, [pc, #256]	@ (800139c <HW_TS_Init+0x194>)
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80012a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001398 <HW_TS_Init+0x190>)
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	40d3      	lsrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d904      	bls.n	80012c0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <HW_TS_Init+0x19c>)
 80012b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	e003      	b.n	80012c8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HW_TS_Init+0x19c>)
 80012c6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80012cc:	f7ff fb9c 	bl	8000a08 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012d0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80012d4:	f7ff fb84 	bl	80009e0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d13d      	bne.n	800135a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012de:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <HW_TS_Init+0x1a0>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012e4:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <HW_TS_Init+0x1a4>)
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ea:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	77fb      	strb	r3, [r7, #31]
 80012f0:	e00c      	b.n	800130c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012f2:	7ffa      	ldrb	r2, [r7, #31]
 80012f4:	492e      	ldr	r1, [pc, #184]	@ (80013b0 <HW_TS_Init+0x1a8>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	330c      	adds	r3, #12
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	3301      	adds	r3, #1
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d9ef      	bls.n	80012f2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001312:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <HW_TS_Init+0x1ac>)
 8001314:	2206      	movs	r2, #6
 8001316:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HW_TS_Init+0x188>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <HW_TS_Init+0x188>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001326:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HW_TS_Init+0x188>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HW_TS_Init+0x188>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001338:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <HW_TS_Init+0x1b0>)
 800133c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001340:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001342:	2003      	movs	r0, #3
 8001344:	f001 f889 	bl	800245a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HW_TS_Init+0x188>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <HW_TS_Init+0x188>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e009      	b.n	800136e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HW_TS_Init+0x188>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001368:	2003      	movs	r0, #3
 800136a:	f001 f868 	bl	800243e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <HW_TS_Init+0x188>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	22ff      	movs	r2, #255	@ 0xff
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001376:	2200      	movs	r2, #0
 8001378:	2103      	movs	r1, #3
 800137a:	2003      	movs	r0, #3
 800137c:	f001 f81d 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001380:	2003      	movs	r0, #3
 8001382:	f001 f834 	bl	80023ee <HAL_NVIC_EnableIRQ>

  return;
 8001386:	bf00      	nop
}
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000208 	.word	0x20000208
 8001394:	40002800 	.word	0x40002800
 8001398:	200001c5 	.word	0x200001c5
 800139c:	200001c6 	.word	0x200001c6
 80013a0:	200001c8 	.word	0x200001c8
 80013a4:	200001ca 	.word	0x200001ca
 80013a8:	200001c4 	.word	0x200001c4
 80013ac:	200001c0 	.word	0x200001c0
 80013b0:	2000012c 	.word	0x2000012c
 80013b4:	200001bc 	.word	0x200001bc
 80013b8:	58000800 	.word	0x58000800

080013bc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013c6:	f3ef 8310 	mrs	r3, PRIMASK
 80013ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80013cc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013d4:	2003      	movs	r0, #3
 80013d6:	f001 f818 	bl	800240a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013da:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <HW_TS_Stop+0xf0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	22ca      	movs	r2, #202	@ 0xca
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80013e2:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <HW_TS_Stop+0xf0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2253      	movs	r2, #83	@ 0x53
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4930      	ldr	r1, [pc, #192]	@ (80014b0 <HW_TS_Stop+0xf4>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	330c      	adds	r3, #12
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d142      	bne.n	8001488 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc80 	bl	8000d0c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <HW_TS_Stop+0xf8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001412:	7cfb      	ldrb	r3, [r7, #19]
 8001414:	2b06      	cmp	r3, #6
 8001416:	d12f      	bne.n	8001478 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HW_TS_Stop+0xfc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001424:	d107      	bne.n	8001436 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001426:	bf00      	nop
 8001428:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HW_TS_Stop+0xf0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f8      	bne.n	8001428 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HW_TS_Stop+0xf0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001444:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001446:	bf00      	nop
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HW_TS_Stop+0xf0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f8      	beq.n	8001448 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001466:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <HW_TS_Stop+0x100>)
 800146a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800146e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001470:	2003      	movs	r0, #3
 8001472:	f000 fff2 	bl	800245a <HAL_NVIC_ClearPendingIRQ>
 8001476:	e007      	b.n	8001488 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HW_TS_Stop+0x104>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	7cfa      	ldrb	r2, [r7, #19]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001484:	f7ff fd5e 	bl	8000f44 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HW_TS_Stop+0xf0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	22ff      	movs	r2, #255	@ 0xff
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001490:	2003      	movs	r0, #3
 8001492:	f000 ffac 	bl	80023ee <HAL_NVIC_EnableIRQ>
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f383 8810 	msr	PRIMASK, r3
}
 80014a0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014a2:	bf00      	nop
}
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000208 	.word	0x20000208
 80014b0:	2000012c 	.word	0x2000012c
 80014b4:	200001bc 	.word	0x200001bc
 80014b8:	40002800 	.word	0x40002800
 80014bc:	58000800 	.word	0x58000800
 80014c0:	200001bd 	.word	0x200001bd

080014c4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	493b      	ldr	r1, [pc, #236]	@ (80015c0 <HW_TS_Start+0xfc>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	330c      	adds	r3, #12
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d103      	bne.n	80014f0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff66 	bl	80013bc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014f0:	f3ef 8310 	mrs	r3, PRIMASK
 80014f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80014f6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014fa:	b672      	cpsid	i
}
 80014fc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014fe:	2003      	movs	r0, #3
 8001500:	f000 ff83 	bl	800240a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001504:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <HW_TS_Start+0x100>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	22ca      	movs	r2, #202	@ 0xca
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HW_TS_Start+0x100>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2253      	movs	r2, #83	@ 0x53
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	492a      	ldr	r1, [pc, #168]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	330c      	adds	r3, #12
 8001524:	2202      	movs	r2, #2
 8001526:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	4925      	ldr	r1, [pc, #148]	@ (80015c0 <HW_TS_Start+0xfc>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	3308      	adds	r3, #8
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	4920      	ldr	r1, [pc, #128]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3304      	adds	r3, #4
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fb30 	bl	8000bb8 <linkTimer>
 8001558:	4603      	mov	r3, r0
 800155a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HW_TS_Start+0x104>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HW_TS_Start+0x108>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	7c7a      	ldrb	r2, [r7, #17]
 800156a:	429a      	cmp	r2, r3
 800156c:	d002      	beq.n	8001574 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800156e:	f7ff fce9 	bl	8000f44 <RescheduleTimerList>
 8001572:	e013      	b.n	800159c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	4912      	ldr	r1, [pc, #72]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3308      	adds	r3, #8
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	8a7b      	ldrh	r3, [r7, #18]
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	1ac9      	subs	r1, r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <HW_TS_Start+0xfc>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4403      	add	r3, r0
 8001598:	3308      	adds	r3, #8
 800159a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HW_TS_Start+0x100>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	22ff      	movs	r2, #255	@ 0xff
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 ff22 	bl	80023ee <HAL_NVIC_EnableIRQ>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	f383 8810 	msr	PRIMASK, r3
}
 80015b4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015b6:	bf00      	nop
}
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000012c 	.word	0x2000012c
 80015c4:	20000208 	.word	0x20000208
 80015c8:	200001bc 	.word	0x200001bc
 80015cc:	200001bd 	.word	0x200001bd

080015d0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	460b      	mov	r3, r1
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4798      	blx	r3

  return;
 80015e2:	bf00      	nop
}
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <LL_RCC_LSE_SetDriveCapability>:
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fa:	f023 0218 	bic.w	r2, r3, #24
 80015fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4313      	orrs	r3, r2
 8001606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) //function used to print() in usart
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d102      	bne.n	800165c <__io_putchar+0x14>
    __io_putchar('\r');
 8001656:	200d      	movs	r0, #13
 8001658:	f7ff fff6 	bl	8001648 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	2201      	movs	r2, #1
 8001664:	4803      	ldr	r0, [pc, #12]	@ (8001674 <__io_putchar+0x2c>)
 8001666:	f002 ff11 	bl	800448c <HAL_UART_Transmit>

  return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000022c 	.word	0x2000022c

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f000 fcdc 	bl	8002038 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001680:	f7ff f832 	bl	80006e8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001684:	f000 f82c 	bl	80016e0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001688:	f000 f87e 	bl	8001788 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800168c:	f000 f89c 	bl	80017c8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001690:	f000 f8ae 	bl	80017f0 <MX_RF_Init>
  MX_GPIO_Init();
 8001694:	f000 f930 	bl	80018f8 <MX_GPIO_Init>
  MX_RTC_Init();
 8001698:	f000 f8b2 	bl	8001800 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800169c:	f000 f8e0 	bl	8001860 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80016a0:	f7ff f830 	bl	8000704 <MX_APPE_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 fbe7 	bl	8001e78 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 fbe4 	bl	8001e78 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f000 fbe1 	bl	8001e78 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80016b6:	2101      	movs	r1, #1
 80016b8:	2000      	movs	r0, #0
 80016ba:	f000 fc17 	bl	8001eec <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80016be:	2101      	movs	r1, #1
 80016c0:	2001      	movs	r0, #1
 80016c2:	f000 fc13 	bl	8001eec <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80016c6:	2101      	movs	r1, #1
 80016c8:	2002      	movs	r0, #2
 80016ca:	f000 fc0f 	bl	8001eec <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting");
 80016ce:	4803      	ldr	r0, [pc, #12]	@ (80016dc <main+0x64>)
 80016d0:	f006 ffd0 	bl	8008674 <iprintf>
  while (1)
  {

    /* USER CODE END WHILE */
    MX_APPE_Process();
 80016d4:	f7ff f945 	bl	8000962 <MX_APPE_Process>
 80016d8:	e7fc      	b.n	80016d4 <main+0x5c>
 80016da:	bf00      	nop
 80016dc:	08009418 	.word	0x08009418

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b098      	sub	sp, #96	@ 0x60
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	2244      	movs	r2, #68	@ 0x44
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f007 f81d 	bl	800872e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001706:	f001 f929 	bl	800295c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff ff6d 	bl	80015ea <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001710:	2327      	movs	r3, #39	@ 0x27
 8001712:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001718:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800171a:	2301      	movs	r3, #1
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001724:	2301      	movs	r3, #1
 8001726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001728:	2340      	movs	r3, #64	@ 0x40
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800172c:	2300      	movs	r3, #0
 800172e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001730:	23a0      	movs	r3, #160	@ 0xa0
 8001732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fc75 	bl	800302c <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001748:	f000 f8e3 	bl	8001912 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800174c:	236f      	movs	r3, #111	@ 0x6f
 800174e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f001 ff93 	bl	8003698 <HAL_RCC_ClockConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001778:	f000 f8cb 	bl	8001912 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800177c:	f002 fc53 	bl	8004026 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001780:	bf00      	nop
 8001782:	3760      	adds	r7, #96	@ 0x60
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	@ 0x30
 800178c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2230      	movs	r2, #48	@ 0x30
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f006 ffca 	bl	800872e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800179a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800179e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80017a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80017aa:	2310      	movs	r3, #16
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ae:	463b      	mov	r3, r7
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fb42 	bl	8003e3a <HAL_RCCEx_PeriphCLKConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80017bc:	f000 f8a9 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	@ 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <MX_IPCC_Init+0x20>)
 80017ce:	4a07      	ldr	r2, [pc, #28]	@ (80017ec <MX_IPCC_Init+0x24>)
 80017d0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_IPCC_Init+0x20>)
 80017d4:	f001 f83c 	bl	8002850 <HAL_IPCC_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80017de:	f000 f898 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200001cc 	.word	0x200001cc
 80017ec:	58000c00 	.word	0x58000c00

080017f0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_RTC_Init+0x58>)
 8001806:	4a15      	ldr	r2, [pc, #84]	@ (800185c <MX_RTC_Init+0x5c>)
 8001808:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <MX_RTC_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_RTC_Init+0x58>)
 8001812:	220f      	movs	r2, #15
 8001814:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <MX_RTC_Init+0x58>)
 8001818:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800181c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_RTC_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_RTC_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_RTC_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001830:	4809      	ldr	r0, [pc, #36]	@ (8001858 <MX_RTC_Init+0x58>)
 8001832:	f002 fbff 	bl	8004034 <HAL_RTC_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 800183c:	f000 f869 	bl	8001912 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	4804      	ldr	r0, [pc, #16]	@ (8001858 <MX_RTC_Init+0x58>)
 8001846:	f002 fcf5 	bl	8004234 <HAL_RTCEx_SetWakeUpTimer_IT>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001850:	f000 f85f 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000208 	.word	0x20000208
 800185c:	40002800 	.word	0x40002800

08001860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 8001866:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <MX_USART1_UART_Init+0x94>)
 8001868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a8:	4811      	ldr	r0, [pc, #68]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 80018aa:	f002 fd9f 	bl	80043ec <HAL_UART_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018b4:	f000 f82d 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b8:	2100      	movs	r1, #0
 80018ba:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 80018bc:	f003 faf4 	bl	8004ea8 <HAL_UARTEx_SetTxFifoThreshold>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018c6:	f000 f824 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4808      	ldr	r0, [pc, #32]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 80018ce:	f003 fb29 	bl	8004f24 <HAL_UARTEx_SetRxFifoThreshold>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018d8:	f000 f81b 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	@ (80018f0 <MX_USART1_UART_Init+0x90>)
 80018de:	f003 faaa 	bl	8004e36 <HAL_UARTEx_DisableFifoMode>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018e8:	f000 f813 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000022c 	.word	0x2000022c
 80018f4:	40013800 	.word	0x40013800

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fc:	2004      	movs	r0, #4
 80018fe:	f7ff fe8a 	bl	8001616 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff fe87 	bl	8001616 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	2002      	movs	r0, #2
 800190a:	f7ff fe84 	bl	8001616 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}

08001912 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001916:	b672      	cpsid	i
}
 8001918:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191a:	bf00      	nop
 800191c:	e7fd      	b.n	800191a <Error_Handler+0x8>

0800191e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800192e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_AHB2_GRP1_EnableClock>:
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800194e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4313      	orrs	r3, r2
 8001956:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001964:	68fb      	ldr	r3, [r7, #12]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4313      	orrs	r3, r2
 8001988:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c8:	68fb      	ldr	r3, [r7, #12]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4013      	ands	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001a0c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a10:	f7ff ffaf 	bl	8001972 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	202e      	movs	r0, #46	@ 0x2e
 8001a1a:	f000 fcce 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001a1e:	202e      	movs	r0, #46	@ 0x2e
 8001a20:	f000 fce5 	bl	80023ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <HAL_IPCC_MspInit+0x44>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d113      	bne.n	8001a62 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a3a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001a3e:	f7ff ff98 	bl	8001972 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	202c      	movs	r0, #44	@ 0x2c
 8001a48:	f000 fcb7 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a4c:	202c      	movs	r0, #44	@ 0x2c
 8001a4e:	f000 fcce 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	202d      	movs	r0, #45	@ 0x2d
 8001a58:	f000 fcaf 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a5c:	202d      	movs	r0, #45	@ 0x2d
 8001a5e:	f000 fcc6 	bl	80023ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	58000c00 	.word	0x58000c00

08001a70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	@ 0x38
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	2230      	movs	r2, #48	@ 0x30
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f006 fe54 	bl	800872e <memset>
  if(hrtc->Instance==RTC)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <HAL_RTC_MspInit+0x64>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d11d      	bne.n	8001acc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a94:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 f9ca 	bl	8003e3a <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001aac:	f7ff ff31 	bl	8001912 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ab0:	f7ff ff35 	bl	800191e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ab4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ab8:	f7ff ff74 	bl	80019a4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 fc7a 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	f000 fc91 	bl	80023ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001acc:	bf00      	nop
 8001ace:	3738      	adds	r7, #56	@ 0x38
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40002800 	.word	0x40002800

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b094      	sub	sp, #80	@ 0x50
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2230      	movs	r2, #48	@ 0x30
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f006 fe18 	bl	800872e <memset>
  if(huart->Instance==USART1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <HAL_UART_MspInit+0x88>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d126      	bne.n	8001b56 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 f990 	bl	8003e3a <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b20:	f7ff fef7 	bl	8001912 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b24:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b28:	f7ff ff55 	bl	80019d6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff ff07 	bl	8001940 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b44:	2307      	movs	r3, #7
 8001b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b52:	f000 fcbf 	bl	80024d4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b56:	bf00      	nop
 8001b58:	3750      	adds	r7, #80	@ 0x50
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40013800 	.word	0x40013800

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <NMI_Handler+0x4>

08001b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bba:	f000 fa97 	bl	80020ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001bc6:	f7ff fa57 	bl	8001078 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001bd2:	f006 f8f3 	bl	8007dbc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001bde:	f006 f923 	bl	8007e28 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001bea:	f000 fe0d 	bl	8002808 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e00a      	b.n	8001c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c04:	f3af 8000 	nop.w
 8001c08:	4601      	mov	r1, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	60ba      	str	r2, [r7, #8]
 8001c10:	b2ca      	uxtb	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbf0      	blt.n	8001c04 <_read+0x12>
  }

  return len;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e009      	b.n	8001c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fcfe 	bl	8001648 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dbf1      	blt.n	8001c3e <_write+0x12>
  }
  return len;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_close>:

int _close(int file)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_isatty>:

int _isatty(int file)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f006 fd66 	bl	80087cc <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20003000 	.word	0x20003000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	200002c0 	.word	0x200002c0
 8001d34:	200005d8 	.word	0x200005d8

08001d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001d3c:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <SystemInit+0x90>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d42:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <SystemInit+0x90>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d60:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001d64:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <SystemInit+0x94>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d82:	f023 0305 	bic.w	r3, r3, #5
 8001d86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da2:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd0 <SystemInit+0x98>)
 8001da4:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001db0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00
 8001dcc:	faf6fefb 	.word	0xfaf6fefb
 8001dd0:	22041000 	.word	0x22041000

08001dd4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001dd4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd8:	3304      	adds	r3, #4

08001dda <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dda:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ddc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001dde:	d3f9      	bcc.n	8001dd4 <CopyDataInit>
  bx lr
 8001de0:	4770      	bx	lr

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001de2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001de4:	3004      	adds	r0, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001de6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>
  bx lr
 8001dea:	4770      	bx	lr

08001dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dec:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001df0:	f7ff ffa2 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001df4:	480b      	ldr	r0, [pc, #44]	@ (8001e24 <LoopForever+0x6>)
 8001df6:	490c      	ldr	r1, [pc, #48]	@ (8001e28 <LoopForever+0xa>)
 8001df8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <LoopForever+0xe>)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f7ff ffed 	bl	8001dda <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001e00:	480b      	ldr	r0, [pc, #44]	@ (8001e30 <LoopForever+0x12>)
 8001e02:	490c      	ldr	r1, [pc, #48]	@ (8001e34 <LoopForever+0x16>)
 8001e04:	4a0c      	ldr	r2, [pc, #48]	@ (8001e38 <LoopForever+0x1a>)
 8001e06:	2300      	movs	r3, #0
 8001e08:	f7ff ffe7 	bl	8001dda <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001e0c:	480b      	ldr	r0, [pc, #44]	@ (8001e3c <LoopForever+0x1e>)
 8001e0e:	490c      	ldr	r1, [pc, #48]	@ (8001e40 <LoopForever+0x22>)
 8001e10:	2300      	movs	r3, #0
 8001e12:	f7ff ffe8 	bl	8001de6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e16:	f006 fcdf 	bl	80087d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e1a:	f7ff fc2d 	bl	8001678 <main>

08001e1e <LoopForever>:

LoopForever:
  b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   r0, =_estack
 8001e20:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001e24:	20000008 	.word	0x20000008
 8001e28:	200000c4 	.word	0x200000c4
 8001e2c:	0800973c 	.word	0x0800973c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001e30:	200301e4 	.word	0x200301e4
 8001e34:	20030a67 	.word	0x20030a67
 8001e38:	0800983e 	.word	0x0800983e
  INIT_BSS _sbss, _ebss
 8001e3c:	20000110 	.word	0x20000110
 8001e40:	200005d8 	.word	0x200005d8

08001e44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_IRQHandler>

08001e46 <LL_AHB2_GRP1_EnableClock>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001e92:	2002      	movs	r0, #2
 8001e94:	f7ff ffd7 	bl	8001e46 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <BSP_LED_Init+0x6c>)
 8001e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <BSP_LED_Init+0x70>)
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	f107 020c 	add.w	r2, r7, #12
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fb09 	bl	80024d4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4a08      	ldr	r2, [pc, #32]	@ (8001ee8 <BSP_LED_Init+0x70>)
 8001ec6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <BSP_LED_Init+0x6c>)
 8001ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f000 fc65 	bl	80027a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	08009688 	.word	0x08009688
 8001ee8:	20000018 	.word	0x20000018

08001eec <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <BSP_PB_Init+0x2e>
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff ff97 	bl	8001e46 <LL_AHB2_GRP1_EnableClock>
 8001f18:	e00c      	b.n	8001f34 <BSP_PB_Init+0x48>
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d103      	bne.n	8001f28 <BSP_PB_Init+0x3c>
 8001f20:	2010      	movs	r0, #16
 8001f22:	f7ff ff90 	bl	8001e46 <LL_AHB2_GRP1_EnableClock>
 8001f26:	e005      	b.n	8001f34 <BSP_PB_Init+0x48>
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d102      	bne.n	8001f34 <BSP_PB_Init+0x48>
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff ff89 	bl	8001e46 <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4a29      	ldr	r2, [pc, #164]	@ (8001fdc <BSP_PB_Init+0xf0>)
 8001f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <BSP_PB_Init+0xf4>)
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	f107 020c 	add.w	r2, r7, #12
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fab8 	bl	80024d4 <HAL_GPIO_Init>
 8001f64:	e035      	b.n	8001fd2 <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8001f66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f6a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <BSP_PB_Init+0xf4>)
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	f107 020c 	add.w	r2, r7, #12
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 faaa 	bl	80024d4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <BSP_PB_Init+0xf8>)
 8001f86:	441a      	add	r2, r3
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4917      	ldr	r1, [pc, #92]	@ (8001fe8 <BSP_PB_Init+0xfc>)
 8001f8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f000 fa89 	bl	80024aa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4a11      	ldr	r2, [pc, #68]	@ (8001fe4 <BSP_PB_Init+0xf8>)
 8001f9e:	1898      	adds	r0, r3, r2
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <BSP_PB_Init+0x100>)
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	f000 fa63 	bl	8002476 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <BSP_PB_Init+0x104>)
 8001fb4:	56d0      	ldrsb	r0, [r2, r3]
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff4 <BSP_PB_Init+0x108>)
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f000 f9fa 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4a09      	ldr	r2, [pc, #36]	@ (8001ff0 <BSP_PB_Init+0x104>)
 8001fca:	56d3      	ldrsb	r3, [r2, r3]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fa0e 	bl	80023ee <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	08009690 	.word	0x08009690
 8001fe0:	20000024 	.word	0x20000024
 8001fe4:	200002c4 	.word	0x200002c4
 8001fe8:	0800969c 	.word	0x0800969c
 8001fec:	20000030 	.word	0x20000030
 8001ff0:	08009698 	.word	0x08009698
 8001ff4:	2000003c 	.word	0x2000003c

08001ff8 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff fff0 	bl	8001ff8 <BSP_PB_Callback>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff ffe9 	bl	8001ff8 <BSP_PB_Callback>
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 800202e:	2002      	movs	r0, #2
 8002030:	f7ff ffe2 	bl	8001ff8 <BSP_PB_Callback>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_Init+0x3c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <HAL_Init+0x3c>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204e:	2003      	movs	r0, #3
 8002050:	f000 f9a8 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002054:	2000      	movs	r0, #0
 8002056:	f000 f80f 	bl	8002078 <HAL_InitTick>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	e001      	b.n	800206a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002066:	f7ff fccf 	bl	8001a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800206a:	79fb      	ldrb	r3, [r7, #7]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	58004000 	.word	0x58004000

08002078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002084:	4b17      	ldr	r3, [pc, #92]	@ (80020e4 <HAL_InitTick+0x6c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d024      	beq.n	80020d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800208c:	f001 fcb0 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <HAL_InitTick+0x6c>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209c:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f9be 	bl	8002426 <HAL_SYSTICK_Config>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10f      	bne.n	80020d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	d809      	bhi.n	80020ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b6:	2200      	movs	r2, #0
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	f04f 30ff 	mov.w	r0, #4294967295
 80020be:	f000 f97c 	bl	80023ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c2:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <HAL_InitTick+0x70>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e007      	b.n	80020da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e004      	b.n	80020da <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e001      	b.n	80020da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2000004c 	.word	0x2000004c
 80020e8:	20000048 	.word	0x20000048

080020ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_IncTick+0x20>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_IncTick+0x24>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <HAL_IncTick+0x24>)
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	2000004c 	.word	0x2000004c
 8002110:	200002dc 	.word	0x200002dc

08002114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;
 8002118:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <HAL_GetTick+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	200002dc 	.word	0x200002dc

0800212c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_GetTickPrio+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000048 	.word	0x20000048

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	@ (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db12      	blt.n	800221c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	490a      	ldr	r1, [pc, #40]	@ (8002228 <__NVIC_DisableIRQ+0x44>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	3320      	adds	r3, #32
 800220c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002210:	f3bf 8f4f 	dsb	sy
}
 8002214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002216:	f3bf 8f6f 	isb	sy
}
 800221a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0c      	blt.n	8002258 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	@ (8002264 <__NVIC_SetPendingIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	3340      	adds	r3, #64	@ 0x40
 8002254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0c      	blt.n	8002294 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4907      	ldr	r1, [pc, #28]	@ (80022a0 <__NVIC_ClearPendingIRQ+0x38>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	3360      	adds	r3, #96	@ 0x60
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	@ (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	@ (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f7ff ff8e 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fec9 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff fee0 	bl	800218c <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff90 	bl	80022f8 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5f 	bl	80022a4 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fed3 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fee3 	bl	80021e4 <__NVIC_DisableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ff96 	bl	8002360 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff feed 	bl	800222c <__NVIC_SetPendingIRQ>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fefd 	bl	8002268 <__NVIC_ClearPendingIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002476:	b480      	push	{r7}
 8002478:	b087      	sub	sp, #28
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	460b      	mov	r3, r1
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002488:	7afb      	ldrb	r3, [r7, #11]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	605a      	str	r2, [r3, #4]
      break;
 8002494:	e002      	b.n	800249c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
      break;
 800249a:	bf00      	nop
  }

  return status;
 800249c:	7dfb      	ldrb	r3, [r7, #23]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e003      	b.n	80024c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e2:	e146      	b.n	8002772 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8138 	beq.w	800276c <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d005      	beq.n	8002514 <HAL_GPIO_Init+0x40>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d130      	bne.n	8002576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800254a:	2201      	movs	r2, #1
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 0201 	and.w	r2, r3, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b03      	cmp	r3, #3
 8002580:	d017      	beq.n	80025b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d123      	bne.n	8002606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8092 	beq.w	800276c <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002648:	4a51      	ldr	r2, [pc, #324]	@ (8002790 <HAL_GPIO_Init+0x2bc>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002672:	d013      	beq.n	800269c <HAL_GPIO_Init+0x1c8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a47      	ldr	r2, [pc, #284]	@ (8002794 <HAL_GPIO_Init+0x2c0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00d      	beq.n	8002698 <HAL_GPIO_Init+0x1c4>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a46      	ldr	r2, [pc, #280]	@ (8002798 <HAL_GPIO_Init+0x2c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_Init+0x1c0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a45      	ldr	r2, [pc, #276]	@ (800279c <HAL_GPIO_Init+0x2c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_GPIO_Init+0x1bc>
 800268c:	2304      	movs	r3, #4
 800268e:	e006      	b.n	800269e <HAL_GPIO_Init+0x1ca>
 8002690:	2307      	movs	r3, #7
 8002692:	e004      	b.n	800269e <HAL_GPIO_Init+0x1ca>
 8002694:	2302      	movs	r3, #2
 8002696:	e002      	b.n	800269e <HAL_GPIO_Init+0x1ca>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_GPIO_Init+0x1ca>
 800269c:	2300      	movs	r3, #0
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	f002 0203 	and.w	r2, r2, #3
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	4093      	lsls	r3, r2
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ae:	4938      	ldr	r1, [pc, #224]	@ (8002790 <HAL_GPIO_Init+0x2bc>)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026bc:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <HAL_GPIO_Init+0x2cc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e0:	4a2f      	ldr	r2, [pc, #188]	@ (80027a0 <HAL_GPIO_Init+0x2cc>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026e6:	4b2e      	ldr	r3, [pc, #184]	@ (80027a0 <HAL_GPIO_Init+0x2cc>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800270a:	4a25      	ldr	r2, [pc, #148]	@ (80027a0 <HAL_GPIO_Init+0x2cc>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002710:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_GPIO_Init+0x2cc>)
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002736:	4a1a      	ldr	r2, [pc, #104]	@ (80027a0 <HAL_GPIO_Init+0x2cc>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800273e:	4b18      	ldr	r3, [pc, #96]	@ (80027a0 <HAL_GPIO_Init+0x2cc>)
 8002740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002764:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <HAL_GPIO_Init+0x2cc>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f aeb1 	bne.w	80024e4 <HAL_GPIO_Init+0x10>
  }
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	48001000 	.word	0x48001000
 80027a0:	58000800 	.word	0x58000800

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43d9      	mvns	r1, r3
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	400b      	ands	r3, r1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800280e:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <HAL_HSEM_IRQHandler+0x30>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002814:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <HAL_HSEM_IRQHandler+0x30>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	43db      	mvns	r3, r3
 800281c:	4906      	ldr	r1, [pc, #24]	@ (8002838 <HAL_HSEM_IRQHandler+0x30>)
 800281e:	4013      	ands	r3, r2
 8002820:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002822:	4a05      	ldr	r2, [pc, #20]	@ (8002838 <HAL_HSEM_IRQHandler+0x30>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f807 	bl	800283c <HAL_HSEM_FreeCallback>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	58001500 	.word	0x58001500

0800283c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01e      	beq.n	80028a0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002862:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <HAL_IPCC_Init+0x60>)
 8002864:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff f8d8 	bl	8001a28 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002878:	68b8      	ldr	r0, [r7, #8]
 800287a:	f000 f85b 	bl	8002934 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f82c 	bl	80028e8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800289e:	e001      	b.n	80028a4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	58000c00 	.word	0x58000c00

080028b4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	4613      	mov	r3, r2
 80028da:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e00f      	b.n	8002916 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	4a0b      	ldr	r2, [pc, #44]	@ (800292c <IPCC_SetDefaultCallbacks+0x44>)
 8002900:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3306      	adds	r3, #6
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	4a08      	ldr	r2, [pc, #32]	@ (8002930 <IPCC_SetDefaultCallbacks+0x48>)
 800290e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d9ec      	bls.n	80028f6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	080028b5 	.word	0x080028b5
 8002930:	080028cf 	.word	0x080028cf

08002934 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002948:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	223f      	movs	r2, #63	@ 0x3f
 800294e:	609a      	str	r2, [r3, #8]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	58000400 	.word	0x58000400

0800297c <LL_PWR_EnableSRAM2Retention>:
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800298a:	6093      	str	r3, [r2, #8]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	58000400 	.word	0x58000400

0800299c <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80029a0:	f7ff ffec 	bl	800297c <LL_PWR_EnableSRAM2Retention>
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ba:	d101      	bne.n	80029c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_RCC_HSE_Enable>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_RCC_HSE_Disable>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_HSE_IsReady>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a1a:	d101      	bne.n	8002a20 <LL_RCC_HSE_IsReady+0x18>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <LL_RCC_HSE_IsReady+0x1a>
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_RCC_HSI_Enable>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_HSI_Disable>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a5c:	6013      	str	r3, [r2, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_RCC_HSI_IsReady>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7a:	d101      	bne.n	8002a80 <LL_RCC_HSI_IsReady+0x18>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_RCC_HSI_IsReady+0x1a>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_RCC_HSI_SetCalibTrimming>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_RCC_LSE_Enable>:
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_LSE_Disable>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_RCC_LSE_EnableBypass>:
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_LSE_DisableBypass>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_LSE_IsReady>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d101      	bne.n	8002b56 <LL_RCC_LSE_IsReady+0x18>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <LL_RCC_LSE_IsReady+0x1a>
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_LSI1_Enable>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_LSI1_Disable>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_RCC_LSI1_IsReady>:
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d101      	bne.n	8002bbe <LL_RCC_LSI1_IsReady+0x18>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <LL_RCC_LSI1_IsReady+0x1a>
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_LSI2_Enable>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_RCC_LSI2_Disable>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_LSI2_IsReady>:
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d101      	bne.n	8002c26 <LL_RCC_LSI2_IsReady+0x18>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <LL_RCC_LSI2_IsReady+0x1a>
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_LSI2_SetTrimming>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_MSI_Enable>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_MSI_Disable>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6013      	str	r3, [r2, #0]
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_MSI_IsReady>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d101      	bne.n	8002cb2 <LL_RCC_MSI_IsReady+0x16>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <LL_RCC_MSI_IsReady+0x18>
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_MSI_SetRange>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_RCC_MSI_GetRange>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cf6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2bb0      	cmp	r3, #176	@ 0xb0
 8002cfc:	d901      	bls.n	8002d02 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002cfe:	23b0      	movs	r3, #176	@ 0xb0
 8002d00:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002d02:	687b      	ldr	r3, [r7, #4]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_SetSysClkSource>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 0203 	bic.w	r2, r3, #3
 8002d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_RCC_GetSysClkSource>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_SetAHBPrescaler>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002db2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_RCC_SetAHB4Prescaler>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_RCC_SetAPB1Prescaler>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_SetAPB2Prescaler>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <LL_RCC_GetAHBPrescaler>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_RCC_GetAHB4Prescaler>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_GetAPB1Prescaler>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_GetAPB2Prescaler>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002edc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ee0:	6013      	str	r3, [r2, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002efe:	d101      	bne.n	8002f04 <LL_RCC_PLL_IsReady+0x18>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <LL_RCC_PLL_IsReady+0x1a>
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0303 	and.w	r3, r3, #3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f84:	d101      	bne.n	8002f8a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002faa:	d101      	bne.n	8002fb0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fd0:	d101      	bne.n	8002fd6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ff4:	d101      	bne.n	8002ffa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800300a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003014:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003018:	d101      	bne.n	800301e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b08d      	sub	sp, #52	@ 0x34
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e324      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 808d 	beq.w	8003166 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304c:	f7ff fe89 	bl	8002d62 <LL_RCC_GetSysClkSource>
 8003050:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003052:	f7ff ff82 	bl	8002f5a <LL_RCC_PLL_GetMainSource>
 8003056:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x3e>
 800305e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d147      	bne.n	80030f4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003066:	2b01      	cmp	r3, #1
 8003068:	d144      	bne.n	80030f4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e308      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800307a:	f7ff fe34 	bl	8002ce6 <LL_RCC_MSI_GetRange>
 800307e:	4603      	mov	r3, r0
 8003080:	429c      	cmp	r4, r3
 8003082:	d914      	bls.n	80030ae <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fcf1 	bl	8003a70 <RCC_SetFlashLatencyFromMSIRange>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e2f7      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fe0e 	bl	8002cbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fe32 	bl	8002d10 <LL_RCC_MSI_SetCalibTrimming>
 80030ac:	e013      	b.n	80030d6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fe03 	bl	8002cbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fe27 	bl	8002d10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fcd2 	bl	8003a70 <RCC_SetFlashLatencyFromMSIRange>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e2d8      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030d6:	f000 fc8b 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 80030da:	4603      	mov	r3, r0
 80030dc:	4aa4      	ldr	r2, [pc, #656]	@ (8003370 <HAL_RCC_OscConfig+0x344>)
 80030de:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030e0:	4ba4      	ldr	r3, [pc, #656]	@ (8003374 <HAL_RCC_OscConfig+0x348>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe ffc7 	bl	8002078 <HAL_InitTick>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d039      	beq.n	8003164 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e2c9      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01e      	beq.n	800313a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030fc:	f7ff fdb0 	bl	8002c60 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003100:	f7ff f808 	bl	8002114 <HAL_GetTick>
 8003104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003108:	f7ff f804 	bl	8002114 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e2b6      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800311a:	f7ff fdbf 	bl	8002c9c <LL_RCC_MSI_IsReady>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f1      	beq.n	8003108 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fdc8 	bl	8002cbe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fdec 	bl	8002d10 <LL_RCC_MSI_SetCalibTrimming>
 8003138:	e015      	b.n	8003166 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800313a:	f7ff fda0 	bl	8002c7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313e:	f7fe ffe9 	bl	8002114 <HAL_GetTick>
 8003142:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003146:	f7fe ffe5 	bl	8002114 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e297      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003158:	f7ff fda0 	bl	8002c9c <LL_RCC_MSI_IsReady>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f1      	bne.n	8003146 <HAL_RCC_OscConfig+0x11a>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003164:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d047      	beq.n	8003202 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003172:	f7ff fdf6 	bl	8002d62 <LL_RCC_GetSysClkSource>
 8003176:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003178:	f7ff feef 	bl	8002f5a <LL_RCC_PLL_GetMainSource>
 800317c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d005      	beq.n	8003190 <HAL_RCC_OscConfig+0x164>
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d108      	bne.n	800319c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d105      	bne.n	800319c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d134      	bne.n	8003202 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e275      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a4:	d102      	bne.n	80031ac <HAL_RCC_OscConfig+0x180>
 80031a6:	f7ff fc11 	bl	80029cc <LL_RCC_HSE_Enable>
 80031aa:	e001      	b.n	80031b0 <HAL_RCC_OscConfig+0x184>
 80031ac:	f7ff fc1d 	bl	80029ea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe ffac 	bl	8002114 <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe ffa8 	bl	8002114 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e25a      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80031d2:	f7ff fc19 	bl	8002a08 <LL_RCC_HSE_IsReady>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f1      	beq.n	80031c0 <HAL_RCC_OscConfig+0x194>
 80031dc:	e011      	b.n	8003202 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe ff99 	bl	8002114 <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e6:	f7fe ff95 	bl	8002114 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b64      	cmp	r3, #100	@ 0x64
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e247      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80031f8:	f7ff fc06 	bl	8002a08 <LL_RCC_HSE_IsReady>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f1      	bne.n	80031e6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320e:	f7ff fda8 	bl	8002d62 <LL_RCC_GetSysClkSource>
 8003212:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003214:	f7ff fea1 	bl	8002f5a <LL_RCC_PLL_GetMainSource>
 8003218:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b04      	cmp	r3, #4
 800321e:	d005      	beq.n	800322c <HAL_RCC_OscConfig+0x200>
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b0c      	cmp	r3, #12
 8003224:	d10e      	bne.n	8003244 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d10b      	bne.n	8003244 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e227      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fc25 	bl	8002a8c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003242:	e031      	b.n	80032a8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d019      	beq.n	8003280 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	f7ff fbee 	bl	8002a2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe ff60 	bl	8002114 <HAL_GetTick>
 8003254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003258:	f7fe ff5c 	bl	8002114 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e20e      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800326a:	f7ff fbfd 	bl	8002a68 <LL_RCC_HSI_IsReady>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f1      	beq.n	8003258 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fc07 	bl	8002a8c <LL_RCC_HSI_SetCalibTrimming>
 800327e:	e013      	b.n	80032a8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003280:	f7ff fbe3 	bl	8002a4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe ff46 	bl	8002114 <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7fe ff42 	bl	8002114 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1f4      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800329e:	f7ff fbe3 	bl	8002a68 <LL_RCC_HSI_IsReady>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f1      	bne.n	800328c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a3 	beq.w	8003408 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d076      	beq.n	80033b8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d046      	beq.n	8003364 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80032d6:	f7ff fc66 	bl	8002ba6 <LL_RCC_LSI1_IsReady>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d113      	bne.n	8003308 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80032e0:	f7ff fc3f 	bl	8002b62 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032e4:	f7fe ff16 	bl	8002114 <HAL_GetTick>
 80032e8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032ec:	f7fe ff12 	bl	8002114 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1c4      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80032fe:	f7ff fc52 	bl	8002ba6 <LL_RCC_LSI1_IsReady>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f1      	beq.n	80032ec <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003308:	f7ff fc5f 	bl	8002bca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe ff02 	bl	8002114 <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003314:	f7fe fefe 	bl	8002114 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b03      	cmp	r3, #3
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1b0      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003326:	f7ff fc72 	bl	8002c0e <LL_RCC_LSI2_IsReady>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f1      	beq.n	8003314 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fc7c 	bl	8002c32 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800333a:	f7ff fc23 	bl	8002b84 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe fee9 	bl	8002114 <HAL_GetTick>
 8003342:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003346:	f7fe fee5 	bl	8002114 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e197      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003358:	f7ff fc25 	bl	8002ba6 <LL_RCC_LSI1_IsReady>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f1      	bne.n	8003346 <HAL_RCC_OscConfig+0x31a>
 8003362:	e051      	b.n	8003408 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003364:	f7ff fbfd 	bl	8002b62 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fed4 	bl	8002114 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800336e:	e00c      	b.n	800338a <HAL_RCC_OscConfig+0x35e>
 8003370:	20000014 	.word	0x20000014
 8003374:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003378:	f7fe fecc 	bl	8002114 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e17e      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800338a:	f7ff fc0c 	bl	8002ba6 <LL_RCC_LSI1_IsReady>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f1      	beq.n	8003378 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003394:	f7ff fc2a 	bl	8002bec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800339a:	f7fe febb 	bl	8002114 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e16d      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033ac:	f7ff fc2f 	bl	8002c0e <LL_RCC_LSI2_IsReady>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f1      	bne.n	800339a <HAL_RCC_OscConfig+0x36e>
 80033b6:	e027      	b.n	8003408 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80033b8:	f7ff fc18 	bl	8002bec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fe feaa 	bl	8002114 <HAL_GetTick>
 80033c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033c4:	f7fe fea6 	bl	8002114 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e158      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033d6:	f7ff fc1a 	bl	8002c0e <LL_RCC_LSI2_IsReady>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f1      	bne.n	80033c4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80033e0:	f7ff fbd0 	bl	8002b84 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fe fe96 	bl	8002114 <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033ec:	f7fe fe92 	bl	8002114 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e144      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80033fe:	f7ff fbd2 	bl	8002ba6 <LL_RCC_LSI1_IsReady>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f1      	bne.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05b      	beq.n	80034cc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003414:	4b9e      	ldr	r3, [pc, #632]	@ (8003690 <HAL_RCC_OscConfig+0x664>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d114      	bne.n	800344a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003420:	f7ff fa9c 	bl	800295c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003424:	f7fe fe76 	bl	8002114 <HAL_GetTick>
 8003428:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342c:	f7fe fe72 	bl	8002114 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e124      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343e:	4b94      	ldr	r3, [pc, #592]	@ (8003690 <HAL_RCC_OscConfig+0x664>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0x42c>
 8003452:	f7ff fb30 	bl	8002ab6 <LL_RCC_LSE_Enable>
 8003456:	e00c      	b.n	8003472 <HAL_RCC_OscConfig+0x446>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b05      	cmp	r3, #5
 800345e:	d104      	bne.n	800346a <HAL_RCC_OscConfig+0x43e>
 8003460:	f7ff fb4b 	bl	8002afa <LL_RCC_LSE_EnableBypass>
 8003464:	f7ff fb27 	bl	8002ab6 <LL_RCC_LSE_Enable>
 8003468:	e003      	b.n	8003472 <HAL_RCC_OscConfig+0x446>
 800346a:	f7ff fb35 	bl	8002ad8 <LL_RCC_LSE_Disable>
 800346e:	f7ff fb55 	bl	8002b1c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d014      	beq.n	80034a4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fe fe4b 	bl	8002114 <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fe47 	bl	8002114 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e0f7      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003498:	f7ff fb51 	bl	8002b3e <LL_RCC_LSE_IsReady>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0ef      	beq.n	8003482 <HAL_RCC_OscConfig+0x456>
 80034a2:	e013      	b.n	80034cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe fe36 	bl	8002114 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fe fe32 	bl	8002114 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0e2      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80034c2:	f7ff fb3c 	bl	8002b3e <LL_RCC_LSE_IsReady>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ef      	bne.n	80034ac <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80d8 	beq.w	8003686 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d6:	f7ff fc44 	bl	8002d62 <LL_RCC_GetSysClkSource>
 80034da:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	f040 80a6 	bne.w	800363a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d123      	bne.n	8003544 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d114      	bne.n	8003544 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d10d      	bne.n	8003544 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d106      	bne.n	8003544 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d054      	beq.n	80035ee <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d04f      	beq.n	80035ea <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800354a:	f7ff fcc0 	bl	8002ece <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800354e:	f7fe fde1 	bl	8002114 <HAL_GetTick>
 8003552:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003556:	f7fe fddd 	bl	8002114 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e08f      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ef      	bne.n	8003556 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	4b45      	ldr	r3, [pc, #276]	@ (8003694 <HAL_RCC_OscConfig+0x668>)
 800357e:	4013      	ands	r3, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800358e:	0212      	lsls	r2, r2, #8
 8003590:	4311      	orrs	r1, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003596:	4311      	orrs	r1, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035a2:	430a      	orrs	r2, r1
 80035a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035ac:	f7ff fc80 	bl	8002eb0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c0:	f7fe fda8 	bl	8002114 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe fda4 	bl	8002114 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e056      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ef      	beq.n	80035c8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e8:	e04d      	b.n	8003686 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e04c      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d144      	bne.n	8003686 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035fc:	f7ff fc58 	bl	8002eb0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003610:	f7fe fd80 	bl	8002114 <HAL_GetTick>
 8003614:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe fd7c 	bl	8002114 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e02e      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ef      	beq.n	8003618 <HAL_RCC_OscConfig+0x5ec>
 8003638:	e025      	b.n	8003686 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d020      	beq.n	8003682 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	f7ff fc45 	bl	8002ece <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe fd66 	bl	8002114 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fd62 	bl	8002114 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e014      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ef      	bne.n	800364c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	60d3      	str	r3, [r2, #12]
 8003680:	e001      	b.n	8003686 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3734      	adds	r7, #52	@ 0x34
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}
 8003690:	58000400 	.word	0x58000400
 8003694:	11c1808c 	.word	0x11c1808c

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e12d      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b98      	ldr	r3, [pc, #608]	@ (8003910 <HAL_RCC_ClockConfig+0x278>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d91b      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b95      	ldr	r3, [pc, #596]	@ (8003910 <HAL_RCC_ClockConfig+0x278>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 0207 	bic.w	r2, r3, #7
 80036c2:	4993      	ldr	r1, [pc, #588]	@ (8003910 <HAL_RCC_ClockConfig+0x278>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ca:	f7fe fd23 	bl	8002114 <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036d2:	f7fe fd1f 	bl	8002114 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e111      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003910 <HAL_RCC_ClockConfig+0x278>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d1ef      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fb39 	bl	8002d7a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003708:	f7fe fd04 	bl	8002114 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003710:	f7fe fd00 	bl	8002114 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0f2      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003722:	f7ff fc26 	bl	8002f72 <LL_RCC_IsActiveFlag_HPRE>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f1      	beq.n	8003710 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d016      	beq.n	8003766 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fb30 	bl	8002da2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003742:	f7fe fce7 	bl	8002114 <HAL_GetTick>
 8003746:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800374a:	f7fe fce3 	bl	8002114 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0d5      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800375c:	f7ff fc1b 	bl	8002f96 <LL_RCC_IsActiveFlag_C2HPRE>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f1      	beq.n	800374a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fb29 	bl	8002dce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800377c:	f7fe fcca 	bl	8002114 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003784:	f7fe fcc6 	bl	8002114 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0b8      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003796:	f7ff fc11 	bl	8002fbc <LL_RCC_IsActiveFlag_SHDHPRE>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f1      	beq.n	8003784 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fb23 	bl	8002dfc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037b6:	f7fe fcad 	bl	8002114 <HAL_GetTick>
 80037ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037be:	f7fe fca9 	bl	8002114 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e09b      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037d0:	f7ff fc07 	bl	8002fe2 <LL_RCC_IsActiveFlag_PPRE1>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f1      	beq.n	80037be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d017      	beq.n	8003816 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fb19 	bl	8002e24 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037f2:	f7fe fc8f 	bl	8002114 <HAL_GetTick>
 80037f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037fa:	f7fe fc8b 	bl	8002114 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e07d      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800380c:	f7ff fbfb 	bl	8003006 <LL_RCC_IsActiveFlag_PPRE2>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f1      	beq.n	80037fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d043      	beq.n	80038aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d106      	bne.n	8003838 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800382a:	f7ff f8ed 	bl	8002a08 <LL_RCC_HSE_IsReady>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d11e      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e067      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d106      	bne.n	800384e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003840:	f7ff fb54 	bl	8002eec <LL_RCC_PLL_IsReady>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d113      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e05c      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003856:	f7ff fa21 	bl	8002c9c <LL_RCC_MSI_IsReady>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d108      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e051      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003864:	f7ff f900 	bl	8002a68 <LL_RCC_HSI_IsReady>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e04a      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fa5f 	bl	8002d3a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7fe fc4a 	bl	8002114 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe fc46 	bl	8002114 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e036      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	f7ff fa62 	bl	8002d62 <LL_RCC_GetSysClkSource>
 800389e:	4602      	mov	r2, r0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d1ec      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038aa:	4b19      	ldr	r3, [pc, #100]	@ (8003910 <HAL_RCC_ClockConfig+0x278>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d21b      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b8:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <HAL_RCC_ClockConfig+0x278>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 0207 	bic.w	r2, r3, #7
 80038c0:	4913      	ldr	r1, [pc, #76]	@ (8003910 <HAL_RCC_ClockConfig+0x278>)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c8:	f7fe fc24 	bl	8002114 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038d0:	f7fe fc20 	bl	8002114 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e012      	b.n	8003908 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCC_ClockConfig+0x278>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1ef      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038f0:	f000 f87e 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4a07      	ldr	r2, [pc, #28]	@ (8003914 <HAL_RCC_ClockConfig+0x27c>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80038fa:	f7fe fc17 	bl	800212c <HAL_GetTickPrio>
 80038fe:	4603      	mov	r3, r0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fbb9 	bl	8002078 <HAL_InitTick>
 8003906:	4603      	mov	r3, r0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	58004000 	.word	0x58004000
 8003914:	20000014 	.word	0x20000014

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391e:	f7ff fa20 	bl	8002d62 <LL_RCC_GetSysClkSource>
 8003922:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800392a:	f7ff f9dc 	bl	8002ce6 <LL_RCC_MSI_GetRange>
 800392e:	4603      	mov	r3, r0
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	4a2b      	ldr	r2, [pc, #172]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	e04b      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d102      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003946:	4b28      	ldr	r3, [pc, #160]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e045      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b08      	cmp	r3, #8
 8003950:	d10a      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003952:	f7ff f829 	bl	80029a8 <LL_RCC_HSE_IsEnabledDiv2>
 8003956:	4603      	mov	r3, r0
 8003958:	2b01      	cmp	r3, #1
 800395a:	d102      	bne.n	8003962 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e03a      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003962:	4b22      	ldr	r3, [pc, #136]	@ (80039ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e037      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003968:	f7ff faf7 	bl	8002f5a <LL_RCC_PLL_GetMainSource>
 800396c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d003      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x64>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x6a>
 800397a:	e00d      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800397c:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800397e:	60bb      	str	r3, [r7, #8]
        break;
 8003980:	e015      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003982:	f7ff f811 	bl	80029a8 <LL_RCC_HSE_IsEnabledDiv2>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d102      	bne.n	8003992 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800398e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003990:	e00d      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003992:	4b16      	ldr	r3, [pc, #88]	@ (80039ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003994:	60bb      	str	r3, [r7, #8]
        break;
 8003996:	e00a      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003998:	f7ff f9a5 	bl	8002ce6 <LL_RCC_MSI_GetRange>
 800399c:	4603      	mov	r3, r0
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	4a0f      	ldr	r2, [pc, #60]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	60bb      	str	r3, [r7, #8]
        break;
 80039ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80039ae:	f7ff faaf 	bl	8002f10 <LL_RCC_PLL_GetN>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	fb03 f402 	mul.w	r4, r3, r2
 80039ba:	f7ff fac2 	bl	8002f42 <LL_RCC_PLL_GetDivider>
 80039be:	4603      	mov	r3, r0
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	3301      	adds	r3, #1
 80039c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80039c8:	f7ff faaf 	bl	8002f2a <LL_RCC_PLL_GetR>
 80039cc:	4603      	mov	r3, r0
 80039ce:	0f5b      	lsrs	r3, r3, #29
 80039d0:	3301      	adds	r3, #1
 80039d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80039d6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80039d8:	68fb      	ldr	r3, [r7, #12]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd90      	pop	{r4, r7, pc}
 80039e2:	bf00      	nop
 80039e4:	08009648 	.word	0x08009648
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	01e84800 	.word	0x01e84800

080039f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b598      	push	{r3, r4, r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80039f4:	f7ff ff90 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80039f8:	4604      	mov	r4, r0
 80039fa:	f7ff fa27 	bl	8002e4c <LL_RCC_GetAHBPrescaler>
 80039fe:	4603      	mov	r3, r0
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	4a03      	ldr	r2, [pc, #12]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd98      	pop	{r3, r4, r7, pc}
 8003a14:	080095e8 	.word	0x080095e8

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b598      	push	{r3, r4, r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a1c:	f7ff ffe8 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a20:	4604      	mov	r4, r0
 8003a22:	f7ff fa2d 	bl	8002e80 <LL_RCC_GetAPB1Prescaler>
 8003a26:	4603      	mov	r3, r0
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd98      	pop	{r3, r4, r7, pc}
 8003a40:	08009628 	.word	0x08009628

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b598      	push	{r3, r4, r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003a48:	f7ff ffd2 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	f7ff fa23 	bl	8002e98 <LL_RCC_GetAPB2Prescaler>
 8003a52:	4603      	mov	r3, r0
 8003a54:	0adb      	lsrs	r3, r3, #11
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	4a04      	ldr	r2, [pc, #16]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd98      	pop	{r3, r4, r7, pc}
 8003a6c:	08009628 	.word	0x08009628

08003a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2bb0      	cmp	r3, #176	@ 0xb0
 8003a7c:	d903      	bls.n	8003a86 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e007      	b.n	8003a96 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	4a10      	ldr	r2, [pc, #64]	@ (8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003a96:	f7ff f9e5 	bl	8002e64 <LL_RCC_GetAHB4Prescaler>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	0c9b      	lsrs	r3, r3, #18
 8003aba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f80c 	bl	8003adc <RCC_SetFlashLatency>
 8003ac4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08009648 	.word	0x08009648
 8003ad4:	080095e8 	.word	0x080095e8
 8003ad8:	431bde83 	.word	0x431bde83

08003adc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b08f      	sub	sp, #60	@ 0x3c
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <RCC_SetFlashLatency+0x9c>)
 8003ae8:	f107 041c 	add.w	r4, r7, #28
 8003aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003af2:	4b22      	ldr	r3, [pc, #136]	@ (8003b7c <RCC_SetFlashLatency+0xa0>)
 8003af4:	f107 040c 	add.w	r4, r7, #12
 8003af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003afa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003afe:	2300      	movs	r3, #0
 8003b00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b06:	e013      	b.n	8003b30 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	3338      	adds	r3, #56	@ 0x38
 8003b0e:	443b      	add	r3, r7
 8003b10:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d807      	bhi.n	8003b2a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	3338      	adds	r3, #56	@ 0x38
 8003b20:	443b      	add	r3, r7
 8003b22:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003b26:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8003b28:	e005      	b.n	8003b36 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d9e8      	bls.n	8003b08 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003b36:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <RCC_SetFlashLatency+0xa4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0207 	bic.w	r2, r3, #7
 8003b3e:	4910      	ldr	r1, [pc, #64]	@ (8003b80 <RCC_SetFlashLatency+0xa4>)
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b46:	f7fe fae5 	bl	8002114 <HAL_GetTick>
 8003b4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b4c:	e008      	b.n	8003b60 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b4e:	f7fe fae1 	bl	8002114 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e007      	b.n	8003b70 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <RCC_SetFlashLatency+0xa4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d1ef      	bne.n	8003b4e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	373c      	adds	r7, #60	@ 0x3c
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd90      	pop	{r4, r7, pc}
 8003b78:	08009424 	.word	0x08009424
 8003b7c:	08009434 	.word	0x08009434
 8003b80:	58004000 	.word	0x58004000

08003b84 <LL_RCC_LSE_IsEnabled>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <LL_RCC_LSE_IsEnabled+0x18>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <LL_RCC_LSE_IsEnabled+0x1a>
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_RCC_LSE_IsReady>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d101      	bne.n	8003bc0 <LL_RCC_LSE_IsReady+0x18>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <LL_RCC_LSE_IsReady+0x1a>
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_RCC_MSI_EnablePLLMode>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bda:	f043 0304 	orr.w	r3, r3, #4
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_RCC_SetRFWKPClockSource>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bfa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_RCC_SetSMPSClockSource>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	f023 0203 	bic.w	r2, r3, #3
 8003c28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <LL_RCC_SetSMPSPrescaler>:
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_RCC_SetUSARTClockSource>:
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_SetLPUARTClockSource>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ca6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_SetI2CClockSource>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	401a      	ands	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003ce2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_RCC_SetLPTIMClockSource>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_RCC_SetRNGClockSource>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_SetCLK48ClockSource>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_RCC_SetADCClockSource>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_SetRTCClockSource>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_GetRTCClockSource>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_ForceBackupDomainReset>:
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b088      	sub	sp, #32
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003e42:	2300      	movs	r3, #0
 8003e44:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e46:	2300      	movs	r3, #0
 8003e48:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d046      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003e56:	f7ff ffc1 	bl	8003ddc <LL_RCC_GetRTCClockSource>
 8003e5a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d03c      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e66:	f7fe fd79 	bl	800295c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff9b 	bl	8003db0 <LL_RCC_SetRTCClockSource>
 8003e7a:	e02e      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e84:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003e86:	f7ff ffb6 	bl	8003df6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003e8a:	f7ff ffc5 	bl	8003e18 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003ea6:	f7ff fe6d 	bl	8003b84 <LL_RCC_LSE_IsEnabled>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d114      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb0:	f7fe f930 	bl	8002114 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fe f92c 	bl	8002114 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d902      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	77fb      	strb	r3, [r7, #31]
              break;
 8003ece:	e004      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003ed0:	f7ff fe6a 	bl	8003ba8 <LL_RCC_LSE_IsReady>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d1ee      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003eda:	7ffb      	ldrb	r3, [r7, #31]
 8003edc:	77bb      	strb	r3, [r7, #30]
 8003ede:	e001      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	7ffb      	ldrb	r3, [r7, #31]
 8003ee2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff feb6 	bl	8003c66 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fec1 	bl	8003c92 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fee9 	bl	8003cf8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fede 	bl	8003cf8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d004      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff feb6 	bl	8003cbe <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02b      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f66:	d008      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f70:	d003      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fed4 	bl	8003d2c <LL_RCC_SetRNGClockSource>
 8003f84:	e00a      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7ff fecb 	bl	8003d2c <LL_RCC_SetRNGClockSource>
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff fede 	bl	8003d58 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fb4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d011      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fedc 	bl	8003d84 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe4:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fdf7 	bl	8003bea <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fe16 	bl	8003c3e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fdfd 	bl	8003c16 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800401c:	7fbb      	ldrb	r3, [r7, #30]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800402a:	f7ff fdcf 	bl	8003bcc <LL_RCC_MSI_EnablePLLMode>
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e09f      	b.n	8004186 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd fd08 	bl	8001a70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004068:	4b49      	ldr	r3, [pc, #292]	@ (8004190 <HAL_RTC_Init+0x15c>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b10      	cmp	r3, #16
 8004072:	d07e      	beq.n	8004172 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	22ca      	movs	r2, #202	@ 0xca
 800407a:	625a      	str	r2, [r3, #36]	@ 0x24
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2253      	movs	r2, #83	@ 0x53
 8004082:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8ab 	bl	80041e0 <RTC_EnterInitMode>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	22ff      	movs	r2, #255	@ 0xff
 8004096:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2204      	movs	r2, #4
 800409c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	e067      	b.n	8004176 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80040b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040b8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6899      	ldr	r1, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68d2      	ldr	r2, [r2, #12]
 80040e0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6919      	ldr	r1, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	041a      	lsls	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004104:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0202 	bic.w	r2, r2, #2
 8004114:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d113      	bne.n	8004164 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f829 	bl	8004194 <HAL_RTC_WaitForSynchro>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	22ff      	movs	r2, #255	@ 0xff
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2204      	movs	r2, #4
 8004154:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e010      	b.n	8004186 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	22ff      	movs	r2, #255	@ 0xff
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e001      	b.n	8004176 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40002800 	.word	0x40002800

08004194 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041aa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80041ac:	f7fd ffb2 	bl	8002114 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041b2:	e009      	b.n	80041c8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041b4:	f7fd ffae 	bl	8002114 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041c2:	d901      	bls.n	80041c8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e007      	b.n	80041d8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ee      	beq.n	80041b4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d119      	bne.n	800422a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f04f 32ff 	mov.w	r2, #4294967295
 80041fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004200:	f7fd ff88 	bl	8002114 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004206:	e009      	b.n	800421c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004208:	f7fd ff84 	bl	8002114 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004216:	d901      	bls.n	800421c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e007      	b.n	800422c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ee      	beq.n	8004208 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800424a:	2302      	movs	r3, #2
 800424c:	e0a8      	b.n	80043a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	22ca      	movs	r2, #202	@ 0xca
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2253      	movs	r2, #83	@ 0x53
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800427c:	f7fd ff4a 	bl	8002114 <HAL_GetTick>
 8004280:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004282:	e015      	b.n	80042b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004284:	f7fd ff46 	bl	8002114 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004292:	d90d      	bls.n	80042b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	22ff      	movs	r2, #255	@ 0xff
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2203      	movs	r2, #3
 80042a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e077      	b.n	80043a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e2      	bne.n	8004284 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042cc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80042de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80042e0:	f7fd ff18 	bl	8002114 <HAL_GetTick>
 80042e4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80042e6:	e015      	b.n	8004314 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042e8:	f7fd ff14 	bl	8002114 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042f6:	d90d      	bls.n	8004314 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	22ff      	movs	r2, #255	@ 0xff
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2203      	movs	r2, #3
 8004304:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e045      	b.n	80043a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0e2      	beq.n	80042e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0207 	bic.w	r2, r2, #7
 8004338:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6899      	ldr	r1, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800434a:	4b17      	ldr	r3, [pc, #92]	@ (80043a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800434c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004350:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004352:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004356:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800435a:	4b13      	ldr	r3, [pc, #76]	@ (80043a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a12      	ldr	r2, [pc, #72]	@ (80043a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004374:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004384:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	22ff      	movs	r2, #255	@ 0xff
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	58000800 	.word	0x58000800

080043ac <LL_RCC_GetUSARTClockSource>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4013      	ands	r3, r2
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_RCC_GetLPUARTClockSource>:
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4013      	ands	r3, r2
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e042      	b.n	8004484 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fd fb61 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2224      	movs	r2, #36	@ 0x24
 800441a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fade 	bl	80049f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8b3 	bl	80045a8 <UART_SetConfig>
 8004442:	4603      	mov	r3, r0
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e01b      	b.n	8004484 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800445a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800446a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fb5d 	bl	8004b3c <UART_CheckIdleState>
 8004482:	4603      	mov	r3, r0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	@ 0x28
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d17b      	bne.n	800459e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_UART_Transmit+0x26>
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e074      	b.n	80045a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2221      	movs	r2, #33	@ 0x21
 80044c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c6:	f7fd fe25 	bl	8002114 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e4:	d108      	bne.n	80044f8 <HAL_UART_Transmit+0x6c>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e003      	b.n	8004500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004500:	e030      	b.n	8004564 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	2180      	movs	r1, #128	@ 0x80
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fbbf 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e03d      	b.n	80045a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004538:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	3302      	adds	r3, #2
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	e007      	b.n	8004552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	3301      	adds	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1c8      	bne.n	8004502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2200      	movs	r2, #0
 8004578:	2140      	movs	r1, #64	@ 0x40
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fb88 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e006      	b.n	80045a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045ac:	b08c      	sub	sp, #48	@ 0x30
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4baf      	ldr	r3, [pc, #700]	@ (8004894 <UART_SetConfig+0x2ec>)
 80045d8:	4013      	ands	r3, r2
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4aa4      	ldr	r2, [pc, #656]	@ (8004898 <UART_SetConfig+0x2f0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d004      	beq.n	8004614 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004610:	4313      	orrs	r3, r2
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800461e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004628:	430b      	orrs	r3, r1
 800462a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	f023 010f 	bic.w	r1, r3, #15
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a95      	ldr	r2, [pc, #596]	@ (800489c <UART_SetConfig+0x2f4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d125      	bne.n	8004698 <UART_SetConfig+0xf0>
 800464c:	2003      	movs	r0, #3
 800464e:	f7ff fead 	bl	80043ac <LL_RCC_GetUSARTClockSource>
 8004652:	4603      	mov	r3, r0
 8004654:	2b03      	cmp	r3, #3
 8004656:	d81b      	bhi.n	8004690 <UART_SetConfig+0xe8>
 8004658:	a201      	add	r2, pc, #4	@ (adr r2, 8004660 <UART_SetConfig+0xb8>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	08004679 	.word	0x08004679
 800466c:	08004689 	.word	0x08004689
 8004670:	2301      	movs	r3, #1
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004676:	e042      	b.n	80046fe <UART_SetConfig+0x156>
 8004678:	2302      	movs	r3, #2
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800467e:	e03e      	b.n	80046fe <UART_SetConfig+0x156>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004686:	e03a      	b.n	80046fe <UART_SetConfig+0x156>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800468e:	e036      	b.n	80046fe <UART_SetConfig+0x156>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004696:	e032      	b.n	80046fe <UART_SetConfig+0x156>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a7e      	ldr	r2, [pc, #504]	@ (8004898 <UART_SetConfig+0x2f0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d12a      	bne.n	80046f8 <UART_SetConfig+0x150>
 80046a2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80046a6:	f7ff fe91 	bl	80043cc <LL_RCC_GetLPUARTClockSource>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046b0:	d01a      	beq.n	80046e8 <UART_SetConfig+0x140>
 80046b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046b6:	d81b      	bhi.n	80046f0 <UART_SetConfig+0x148>
 80046b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046bc:	d00c      	beq.n	80046d8 <UART_SetConfig+0x130>
 80046be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046c2:	d815      	bhi.n	80046f0 <UART_SetConfig+0x148>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <UART_SetConfig+0x128>
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046cc:	d008      	beq.n	80046e0 <UART_SetConfig+0x138>
 80046ce:	e00f      	b.n	80046f0 <UART_SetConfig+0x148>
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046d6:	e012      	b.n	80046fe <UART_SetConfig+0x156>
 80046d8:	2302      	movs	r3, #2
 80046da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046de:	e00e      	b.n	80046fe <UART_SetConfig+0x156>
 80046e0:	2304      	movs	r3, #4
 80046e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046e6:	e00a      	b.n	80046fe <UART_SetConfig+0x156>
 80046e8:	2308      	movs	r3, #8
 80046ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ee:	e006      	b.n	80046fe <UART_SetConfig+0x156>
 80046f0:	2310      	movs	r3, #16
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046f6:	e002      	b.n	80046fe <UART_SetConfig+0x156>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a65      	ldr	r2, [pc, #404]	@ (8004898 <UART_SetConfig+0x2f0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	f040 8097 	bne.w	8004838 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800470a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800470e:	2b08      	cmp	r3, #8
 8004710:	d823      	bhi.n	800475a <UART_SetConfig+0x1b2>
 8004712:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <UART_SetConfig+0x170>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	0800473d 	.word	0x0800473d
 800471c:	0800475b 	.word	0x0800475b
 8004720:	08004745 	.word	0x08004745
 8004724:	0800475b 	.word	0x0800475b
 8004728:	0800474b 	.word	0x0800474b
 800472c:	0800475b 	.word	0x0800475b
 8004730:	0800475b 	.word	0x0800475b
 8004734:	0800475b 	.word	0x0800475b
 8004738:	08004753 	.word	0x08004753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473c:	f7ff f96c 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8004740:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004742:	e010      	b.n	8004766 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004744:	4b56      	ldr	r3, [pc, #344]	@ (80048a0 <UART_SetConfig+0x2f8>)
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004748:	e00d      	b.n	8004766 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474a:	f7ff f8e5 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 800474e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004750:	e009      	b.n	8004766 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004758:	e005      	b.n	8004766 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004764:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 812b 	beq.w	80049c4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	4a4c      	ldr	r2, [pc, #304]	@ (80048a4 <UART_SetConfig+0x2fc>)
 8004774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004778:	461a      	mov	r2, r3
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004780:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4413      	add	r3, r2
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	429a      	cmp	r2, r3
 8004790:	d305      	bcc.n	800479e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	429a      	cmp	r2, r3
 800479c:	d903      	bls.n	80047a6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047a4:	e10e      	b.n	80049c4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	2200      	movs	r2, #0
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	60fa      	str	r2, [r7, #12]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	4a3c      	ldr	r2, [pc, #240]	@ (80048a4 <UART_SetConfig+0x2fc>)
 80047b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2200      	movs	r2, #0
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047c8:	f7fb fd32 	bl	8000230 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	020b      	lsls	r3, r1, #8
 80047de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047e2:	0202      	lsls	r2, r0, #8
 80047e4:	6979      	ldr	r1, [r7, #20]
 80047e6:	6849      	ldr	r1, [r1, #4]
 80047e8:	0849      	lsrs	r1, r1, #1
 80047ea:	2000      	movs	r0, #0
 80047ec:	460c      	mov	r4, r1
 80047ee:	4605      	mov	r5, r0
 80047f0:	eb12 0804 	adds.w	r8, r2, r4
 80047f4:	eb43 0905 	adc.w	r9, r3, r5
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	469a      	mov	sl, r3
 8004800:	4693      	mov	fp, r2
 8004802:	4652      	mov	r2, sl
 8004804:	465b      	mov	r3, fp
 8004806:	4640      	mov	r0, r8
 8004808:	4649      	mov	r1, r9
 800480a:	f7fb fd11 	bl	8000230 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4613      	mov	r3, r2
 8004814:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800481c:	d308      	bcc.n	8004830 <UART_SetConfig+0x288>
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004824:	d204      	bcs.n	8004830 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a3a      	ldr	r2, [r7, #32]
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	e0c9      	b.n	80049c4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004836:	e0c5      	b.n	80049c4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004840:	d16d      	bne.n	800491e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004842:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004846:	3b01      	subs	r3, #1
 8004848:	2b07      	cmp	r3, #7
 800484a:	d82d      	bhi.n	80048a8 <UART_SetConfig+0x300>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <UART_SetConfig+0x2ac>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004875 	.word	0x08004875
 8004858:	0800487d 	.word	0x0800487d
 800485c:	080048a9 	.word	0x080048a9
 8004860:	08004883 	.word	0x08004883
 8004864:	080048a9 	.word	0x080048a9
 8004868:	080048a9 	.word	0x080048a9
 800486c:	080048a9 	.word	0x080048a9
 8004870:	0800488b 	.word	0x0800488b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7ff f8e6 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8004878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487a:	e01b      	b.n	80048b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800487c:	4b08      	ldr	r3, [pc, #32]	@ (80048a0 <UART_SetConfig+0x2f8>)
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004880:	e018      	b.n	80048b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004882:	f7ff f849 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8004886:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004888:	e014      	b.n	80048b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800488e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004890:	e010      	b.n	80048b4 <UART_SetConfig+0x30c>
 8004892:	bf00      	nop
 8004894:	cfff69f3 	.word	0xcfff69f3
 8004898:	40008000 	.word	0x40008000
 800489c:	40013800 	.word	0x40013800
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	080096a8 	.word	0x080096a8
      default:
        pclk = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8084 	beq.w	80049c4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	4a4b      	ldr	r2, [pc, #300]	@ (80049f0 <UART_SetConfig+0x448>)
 80048c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ce:	005a      	lsls	r2, r3, #1
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	441a      	add	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d916      	bls.n	8004916 <UART_SetConfig+0x36e>
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ee:	d212      	bcs.n	8004916 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f023 030f 	bic.w	r3, r3, #15
 80048f8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	b29a      	uxth	r2, r3
 8004906:	8bfb      	ldrh	r3, [r7, #30]
 8004908:	4313      	orrs	r3, r2
 800490a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	8bfa      	ldrh	r2, [r7, #30]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	e056      	b.n	80049c4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800491c:	e052      	b.n	80049c4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800491e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004922:	3b01      	subs	r3, #1
 8004924:	2b07      	cmp	r3, #7
 8004926:	d822      	bhi.n	800496e <UART_SetConfig+0x3c6>
 8004928:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0x388>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004951 	.word	0x08004951
 8004934:	08004959 	.word	0x08004959
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800495f 	.word	0x0800495f
 8004940:	0800496f 	.word	0x0800496f
 8004944:	0800496f 	.word	0x0800496f
 8004948:	0800496f 	.word	0x0800496f
 800494c:	08004967 	.word	0x08004967
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7ff f878 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8004954:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004956:	e010      	b.n	800497a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004958:	4b26      	ldr	r3, [pc, #152]	@ (80049f4 <UART_SetConfig+0x44c>)
 800495a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800495c:	e00d      	b.n	800497a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495e:	f7fe ffdb 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8004962:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004964:	e009      	b.n	800497a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800496c:	e005      	b.n	800497a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004978:	bf00      	nop
    }

    if (pclk != 0U)
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d021      	beq.n	80049c4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <UART_SetConfig+0x448>)
 8004986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800498a:	461a      	mov	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	441a      	add	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2b0f      	cmp	r3, #15
 80049a8:	d909      	bls.n	80049be <UART_SetConfig+0x416>
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b0:	d205      	bcs.n	80049be <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60da      	str	r2, [r3, #12]
 80049bc:	e002      	b.n	80049c4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2200      	movs	r2, #0
 80049d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80049e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3730      	adds	r7, #48	@ 0x30
 80049e8:	46bd      	mov	sp, r7
 80049ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ee:	bf00      	nop
 80049f0:	080096a8 	.word	0x080096a8
 80049f4:	00f42400 	.word	0x00f42400

080049f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01a      	beq.n	8004b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004af6:	d10a      	bne.n	8004b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b098      	sub	sp, #96	@ 0x60
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b4c:	f7fd fae2 	bl	8002114 <HAL_GetTick>
 8004b50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d12f      	bne.n	8004bc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f88e 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d022      	beq.n	8004bc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e6      	bne.n	8004b7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e063      	b.n	8004c88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d149      	bne.n	8004c62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f857 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d03c      	beq.n	8004c62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c06:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e6      	bne.n	8004be8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c3a:	61fa      	str	r2, [r7, #28]
 8004c3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	69b9      	ldr	r1, [r7, #24]
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	617b      	str	r3, [r7, #20]
   return(result);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e012      	b.n	8004c88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3758      	adds	r7, #88	@ 0x58
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca0:	e04f      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d04b      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fd fa33 	bl	8002114 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e04e      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d037      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b80      	cmp	r3, #128	@ 0x80
 8004cd6:	d034      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b40      	cmp	r3, #64	@ 0x40
 8004cdc:	d031      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d110      	bne.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f838 	bl	8004d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e029      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1c:	d111      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f81e 	bl	8004d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d0a0      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b095      	sub	sp, #84	@ 0x54
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	f023 0301 	bic.w	r3, r3, #1
 8004dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e3      	bne.n	8004da4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d118      	bne.n	8004e16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f023 0310 	bic.w	r3, r3, #16
 8004df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6979      	ldr	r1, [r7, #20]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e6      	bne.n	8004de4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004e2a:	bf00      	nop
 8004e2c:	3754      	adds	r7, #84	@ 0x54
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_UARTEx_DisableFifoMode+0x16>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e027      	b.n	8004e9c <HAL_UARTEx_DisableFifoMode+0x66>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	@ 0x24
 8004e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e02d      	b.n	8004f1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2224      	movs	r2, #36	@ 0x24
 8004ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f84f 	bl	8004fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e02d      	b.n	8004f98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2224      	movs	r2, #36	@ 0x24
 8004f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f811 	bl	8004fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d108      	bne.n	8004fc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fc0:	e031      	b.n	8005026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	0e5b      	lsrs	r3, r3, #25
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	0f5b      	lsrs	r3, r3, #29
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fea:	7bbb      	ldrb	r3, [r7, #14]
 8004fec:	7b3a      	ldrb	r2, [r7, #12]
 8004fee:	4911      	ldr	r1, [pc, #68]	@ (8005034 <UARTEx_SetNbDataToProcess+0x94>)
 8004ff0:	5c8a      	ldrb	r2, [r1, r2]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ff6:	7b3a      	ldrb	r2, [r7, #12]
 8004ff8:	490f      	ldr	r1, [pc, #60]	@ (8005038 <UARTEx_SetNbDataToProcess+0x98>)
 8004ffa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	7b7a      	ldrb	r2, [r7, #13]
 800500c:	4909      	ldr	r1, [pc, #36]	@ (8005034 <UARTEx_SetNbDataToProcess+0x94>)
 800500e:	5c8a      	ldrb	r2, [r1, r2]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005014:	7b7a      	ldrb	r2, [r7, #13]
 8005016:	4908      	ldr	r1, [pc, #32]	@ (8005038 <UARTEx_SetNbDataToProcess+0x98>)
 8005018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800501a:	fb93 f3f2 	sdiv	r3, r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	080096c0 	.word	0x080096c0
 8005038:	080096c8 	.word	0x080096c8

0800503c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	2218      	movs	r2, #24
 800504c:	2100      	movs	r1, #0
 800504e:	4618      	mov	r0, r3
 8005050:	f001 f92d 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005054:	233f      	movs	r3, #63	@ 0x3f
 8005056:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005058:	2381      	movs	r3, #129	@ 0x81
 800505a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800505c:	1dfb      	adds	r3, r7, #7
 800505e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005060:	2301      	movs	r3, #1
 8005062:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005064:	f107 0308 	add.w	r3, r7, #8
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f001 fba8 	bl	80067c0 <hci_send_req>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	da01      	bge.n	800507a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005076:	23ff      	movs	r3, #255	@ 0xff
 8005078:	e000      	b.n	800507c <aci_gap_set_non_discoverable+0x40>
  return status;
 800507a:	79fb      	ldrb	r3, [r7, #7]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005084:	b5b0      	push	{r4, r5, r7, lr}
 8005086:	b0ce      	sub	sp, #312	@ 0x138
 8005088:	af00      	add	r7, sp, #0
 800508a:	4605      	mov	r5, r0
 800508c:	460c      	mov	r4, r1
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005096:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800509a:	462a      	mov	r2, r5
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80050a6:	4622      	mov	r2, r4
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050ae:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80050b2:	4602      	mov	r2, r0
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050ba:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80050be:	460a      	mov	r2, r1
 80050c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80050c2:	f107 0310 	add.w	r3, r7, #16
 80050c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80050ca:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80050ce:	3308      	adds	r3, #8
 80050d0:	f107 0210 	add.w	r2, r7, #16
 80050d4:	4413      	add	r3, r2
 80050d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80050da:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80050de:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80050e2:	4413      	add	r3, r2
 80050e4:	3309      	adds	r3, #9
 80050e6:	f107 0210 	add.w	r2, r7, #16
 80050ea:	4413      	add	r3, r2
 80050ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80050f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050f4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005102:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005106:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800510a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800510e:	7812      	ldrb	r2, [r2, #0]
 8005110:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005112:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005116:	3301      	adds	r3, #1
 8005118:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800511c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005120:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005124:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005128:	8812      	ldrh	r2, [r2, #0]
 800512a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800512e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005132:	3302      	adds	r3, #2
 8005134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005138:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800513c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005140:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005144:	8812      	ldrh	r2, [r2, #0]
 8005146:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800514a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800514e:	3302      	adds	r3, #2
 8005150:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005154:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005158:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800515c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005164:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005168:	3301      	adds	r3, #1
 800516a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800516e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005172:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005176:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005178:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800517c:	3301      	adds	r3, #1
 800517e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005182:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005186:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800518a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800518c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005190:	3301      	adds	r3, #1
 8005192:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005196:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800519a:	3308      	adds	r3, #8
 800519c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80051a0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 f872 	bl	800628e <Osal_MemCpy>
    index_input += Local_Name_Length;
 80051aa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80051ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80051b2:	4413      	add	r3, r2
 80051b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80051b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80051bc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80051c0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80051c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051c6:	3301      	adds	r3, #1
 80051c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80051cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80051d0:	3301      	adds	r3, #1
 80051d2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80051d6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 f857 	bl	800628e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80051e0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80051e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80051e8:	4413      	add	r3, r2
 80051ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80051ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051f2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80051f6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80051f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051fc:	3302      	adds	r3, #2
 80051fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005202:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005206:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800520a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800520c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005210:	3302      	adds	r3, #2
 8005212:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005216:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800521a:	2218      	movs	r2, #24
 800521c:	2100      	movs	r1, #0
 800521e:	4618      	mov	r0, r3
 8005220:	f001 f845 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005224:	233f      	movs	r3, #63	@ 0x3f
 8005226:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800522a:	2383      	movs	r3, #131	@ 0x83
 800522c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005230:	f107 0310 	add.w	r3, r7, #16
 8005234:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005238:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800523c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005240:	f107 030f 	add.w	r3, r7, #15
 8005244:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005248:	2301      	movs	r3, #1
 800524a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800524e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f001 fab3 	bl	80067c0 <hci_send_req>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	da01      	bge.n	8005264 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005260:	23ff      	movs	r3, #255	@ 0xff
 8005262:	e004      	b.n	800526e <aci_gap_set_discoverable+0x1ea>
  return status;
 8005264:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005268:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800526c:	781b      	ldrb	r3, [r3, #0]
}
 800526e:	4618      	mov	r0, r3
 8005270:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005274:	46bd      	mov	sp, r7
 8005276:	bdb0      	pop	{r4, r5, r7, pc}

08005278 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b0cc      	sub	sp, #304	@ 0x130
 800527c:	af00      	add	r7, sp, #0
 800527e:	4602      	mov	r2, r0
 8005280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005284:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005288:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005292:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005296:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80052a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80052a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80052ac:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80052b0:	7812      	ldrb	r2, [r2, #0]
 80052b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80052b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052b8:	3301      	adds	r3, #1
 80052ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80052be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052c2:	2218      	movs	r2, #24
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fff1 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 80052cc:	233f      	movs	r3, #63	@ 0x3f
 80052ce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80052d2:	2385      	movs	r3, #133	@ 0x85
 80052d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80052d8:	f107 0310 	add.w	r3, r7, #16
 80052dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80052e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80052e8:	f107 030f 	add.w	r3, r7, #15
 80052ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80052f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 fa5f 	bl	80067c0 <hci_send_req>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	da01      	bge.n	800530c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005308:	23ff      	movs	r3, #255	@ 0xff
 800530a:	e004      	b.n	8005316 <aci_gap_set_io_capability+0x9e>
  return status;
 800530c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005310:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005314:	781b      	ldrb	r3, [r3, #0]
}
 8005316:	4618      	mov	r0, r3
 8005318:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b0cc      	sub	sp, #304	@ 0x130
 8005324:	af00      	add	r7, sp, #0
 8005326:	4605      	mov	r5, r0
 8005328:	460c      	mov	r4, r1
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005332:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005336:	462a      	mov	r2, r5
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800533e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005342:	4622      	mov	r2, r4
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800534a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800534e:	4602      	mov	r2, r0
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005356:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800535a:	460a      	mov	r2, r1
 800535c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800535e:	f107 0310 	add.w	r3, r7, #16
 8005362:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005366:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800536a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005378:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800537c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005380:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005384:	7812      	ldrb	r2, [r2, #0]
 8005386:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005388:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800538c:	3301      	adds	r3, #1
 800538e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005392:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005396:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800539a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80053a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053a6:	3301      	adds	r3, #1
 80053a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80053ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80053b4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80053bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053c0:	3301      	adds	r3, #1
 80053c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80053c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80053ce:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80053d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053da:	3301      	adds	r3, #1
 80053dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80053e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053e4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80053e8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80053ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053ee:	3301      	adds	r3, #1
 80053f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80053f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053f8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80053fc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80053fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005402:	3301      	adds	r3, #1
 8005404:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005408:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800540c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005410:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005412:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005416:	3301      	adds	r3, #1
 8005418:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800541c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005420:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005424:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005428:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800542c:	3304      	adds	r3, #4
 800542e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005432:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005436:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800543a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800543c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005440:	3301      	adds	r3, #1
 8005442:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005446:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800544a:	2218      	movs	r2, #24
 800544c:	2100      	movs	r1, #0
 800544e:	4618      	mov	r0, r3
 8005450:	f000 ff2d 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005454:	233f      	movs	r3, #63	@ 0x3f
 8005456:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800545a:	2386      	movs	r3, #134	@ 0x86
 800545c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005460:	f107 0310 	add.w	r3, r7, #16
 8005464:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005468:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800546c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005470:	f107 030f 	add.w	r3, r7, #15
 8005474:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005478:	2301      	movs	r3, #1
 800547a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800547e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f001 f99b 	bl	80067c0 <hci_send_req>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	da01      	bge.n	8005494 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005490:	23ff      	movs	r3, #255	@ 0xff
 8005492:	e004      	b.n	800549e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005494:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005498:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800549c:	781b      	ldrb	r3, [r3, #0]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bdb0      	pop	{r4, r5, r7, pc}

080054a8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0cc      	sub	sp, #304	@ 0x130
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4602      	mov	r2, r0
 80054b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80054b8:	6019      	str	r1, [r3, #0]
 80054ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80054c2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80054c4:	f107 0310 	add.w	r3, r7, #16
 80054c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80054cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80054de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80054e6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80054ea:	8812      	ldrh	r2, [r2, #0]
 80054ec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80054ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054f2:	3302      	adds	r3, #2
 80054f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80054f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005500:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800550a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800550e:	3304      	adds	r3, #4
 8005510:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005518:	2218      	movs	r2, #24
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fec6 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005522:	233f      	movs	r3, #63	@ 0x3f
 8005524:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005528:	2388      	movs	r3, #136	@ 0x88
 800552a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005536:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800553a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800553e:	f107 030f 	add.w	r3, r7, #15
 8005542:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005546:	2301      	movs	r3, #1
 8005548:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800554c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f001 f934 	bl	80067c0 <hci_send_req>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	da01      	bge.n	8005562 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800555e:	23ff      	movs	r3, #255	@ 0xff
 8005560:	e004      	b.n	800556c <aci_gap_pass_key_resp+0xc4>
  return status;
 8005562:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005566:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800556a:	781b      	ldrb	r3, [r3, #0]
}
 800556c:	4618      	mov	r0, r3
 800556e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005576:	b590      	push	{r4, r7, lr}
 8005578:	b0cd      	sub	sp, #308	@ 0x134
 800557a:	af00      	add	r7, sp, #0
 800557c:	4604      	mov	r4, r0
 800557e:	4608      	mov	r0, r1
 8005580:	4611      	mov	r1, r2
 8005582:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005586:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005590:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005594:	4622      	mov	r2, r4
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800559c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80055a0:	4602      	mov	r2, r0
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055a8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80055ac:	460a      	mov	r2, r1
 80055ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80055b0:	f107 0310 	add.w	r3, r7, #16
 80055b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80055b8:	f107 0308 	add.w	r3, r7, #8
 80055bc:	2207      	movs	r2, #7
 80055be:	2100      	movs	r1, #0
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fe74 	bl	80062ae <Osal_MemSet>
  int index_input = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80055cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80055d4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80055d8:	7812      	ldrb	r2, [r2, #0]
 80055da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80055dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055e0:	3301      	adds	r3, #1
 80055e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80055e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80055ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80055ee:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80055f2:	7812      	ldrb	r2, [r2, #0]
 80055f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80055f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055fa:	3301      	adds	r3, #1
 80055fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005600:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005604:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005608:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800560c:	7812      	ldrb	r2, [r2, #0]
 800560e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005610:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005614:	3301      	adds	r3, #1
 8005616:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800561a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800561e:	2218      	movs	r2, #24
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fe43 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005628:	233f      	movs	r3, #63	@ 0x3f
 800562a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800562e:	238a      	movs	r3, #138	@ 0x8a
 8005630:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005634:	f107 0310 	add.w	r3, r7, #16
 8005638:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800563c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005640:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005644:	f107 0308 	add.w	r3, r7, #8
 8005648:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800564c:	2307      	movs	r3, #7
 800564e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f001 f8b1 	bl	80067c0 <hci_send_req>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	da01      	bge.n	8005668 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005664:	23ff      	movs	r3, #255	@ 0xff
 8005666:	e02e      	b.n	80056c6 <aci_gap_init+0x150>
  if ( resp.Status )
 8005668:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800566c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <aci_gap_init+0x10c>
    return resp.Status;
 8005676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800567a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	e021      	b.n	80056c6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005682:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005686:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800568a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800568e:	b29a      	uxth	r2, r3
 8005690:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005694:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800569c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80056a4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80056ae:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80056b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80056b8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80056c2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd90      	pop	{r4, r7, pc}

080056d0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b0cc      	sub	sp, #304	@ 0x130
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4602      	mov	r2, r0
 80056d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056dc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80056e0:	6019      	str	r1, [r3, #0]
 80056e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056e6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80056ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80056f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005706:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800570a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800570e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005712:	7812      	ldrb	r2, [r2, #0]
 8005714:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005716:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800571a:	3301      	adds	r3, #1
 800571c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005720:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005724:	1c58      	adds	r0, r3, #1
 8005726:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800572a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005734:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	f000 fda8 	bl	800628e <Osal_MemCpy>
  index_input += AdvDataLen;
 800573e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005742:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800574c:	4413      	add	r3, r2
 800574e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005752:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005756:	2218      	movs	r2, #24
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fda7 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005760:	233f      	movs	r3, #63	@ 0x3f
 8005762:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8005766:	238e      	movs	r3, #142	@ 0x8e
 8005768:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800576c:	f107 0310 	add.w	r3, r7, #16
 8005770:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005774:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005778:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800577c:	f107 030f 	add.w	r3, r7, #15
 8005780:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005784:	2301      	movs	r3, #1
 8005786:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800578a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f001 f815 	bl	80067c0 <hci_send_req>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	da01      	bge.n	80057a0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800579c:	23ff      	movs	r3, #255	@ 0xff
 800579e:	e004      	b.n	80057aa <aci_gap_update_adv_data+0xda>
  return status;
 80057a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80057a8:	781b      	ldrb	r3, [r3, #0]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	2218      	movs	r2, #24
 80057c4:	2100      	movs	r1, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fd71 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 80057cc:	233f      	movs	r3, #63	@ 0x3f
 80057ce:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80057d0:	2392      	movs	r3, #146	@ 0x92
 80057d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80057d8:	2301      	movs	r3, #1
 80057da:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80057dc:	f107 0308 	add.w	r3, r7, #8
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 ffec 	bl	80067c0 <hci_send_req>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	da01      	bge.n	80057f2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80057ee:	23ff      	movs	r3, #255	@ 0xff
 80057f0:	e000      	b.n	80057f4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80057f2:	79fb      	ldrb	r3, [r7, #7]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b0cc      	sub	sp, #304	@ 0x130
 8005800:	af00      	add	r7, sp, #0
 8005802:	4602      	mov	r2, r0
 8005804:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005808:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005812:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005816:	460a      	mov	r2, r1
 8005818:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800581a:	f107 0310 	add.w	r3, r7, #16
 800581e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005822:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005826:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800582a:	2200      	movs	r2, #0
 800582c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005834:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005838:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800583c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005840:	8812      	ldrh	r2, [r2, #0]
 8005842:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005848:	3302      	adds	r3, #2
 800584a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800584e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005852:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005856:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800585a:	7812      	ldrb	r2, [r2, #0]
 800585c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800585e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005862:	3301      	adds	r3, #1
 8005864:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005868:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800586c:	2218      	movs	r2, #24
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fd1c 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005876:	233f      	movs	r3, #63	@ 0x3f
 8005878:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800587c:	23a5      	movs	r3, #165	@ 0xa5
 800587e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005882:	f107 0310 	add.w	r3, r7, #16
 8005886:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800588a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800588e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005892:	f107 030f 	add.w	r3, r7, #15
 8005896:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800589a:	2301      	movs	r3, #1
 800589c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 ff8a 	bl	80067c0 <hci_send_req>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da01      	bge.n	80058b6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80058b2:	23ff      	movs	r3, #255	@ 0xff
 80058b4:	e004      	b.n	80058c0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80058b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80058be:	781b      	ldrb	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	2218      	movs	r2, #24
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fce6 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 80058e2:	233f      	movs	r3, #63	@ 0x3f
 80058e4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80058e6:	f240 1301 	movw	r3, #257	@ 0x101
 80058ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80058ec:	1dfb      	adds	r3, r7, #7
 80058ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80058f0:	2301      	movs	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 ff60 	bl	80067c0 <hci_send_req>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	da01      	bge.n	800590a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005906:	23ff      	movs	r3, #255	@ 0xff
 8005908:	e000      	b.n	800590c <aci_gatt_init+0x42>
  return status;
 800590a:	79fb      	ldrb	r3, [r7, #7]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b0cf      	sub	sp, #316	@ 0x13c
 8005918:	af00      	add	r7, sp, #0
 800591a:	4604      	mov	r4, r0
 800591c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005920:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005924:	6001      	str	r1, [r0, #0]
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800592e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005932:	4622      	mov	r2, r4
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800593a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800593e:	4602      	mov	r2, r0
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005946:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800594a:	460a      	mov	r2, r1
 800594c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800594e:	f107 0310 	add.w	r3, r7, #16
 8005952:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005956:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800595a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d00a      	beq.n	800597a <aci_gatt_add_service+0x66>
 8005964:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005968:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d101      	bne.n	8005976 <aci_gatt_add_service+0x62>
 8005972:	2311      	movs	r3, #17
 8005974:	e002      	b.n	800597c <aci_gatt_add_service+0x68>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <aci_gatt_add_service+0x68>
 800597a:	2303      	movs	r3, #3
 800597c:	f107 0210 	add.w	r2, r7, #16
 8005980:	4413      	add	r3, r2
 8005982:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005986:	f107 030c 	add.w	r3, r7, #12
 800598a:	2203      	movs	r2, #3
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fc8d 	bl	80062ae <Osal_MemSet>
  int index_input = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800599a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800599e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80059a2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80059aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059ae:	3301      	adds	r3, #1
 80059b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80059b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059b8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d002      	beq.n	80059c8 <aci_gatt_add_service+0xb4>
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d004      	beq.n	80059d0 <aci_gatt_add_service+0xbc>
 80059c6:	e007      	b.n	80059d8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80059c8:	2302      	movs	r3, #2
 80059ca:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80059ce:	e005      	b.n	80059dc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80059d6:	e001      	b.n	80059dc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80059d8:	2397      	movs	r3, #151	@ 0x97
 80059da:	e06c      	b.n	8005ab6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80059dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059e0:	1c58      	adds	r0, r3, #1
 80059e2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80059e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	f000 fc4d 	bl	800628e <Osal_MemCpy>
    index_input += size;
 80059f4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80059f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80059fc:	4413      	add	r3, r2
 80059fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8005a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a06:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005a0a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005a12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a16:	3301      	adds	r3, #1
 8005a18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a20:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005a24:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005a28:	7812      	ldrb	r2, [r2, #0]
 8005a2a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a30:	3301      	adds	r3, #1
 8005a32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a3a:	2218      	movs	r2, #24
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fc35 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a44:	233f      	movs	r3, #63	@ 0x3f
 8005a46:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8005a4a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005a4e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005a52:	f107 0310 	add.w	r3, r7, #16
 8005a56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005a62:	f107 030c 	add.w	r3, r7, #12
 8005a66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a74:	2100      	movs	r1, #0
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fea2 	bl	80067c0 <hci_send_req>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da01      	bge.n	8005a86 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005a82:	23ff      	movs	r3, #255	@ 0xff
 8005a84:	e017      	b.n	8005ab6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005a86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005a94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	e00a      	b.n	8005ab6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005aa0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005aa4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005aa8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005ab2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}

08005ac0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b0d1      	sub	sp, #324	@ 0x144
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	4608      	mov	r0, r1
 8005aca:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8005ace:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005ad2:	600a      	str	r2, [r1, #0]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ada:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005ade:	4622      	mov	r2, r4
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ae6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005aea:	4602      	mov	r2, r0
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005af2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005af6:	460a      	mov	r2, r1
 8005af8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005afa:	f107 0318 	add.w	r3, r7, #24
 8005afe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005b02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005b06:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d00a      	beq.n	8005b26 <aci_gatt_add_char+0x66>
 8005b10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005b14:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d101      	bne.n	8005b22 <aci_gatt_add_char+0x62>
 8005b1e:	2313      	movs	r3, #19
 8005b20:	e002      	b.n	8005b28 <aci_gatt_add_char+0x68>
 8005b22:	2303      	movs	r3, #3
 8005b24:	e000      	b.n	8005b28 <aci_gatt_add_char+0x68>
 8005b26:	2305      	movs	r3, #5
 8005b28:	f107 0218 	add.w	r2, r7, #24
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005b32:	f107 0314 	add.w	r3, r7, #20
 8005b36:	2203      	movs	r2, #3
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fbb7 	bl	80062ae <Osal_MemSet>
  int index_input = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8005b46:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b4a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005b4e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005b52:	8812      	ldrh	r2, [r2, #0]
 8005b54:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005b56:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005b60:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005b64:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005b68:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005b70:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b74:	3301      	adds	r3, #1
 8005b76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005b7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005b7e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d002      	beq.n	8005b8e <aci_gatt_add_char+0xce>
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d004      	beq.n	8005b96 <aci_gatt_add_char+0xd6>
 8005b8c:	e007      	b.n	8005b9e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005b94:	e005      	b.n	8005ba2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005b96:	2310      	movs	r3, #16
 8005b98:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005b9c:	e001      	b.n	8005ba2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005b9e:	2397      	movs	r3, #151	@ 0x97
 8005ba0:	e091      	b.n	8005cc6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005ba2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ba6:	1cd8      	adds	r0, r3, #3
 8005ba8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005bac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005bb0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005bb4:	6819      	ldr	r1, [r3, #0]
 8005bb6:	f000 fb6a 	bl	800628e <Osal_MemCpy>
    index_input += size;
 8005bba:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005bbe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005bcc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005bd0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005bd4:	8812      	ldrh	r2, [r2, #0]
 8005bd6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005bd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005bdc:	3302      	adds	r3, #2
 8005bde:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005be2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005be6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005bea:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005bec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005bf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005bfa:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005bfe:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005c00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c04:	3301      	adds	r3, #1
 8005c06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005c0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005c0e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8005c12:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005c14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8005c1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005c22:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8005c26:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005c28:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8005c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005c36:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8005c3a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005c3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c40:	3301      	adds	r3, #1
 8005c42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005c4a:	2218      	movs	r2, #24
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fb2d 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c54:	233f      	movs	r3, #63	@ 0x3f
 8005c56:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8005c5a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005c5e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005c62:	f107 0318 	add.w	r3, r7, #24
 8005c66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8005c6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8005c72:	f107 0314 	add.w	r3, r7, #20
 8005c76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fd9a 	bl	80067c0 <hci_send_req>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	da01      	bge.n	8005c96 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005c92:	23ff      	movs	r3, #255	@ 0xff
 8005c94:	e017      	b.n	8005cc6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8005c96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005ca4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	e00a      	b.n	8005cc6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8005cb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005cb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005cb8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005cc2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd90      	pop	{r4, r7, pc}

08005cd0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8005cd0:	b5b0      	push	{r4, r5, r7, lr}
 8005cd2:	b0cc      	sub	sp, #304	@ 0x130
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ce2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005cf2:	4622      	mov	r2, r4
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cfa:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8005cfe:	4602      	mov	r2, r0
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d06:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005d0e:	f107 0310 	add.w	r3, r7, #16
 8005d12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005d16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d1a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8005d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d2c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d30:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005d34:	8812      	ldrh	r2, [r2, #0]
 8005d36:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8005d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d46:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d4a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005d4e:	8812      	ldrh	r2, [r2, #0]
 8005d50:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005d52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d56:	3302      	adds	r3, #2
 8005d58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8005d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d60:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d64:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005d6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d70:	3301      	adds	r3, #1
 8005d72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d7a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d7e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8005d82:	7812      	ldrb	r2, [r2, #0]
 8005d84:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005d86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8005d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d94:	1d98      	adds	r0, r3, #6
 8005d96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d9a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005da6:	f000 fa72 	bl	800628e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8005daa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dae:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005db8:	4413      	add	r3, r2
 8005dba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005dbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dc2:	2218      	movs	r2, #24
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fa71 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005dcc:	233f      	movs	r3, #63	@ 0x3f
 8005dce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8005dd2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005dd6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005dda:	f107 0310 	add.w	r3, r7, #16
 8005dde:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005de6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005dea:	f107 030f 	add.w	r3, r7, #15
 8005dee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005df8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fcde 	bl	80067c0 <hci_send_req>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da01      	bge.n	8005e0e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8005e0a:	23ff      	movs	r3, #255	@ 0xff
 8005e0c:	e004      	b.n	8005e18 <aci_gatt_update_char_value+0x148>
  return status;
 8005e0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e12:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e16:	781b      	ldrb	r3, [r3, #0]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bdb0      	pop	{r4, r5, r7, pc}

08005e22 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b0cc      	sub	sp, #304	@ 0x130
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	4602      	mov	r2, r0
 8005e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e2e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005e32:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8005e34:	f107 0310 	add.w	r3, r7, #16
 8005e38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005e3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e40:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e52:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e56:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005e5a:	8812      	ldrh	r2, [r2, #0]
 8005e5c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e62:	3302      	adds	r3, #2
 8005e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e6c:	2218      	movs	r2, #24
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fa1c 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e76:	233f      	movs	r3, #63	@ 0x3f
 8005e78:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8005e7c:	f240 1325 	movw	r3, #293	@ 0x125
 8005e80:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e84:	f107 0310 	add.w	r3, r7, #16
 8005e88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005e94:	f107 030f 	add.w	r3, r7, #15
 8005e98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ea2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fc89 	bl	80067c0 <hci_send_req>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da01      	bge.n	8005eb8 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8005eb4:	23ff      	movs	r3, #255	@ 0xff
 8005eb6:	e004      	b.n	8005ec2 <aci_gatt_confirm_indication+0xa0>
  return status;
 8005eb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ebc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ec0:	781b      	ldrb	r3, [r3, #0]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0cc      	sub	sp, #304	@ 0x130
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ed6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ee0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ef0:	460a      	mov	r2, r1
 8005ef2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005ef4:	f107 0310 	add.w	r3, r7, #16
 8005ef8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005efc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f00:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8005f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f12:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f16:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f22:	3301      	adds	r3, #1
 8005f24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8005f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f2c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f30:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f46:	1c98      	adds	r0, r3, #2
 8005f48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f4c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	f000 f997 	bl	800628e <Osal_MemCpy>
  index_input += Length;
 8005f60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f64:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005f6e:	4413      	add	r3, r2
 8005f70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f78:	2218      	movs	r2, #24
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f996 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f82:	233f      	movs	r3, #63	@ 0x3f
 8005f84:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8005f88:	230c      	movs	r3, #12
 8005f8a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005f8e:	f107 0310 	add.w	r3, r7, #16
 8005f92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005f9e:	f107 030f 	add.w	r3, r7, #15
 8005fa2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fc04 	bl	80067c0 <hci_send_req>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	da01      	bge.n	8005fc2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005fbe:	23ff      	movs	r3, #255	@ 0xff
 8005fc0:	e004      	b.n	8005fcc <aci_hal_write_config_data+0x100>
  return status;
 8005fc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fc6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005fca:	781b      	ldrb	r3, [r3, #0]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b0cc      	sub	sp, #304	@ 0x130
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	4602      	mov	r2, r0
 8005fde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fe2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ff0:	460a      	mov	r2, r1
 8005ff2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005ff4:	f107 0310 	add.w	r3, r7, #16
 8005ff8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005ffc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006000:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800600e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006012:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006016:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800601e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006022:	3301      	adds	r3, #1
 8006024:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8006028:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800602c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006030:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006038:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800603c:	3301      	adds	r3, #1
 800603e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006046:	2218      	movs	r2, #24
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f92f 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 8006050:	233f      	movs	r3, #63	@ 0x3f
 8006052:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8006056:	230f      	movs	r3, #15
 8006058:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800605c:	f107 0310 	add.w	r3, r7, #16
 8006060:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006064:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006068:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800606c:	f107 030f 	add.w	r3, r7, #15
 8006070:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006074:	2301      	movs	r3, #1
 8006076:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800607a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fb9d 	bl	80067c0 <hci_send_req>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	da01      	bge.n	8006090 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800608c:	23ff      	movs	r3, #255	@ 0xff
 800608e:	e004      	b.n	800609a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8006090:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006094:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006098:	781b      	ldrb	r3, [r3, #0]
}
 800609a:	4618      	mov	r0, r3
 800609c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b0cc      	sub	sp, #304	@ 0x130
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4602      	mov	r2, r0
 80060ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80060b4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80060b6:	f107 0310 	add.w	r3, r7, #16
 80060ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80060be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80060d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060d8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80060dc:	8812      	ldrh	r2, [r2, #0]
 80060de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80060e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060e4:	3302      	adds	r3, #2
 80060e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060ee:	2218      	movs	r2, #24
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f8db 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x3f;
 80060f8:	233f      	movs	r3, #63	@ 0x3f
 80060fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80060fe:	2318      	movs	r3, #24
 8006100:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006104:	f107 0310 	add.w	r3, r7, #16
 8006108:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800610c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006110:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006114:	f107 030f 	add.w	r3, r7, #15
 8006118:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800611c:	2301      	movs	r3, #1
 800611e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006122:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fb49 	bl	80067c0 <hci_send_req>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	da01      	bge.n	8006138 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006134:	23ff      	movs	r3, #255	@ 0xff
 8006136:	e004      	b.n	8006142 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006138:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800613c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006140:	781b      	ldrb	r3, [r3, #0]
}
 8006142:	4618      	mov	r0, r3
 8006144:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006156:	f107 0308 	add.w	r3, r7, #8
 800615a:	2218      	movs	r2, #24
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f000 f8a5 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x03;
 8006164:	2303      	movs	r3, #3
 8006166:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006168:	2303      	movs	r3, #3
 800616a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800616c:	1dfb      	adds	r3, r7, #7
 800616e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006170:	2301      	movs	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006174:	f107 0308 	add.w	r3, r7, #8
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fb20 	bl	80067c0 <hci_send_req>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	da01      	bge.n	800618a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006186:	23ff      	movs	r3, #255	@ 0xff
 8006188:	e000      	b.n	800618c <hci_reset+0x40>
  return status;
 800618a:	79fb      	ldrb	r3, [r7, #7]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b0cd      	sub	sp, #308	@ 0x134
 8006198:	af00      	add	r7, sp, #0
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061a4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80061a8:	4622      	mov	r2, r4
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80061b4:	4602      	mov	r2, r0
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061bc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80061c0:	460a      	mov	r2, r1
 80061c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80061c4:	f107 0310 	add.w	r3, r7, #16
 80061c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80061cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061e6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80061ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061f2:	3301      	adds	r3, #1
 80061f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80061f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006200:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006204:	7812      	ldrb	r2, [r2, #0]
 8006206:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006208:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800620c:	3301      	adds	r3, #1
 800620e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006212:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006216:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800621a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006222:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006226:	3301      	adds	r3, #1
 8006228:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800622c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006230:	2218      	movs	r2, #24
 8006232:	2100      	movs	r1, #0
 8006234:	4618      	mov	r0, r3
 8006236:	f000 f83a 	bl	80062ae <Osal_MemSet>
  rq.ogf = 0x08;
 800623a:	2308      	movs	r3, #8
 800623c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8006240:	2331      	movs	r3, #49	@ 0x31
 8006242:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006246:	f107 0310 	add.w	r3, r7, #16
 800624a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800624e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006252:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006256:	f107 030f 	add.w	r3, r7, #15
 800625a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800625e:	2301      	movs	r3, #1
 8006260:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006264:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f000 faa8 	bl	80067c0 <hci_send_req>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	da01      	bge.n	800627a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006276:	23ff      	movs	r3, #255	@ 0xff
 8006278:	e004      	b.n	8006284 <hci_le_set_default_phy+0xf0>
  return status;
 800627a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800627e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006282:	781b      	ldrb	r3, [r3, #0]
}
 8006284:	4618      	mov	r0, r3
 8006286:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800628a:	46bd      	mov	sp, r7
 800628c:	bd90      	pop	{r4, r7, pc}

0800628e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f002 fac1 	bl	8008826 <memcpy>
 80062a4:	4603      	mov	r3, r0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f002 fa35 	bl	800872e <memset>
 80062c4:	4603      	mov	r3, r0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80062ce:	b480      	push	{r7}
 80062d0:	af00      	add	r7, sp, #0
  return;
 80062d2:	bf00      	nop
}
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  return;
 80062e0:	bf00      	nop
}
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80062ea:	b480      	push	{r7}
 80062ec:	af00      	add	r7, sp, #0
  return;
 80062ee:	bf00      	nop
}
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
  return;
 80062fc:	bf00      	nop
}
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0
  return;
 800630a:	bf00      	nop
}
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
  return;
 8006318:	bf00      	nop
}
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006322:	b480      	push	{r7}
 8006324:	af00      	add	r7, sp, #0
  return;
 8006326:	bf00      	nop
}
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return;
 8006334:	bf00      	nop
}
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800633e:	b480      	push	{r7}
 8006340:	af00      	add	r7, sp, #0
  return;
 8006342:	bf00      	nop
}
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  return;
 8006350:	bf00      	nop
}
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800635a:	b480      	push	{r7}
 800635c:	af00      	add	r7, sp, #0
  return;
 800635e:	bf00      	nop
}
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  return;
 800636c:	bf00      	nop
}
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0
  return;
 800637a:	bf00      	nop
}
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  return;
 8006388:	bf00      	nop
}
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006392:	b480      	push	{r7}
 8006394:	af00      	add	r7, sp, #0
  return;
 8006396:	bf00      	nop
}
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  return;
 80063a4:	bf00      	nop
}
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80063ae:	b480      	push	{r7}
 80063b0:	af00      	add	r7, sp, #0
  return;
 80063b2:	bf00      	nop
}
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80063c0:	4b04      	ldr	r3, [pc, #16]	@ (80063d4 <SVCCTL_Init+0x18>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80063c6:	4b04      	ldr	r3, [pc, #16]	@ (80063d8 <SVCCTL_Init+0x1c>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80063cc:	f000 f806 	bl	80063dc <SVCCTL_SvcInit>

  return;
 80063d0:	bf00      	nop
}
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200000c4 	.word	0x200000c4
 80063d8:	200000e4 	.word	0x200000e4

080063dc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  BAS_Init();
 80063e0:	f7ff ff75 	bl	80062ce <BAS_Init>

  BLS_Init();
 80063e4:	f7ff ff7a 	bl	80062dc <BLS_Init>

  CRS_STM_Init();
 80063e8:	f7ff ff7f 	bl	80062ea <CRS_STM_Init>

  DIS_Init();
 80063ec:	f7ff ff84 	bl	80062f8 <DIS_Init>

  EDS_STM_Init();
 80063f0:	f7ff ff89 	bl	8006306 <EDS_STM_Init>

  HIDS_Init();
 80063f4:	f7ff ff8e 	bl	8006314 <HIDS_Init>

  HRS_Init();
 80063f8:	f7ff ff93 	bl	8006322 <HRS_Init>

  HTS_Init();
 80063fc:	f7ff ff98 	bl	8006330 <HTS_Init>

  IAS_Init();
 8006400:	f7ff ff9d 	bl	800633e <IAS_Init>

  LLS_Init();
 8006404:	f7ff ffa2 	bl	800634c <LLS_Init>

  TPS_Init();
 8006408:	f7ff ffa7 	bl	800635a <TPS_Init>

  MOTENV_STM_Init();
 800640c:	f7ff ffac 	bl	8006368 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006410:	f7ff ffb1 	bl	8006376 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006414:	f7ff ffb6 	bl	8006384 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006418:	f7ff ffbb 	bl	8006392 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800641c:	f7ff ffc7 	bl	80063ae <BVOPUS_STM_Init>

  MESH_Init();
 8006420:	f7ff ffbe 	bl	80063a0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006424:	f001 fb4a 	bl	8007abc <SVCCTL_InitCustomSvc>
  
  return;
 8006428:	bf00      	nop
}
 800642a:	bd80      	pop	{r7, pc}

0800642c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006434:	4b09      	ldr	r3, [pc, #36]	@ (800645c <SVCCTL_RegisterSvcHandler+0x30>)
 8006436:	7f1b      	ldrb	r3, [r3, #28]
 8006438:	4619      	mov	r1, r3
 800643a:	4a08      	ldr	r2, [pc, #32]	@ (800645c <SVCCTL_RegisterSvcHandler+0x30>)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006442:	4b06      	ldr	r3, [pc, #24]	@ (800645c <SVCCTL_RegisterSvcHandler+0x30>)
 8006444:	7f1b      	ldrb	r3, [r3, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	b2da      	uxtb	r2, r3
 800644a:	4b04      	ldr	r3, [pc, #16]	@ (800645c <SVCCTL_RegisterSvcHandler+0x30>)
 800644c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800644e:	bf00      	nop
}
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	200000c4 	.word	0x200000c4

08006460 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3301      	adds	r3, #1
 800646c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2bff      	cmp	r3, #255	@ 0xff
 8006478:	d125      	bne.n	80064c6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	3302      	adds	r3, #2
 800647e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800648a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800648e:	d118      	bne.n	80064c2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006490:	2300      	movs	r3, #0
 8006492:	757b      	strb	r3, [r7, #21]
 8006494:	e00d      	b.n	80064b2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006496:	7d7b      	ldrb	r3, [r7, #21]
 8006498:	4a1a      	ldr	r2, [pc, #104]	@ (8006504 <SVCCTL_UserEvtRx+0xa4>)
 800649a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d108      	bne.n	80064be <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80064ac:	7d7b      	ldrb	r3, [r7, #21]
 80064ae:	3301      	adds	r3, #1
 80064b0:	757b      	strb	r3, [r7, #21]
 80064b2:	4b14      	ldr	r3, [pc, #80]	@ (8006504 <SVCCTL_UserEvtRx+0xa4>)
 80064b4:	7f1b      	ldrb	r3, [r3, #28]
 80064b6:	7d7a      	ldrb	r2, [r7, #21]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d3ec      	bcc.n	8006496 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80064bc:	e002      	b.n	80064c4 <SVCCTL_UserEvtRx+0x64>
              break;
 80064be:	bf00      	nop
          break;
 80064c0:	e000      	b.n	80064c4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80064c2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80064c4:	e000      	b.n	80064c8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80064c6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d00f      	beq.n	80064ee <SVCCTL_UserEvtRx+0x8e>
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	dc10      	bgt.n	80064f4 <SVCCTL_UserEvtRx+0x94>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <SVCCTL_UserEvtRx+0x7c>
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d006      	beq.n	80064e8 <SVCCTL_UserEvtRx+0x88>
 80064da:	e00b      	b.n	80064f4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 ff85 	bl	80073ec <SVCCTL_App_Notification>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75bb      	strb	r3, [r7, #22]
      break;
 80064e6:	e008      	b.n	80064fa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75bb      	strb	r3, [r7, #22]
      break;
 80064ec:	e005      	b.n	80064fa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75bb      	strb	r3, [r7, #22]
      break;
 80064f2:	e002      	b.n	80064fa <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80064f4:	2301      	movs	r3, #1
 80064f6:	75bb      	strb	r3, [r7, #22]
      break;
 80064f8:	bf00      	nop
  }

  return (return_status);
 80064fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	200000c4 	.word	0x200000c4

08006508 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006510:	f107 030c 	add.w	r3, r7, #12
 8006514:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	212e      	movs	r1, #46	@ 0x2e
 8006520:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006524:	f000 fae8 	bl	8006af8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	330b      	adds	r3, #11
 800652c:	78db      	ldrb	r3, [r3, #3]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3720      	adds	r7, #32
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b088      	sub	sp, #32
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	210f      	movs	r1, #15
 800654e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006552:	f000 fad1 	bl	8006af8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	330b      	adds	r3, #11
 800655a:	78db      	ldrb	r3, [r3, #3]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800656c:	f107 030c 	add.w	r3, r7, #12
 8006570:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	2110      	movs	r1, #16
 8006578:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800657c:	f000 fabc 	bl	8006af8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	330b      	adds	r3, #11
 8006584:	78db      	ldrb	r3, [r3, #3]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3720      	adds	r7, #32
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006590:	b480      	push	{r7}
 8006592:	b08b      	sub	sp, #44	@ 0x2c
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80065b8:	4b4a      	ldr	r3, [pc, #296]	@ (80066e4 <SHCI_GetWirelessFwInfo+0x154>)
 80065ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80065c0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80065ca:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a44      	ldr	r2, [pc, #272]	@ (80066e8 <SHCI_GetWirelessFwInfo+0x158>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d10f      	bne.n	80065fc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e01a      	b.n	8006632 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006604:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006608:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	0e1b      	lsrs	r3, r3, #24
 8006636:	b2da      	uxtb	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	0c1b      	lsrs	r3, r3, #16
 8006640:	b2da      	uxtb	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	0a1b      	lsrs	r3, r3, #8
 800664a:	b2da      	uxtb	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	b2da      	uxtb	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	0e1b      	lsrs	r3, r3, #24
 8006672:	b2da      	uxtb	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	b2da      	uxtb	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	b2da      	uxtb	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	b2da      	uxtb	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	0e1b      	lsrs	r3, r3, #24
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	0c1b      	lsrs	r3, r3, #16
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	0a1b      	lsrs	r3, r3, #8
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	0e1b      	lsrs	r3, r3, #24
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	0c1b      	lsrs	r3, r3, #16
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	372c      	adds	r7, #44	@ 0x2c
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	58004000 	.word	0x58004000
 80066e8:	a94656b9 	.word	0xa94656b9

080066ec <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	4a08      	ldr	r2, [pc, #32]	@ (800671c <hci_init+0x30>)
 80066fc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80066fe:	4a08      	ldr	r2, [pc, #32]	@ (8006720 <hci_init+0x34>)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006704:	4806      	ldr	r0, [pc, #24]	@ (8006720 <hci_init+0x34>)
 8006706:	f000 f979 	bl	80069fc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f8da 	bl	80068c8 <TlInit>

  return;
 8006714:	bf00      	nop
}
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000308 	.word	0x20000308
 8006720:	200002e0 	.word	0x200002e0

08006724 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800672a:	4822      	ldr	r0, [pc, #136]	@ (80067b4 <hci_user_evt_proc+0x90>)
 800672c:	f000 fd32 	bl	8007194 <LST_is_empty>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d12b      	bne.n	800678e <hci_user_evt_proc+0x6a>
 8006736:	4b20      	ldr	r3, [pc, #128]	@ (80067b8 <hci_user_evt_proc+0x94>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d027      	beq.n	800678e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800673e:	f107 030c 	add.w	r3, r7, #12
 8006742:	4619      	mov	r1, r3
 8006744:	481b      	ldr	r0, [pc, #108]	@ (80067b4 <hci_user_evt_proc+0x90>)
 8006746:	f000 fdb4 	bl	80072b2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800674a:	4b1c      	ldr	r3, [pc, #112]	@ (80067bc <hci_user_evt_proc+0x98>)
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00c      	beq.n	800676c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006756:	2301      	movs	r3, #1
 8006758:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800675a:	4b18      	ldr	r3, [pc, #96]	@ (80067bc <hci_user_evt_proc+0x98>)
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	1d3a      	adds	r2, r7, #4
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006764:	793a      	ldrb	r2, [r7, #4]
 8006766:	4b14      	ldr	r3, [pc, #80]	@ (80067b8 <hci_user_evt_proc+0x94>)
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	e002      	b.n	8006772 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800676c:	4b12      	ldr	r3, [pc, #72]	@ (80067b8 <hci_user_evt_proc+0x94>)
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006772:	4b11      	ldr	r3, [pc, #68]	@ (80067b8 <hci_user_evt_proc+0x94>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fc0d 	bl	8006f9c <TL_MM_EvtDone>
 8006782:	e004      	b.n	800678e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4619      	mov	r1, r3
 8006788:	480a      	ldr	r0, [pc, #40]	@ (80067b4 <hci_user_evt_proc+0x90>)
 800678a:	f000 fd25 	bl	80071d8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800678e:	4809      	ldr	r0, [pc, #36]	@ (80067b4 <hci_user_evt_proc+0x90>)
 8006790:	f000 fd00 	bl	8007194 <LST_is_empty>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d107      	bne.n	80067aa <hci_user_evt_proc+0x86>
 800679a:	4b07      	ldr	r3, [pc, #28]	@ (80067b8 <hci_user_evt_proc+0x94>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80067a2:	4804      	ldr	r0, [pc, #16]	@ (80067b4 <hci_user_evt_proc+0x90>)
 80067a4:	f001 f856 	bl	8007854 <hci_notify_asynch_evt>
  }


  return;
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
}
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200000ec 	.word	0x200000ec
 80067b8:	200000f8 	.word	0x200000f8
 80067bc:	200002e0 	.word	0x200002e0

080067c0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80067cc:	2000      	movs	r0, #0
 80067ce:	f000 f8d1 	bl	8006974 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80067d2:	2300      	movs	r3, #0
 80067d4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	885b      	ldrh	r3, [r3, #2]
 80067da:	b21b      	sxth	r3, r3
 80067dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067e0:	b21a      	sxth	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b21b      	sxth	r3, r3
 80067ea:	4313      	orrs	r3, r2
 80067ec:	b21b      	sxth	r3, r3
 80067ee:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80067f0:	4b33      	ldr	r3, [pc, #204]	@ (80068c0 <hci_send_req+0x100>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	b2d9      	uxtb	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	8bbb      	ldrh	r3, [r7, #28]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f890 	bl	8006928 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006808:	e04e      	b.n	80068a8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800680a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800680e:	f001 f838 	bl	8007882 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006812:	e043      	b.n	800689c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006814:	f107 030c 	add.w	r3, r7, #12
 8006818:	4619      	mov	r1, r3
 800681a:	482a      	ldr	r0, [pc, #168]	@ (80068c4 <hci_send_req+0x104>)
 800681c:	f000 fd49 	bl	80072b2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	7a5b      	ldrb	r3, [r3, #9]
 8006824:	2b0f      	cmp	r3, #15
 8006826:	d114      	bne.n	8006852 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	330b      	adds	r3, #11
 800682c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	885b      	ldrh	r3, [r3, #2]
 8006832:	b29b      	uxth	r3, r3
 8006834:	8bba      	ldrh	r2, [r7, #28]
 8006836:	429a      	cmp	r2, r3
 8006838:	d104      	bne.n	8006844 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	7812      	ldrb	r2, [r2, #0]
 8006842:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d027      	beq.n	800689c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800684c:	2301      	movs	r3, #1
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e024      	b.n	800689c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	330b      	adds	r3, #11
 8006856:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800685e:	b29b      	uxth	r3, r3
 8006860:	8bba      	ldrh	r2, [r7, #28]
 8006862:	429a      	cmp	r2, r3
 8006864:	d114      	bne.n	8006890 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	7a9b      	ldrb	r3, [r3, #10]
 800686a:	3b03      	subs	r3, #3
 800686c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	429a      	cmp	r2, r3
 8006876:	bfa8      	it	ge
 8006878:	461a      	movge	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6918      	ldr	r0, [r3, #16]
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	1cd9      	adds	r1, r3, #3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	461a      	mov	r2, r3
 800688c:	f001 ffcb 	bl	8008826 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006898:	2301      	movs	r3, #1
 800689a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800689c:	4809      	ldr	r0, [pc, #36]	@ (80068c4 <hci_send_req+0x104>)
 800689e:	f000 fc79 	bl	8007194 <LST_is_empty>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0b5      	beq.n	8006814 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80068a8:	7ffb      	ldrb	r3, [r7, #31]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0ad      	beq.n	800680a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80068ae:	2001      	movs	r0, #1
 80068b0:	f000 f860 	bl	8006974 <NotifyCmdStatus>

  return 0;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	2000030c 	.word	0x2000030c
 80068c4:	20000300 	.word	0x20000300

080068c8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80068d0:	480f      	ldr	r0, [pc, #60]	@ (8006910 <TlInit+0x48>)
 80068d2:	f000 fc4f 	bl	8007174 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80068d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006914 <TlInit+0x4c>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80068dc:	480e      	ldr	r0, [pc, #56]	@ (8006918 <TlInit+0x50>)
 80068de:	f000 fc49 	bl	8007174 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80068e2:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <TlInit+0x54>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80068e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006920 <TlInit+0x58>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80068f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <TlInit+0x5c>)
 80068f6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80068f8:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <TlInit+0x58>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f107 0208 	add.w	r2, r7, #8
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
  }

  return;
 8006904:	bf00      	nop
 8006906:	bf00      	nop
}
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000300 	.word	0x20000300
 8006914:	200000f4 	.word	0x200000f4
 8006918:	200000ec 	.word	0x200000ec
 800691c:	200000f8 	.word	0x200000f8
 8006920:	200002e0 	.word	0x200002e0
 8006924:	080069b5 	.word	0x080069b5

08006928 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	603a      	str	r2, [r7, #0]
 8006932:	80fb      	strh	r3, [r7, #6]
 8006934:	460b      	mov	r3, r1
 8006936:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006938:	4b0c      	ldr	r3, [pc, #48]	@ (800696c <SendCmd+0x44>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	88fa      	ldrh	r2, [r7, #6]
 800693e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006942:	4b0a      	ldr	r3, [pc, #40]	@ (800696c <SendCmd+0x44>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	797a      	ldrb	r2, [r7, #5]
 8006948:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800694a:	4b08      	ldr	r3, [pc, #32]	@ (800696c <SendCmd+0x44>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	797a      	ldrb	r2, [r7, #5]
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	f001 ff66 	bl	8008826 <memcpy>

  hciContext.io.Send(0,0);
 800695a:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <SendCmd+0x48>)
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2100      	movs	r1, #0
 8006960:	2000      	movs	r0, #0
 8006962:	4798      	blx	r3

  return;
 8006964:	bf00      	nop
}
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200000f4 	.word	0x200000f4
 8006970:	200002e0 	.word	0x200002e0

08006974 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d108      	bne.n	8006996 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <NotifyCmdStatus+0x3c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00d      	beq.n	80069a8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800698c:	4b08      	ldr	r3, [pc, #32]	@ (80069b0 <NotifyCmdStatus+0x3c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2000      	movs	r0, #0
 8006992:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006994:	e008      	b.n	80069a8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006996:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <NotifyCmdStatus+0x3c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800699e:	4b04      	ldr	r3, [pc, #16]	@ (80069b0 <NotifyCmdStatus+0x3c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2001      	movs	r0, #1
 80069a4:	4798      	blx	r3
  return;
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
}
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000308 	.word	0x20000308

080069b4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	7a5b      	ldrb	r3, [r3, #9]
 80069c0:	2b0f      	cmp	r3, #15
 80069c2:	d003      	beq.n	80069cc <TlEvtReceived+0x18>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7a5b      	ldrb	r3, [r3, #9]
 80069c8:	2b0e      	cmp	r3, #14
 80069ca:	d107      	bne.n	80069dc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4809      	ldr	r0, [pc, #36]	@ (80069f4 <TlEvtReceived+0x40>)
 80069d0:	f000 fc28 	bl	8007224 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80069d4:	2000      	movs	r0, #0
 80069d6:	f000 ff49 	bl	800786c <hci_cmd_resp_release>
 80069da:	e006      	b.n	80069ea <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	4806      	ldr	r0, [pc, #24]	@ (80069f8 <TlEvtReceived+0x44>)
 80069e0:	f000 fc20 	bl	8007224 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80069e4:	4804      	ldr	r0, [pc, #16]	@ (80069f8 <TlEvtReceived+0x44>)
 80069e6:	f000 ff35 	bl	8007854 <hci_notify_asynch_evt>
  }

  return;
 80069ea:	bf00      	nop
}
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000300 	.word	0x20000300
 80069f8:	200000ec 	.word	0x200000ec

080069fc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a05      	ldr	r2, [pc, #20]	@ (8006a1c <hci_register_io_bus+0x20>)
 8006a08:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a04      	ldr	r2, [pc, #16]	@ (8006a20 <hci_register_io_bus+0x24>)
 8006a0e:	611a      	str	r2, [r3, #16]

  return;
 8006a10:	bf00      	nop
}
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	08006d15 	.word	0x08006d15
 8006a20:	08006d7d 	.word	0x08006d7d

08006a24 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4a08      	ldr	r2, [pc, #32]	@ (8006a54 <shci_init+0x30>)
 8006a34:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006a36:	4a08      	ldr	r2, [pc, #32]	@ (8006a58 <shci_init+0x34>)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006a3c:	4806      	ldr	r0, [pc, #24]	@ (8006a58 <shci_init+0x34>)
 8006a3e:	f000 f915 	bl	8006c6c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f898 	bl	8006b7c <TlInit>

  return;
 8006a4c:	bf00      	nop
}
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20000330 	.word	0x20000330
 8006a58:	20000310 	.word	0x20000310

08006a5c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006a62:	4822      	ldr	r0, [pc, #136]	@ (8006aec <shci_user_evt_proc+0x90>)
 8006a64:	f000 fb96 	bl	8007194 <LST_is_empty>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d12b      	bne.n	8006ac6 <shci_user_evt_proc+0x6a>
 8006a6e:	4b20      	ldr	r3, [pc, #128]	@ (8006af0 <shci_user_evt_proc+0x94>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d027      	beq.n	8006ac6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006a76:	f107 030c 	add.w	r3, r7, #12
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	481b      	ldr	r0, [pc, #108]	@ (8006aec <shci_user_evt_proc+0x90>)
 8006a7e:	f000 fc18 	bl	80072b2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006a82:	4b1c      	ldr	r3, [pc, #112]	@ (8006af4 <shci_user_evt_proc+0x98>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006a92:	4b18      	ldr	r3, [pc, #96]	@ (8006af4 <shci_user_evt_proc+0x98>)
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	1d3a      	adds	r2, r7, #4
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006a9c:	793a      	ldrb	r2, [r7, #4]
 8006a9e:	4b14      	ldr	r3, [pc, #80]	@ (8006af0 <shci_user_evt_proc+0x94>)
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	e002      	b.n	8006aaa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006aa4:	4b12      	ldr	r3, [pc, #72]	@ (8006af0 <shci_user_evt_proc+0x94>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006aaa:	4b11      	ldr	r3, [pc, #68]	@ (8006af0 <shci_user_evt_proc+0x94>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fa71 	bl	8006f9c <TL_MM_EvtDone>
 8006aba:	e004      	b.n	8006ac6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	480a      	ldr	r0, [pc, #40]	@ (8006aec <shci_user_evt_proc+0x90>)
 8006ac2:	f000 fb89 	bl	80071d8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006ac6:	4809      	ldr	r0, [pc, #36]	@ (8006aec <shci_user_evt_proc+0x90>)
 8006ac8:	f000 fb64 	bl	8007194 <LST_is_empty>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d107      	bne.n	8006ae2 <shci_user_evt_proc+0x86>
 8006ad2:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <shci_user_evt_proc+0x94>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006ada:	4804      	ldr	r0, [pc, #16]	@ (8006aec <shci_user_evt_proc+0x90>)
 8006adc:	f7f9 ff5d 	bl	800099a <shci_notify_asynch_evt>
  }


  return;
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
}
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	200000fc 	.word	0x200000fc
 8006af0:	2000010c 	.word	0x2000010c
 8006af4:	20000310 	.word	0x20000310

08006af8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60ba      	str	r2, [r7, #8]
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	4603      	mov	r3, r0
 8006b04:	81fb      	strh	r3, [r7, #14]
 8006b06:	460b      	mov	r3, r1
 8006b08:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f000 f868 	bl	8006be0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006b10:	4b17      	ldr	r3, [pc, #92]	@ (8006b70 <shci_send+0x78>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	89fa      	ldrh	r2, [r7, #14]
 8006b16:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006b1a:	4b15      	ldr	r3, [pc, #84]	@ (8006b70 <shci_send+0x78>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	7b7a      	ldrb	r2, [r7, #13]
 8006b20:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006b22:	4b13      	ldr	r3, [pc, #76]	@ (8006b70 <shci_send+0x78>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	330c      	adds	r3, #12
 8006b28:	7b7a      	ldrb	r2, [r7, #13]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 fe7a 	bl	8008826 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006b32:	4b10      	ldr	r3, [pc, #64]	@ (8006b74 <shci_send+0x7c>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006b38:	4b0f      	ldr	r3, [pc, #60]	@ (8006b78 <shci_send+0x80>)
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	2000      	movs	r0, #0
 8006b40:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006b42:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006b46:	f7f9 ff3f 	bl	80009c8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f103 0008 	add.w	r0, r3, #8
 8006b50:	4b07      	ldr	r3, [pc, #28]	@ (8006b70 <shci_send+0x78>)
 8006b52:	6819      	ldr	r1, [r3, #0]
 8006b54:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <shci_send+0x78>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	789b      	ldrb	r3, [r3, #2]
 8006b5a:	3303      	adds	r3, #3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f001 fe62 	bl	8008826 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006b62:	2001      	movs	r0, #1
 8006b64:	f000 f83c 	bl	8006be0 <Cmd_SetStatus>

  return;
 8006b68:	bf00      	nop
}
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000108 	.word	0x20000108
 8006b74:	20000334 	.word	0x20000334
 8006b78:	20000310 	.word	0x20000310

08006b7c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006b84:	4a10      	ldr	r2, [pc, #64]	@ (8006bc8 <TlInit+0x4c>)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006b8a:	4810      	ldr	r0, [pc, #64]	@ (8006bcc <TlInit+0x50>)
 8006b8c:	f000 faf2 	bl	8007174 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006b90:	2001      	movs	r0, #1
 8006b92:	f000 f825 	bl	8006be0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006b96:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd0 <TlInit+0x54>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd4 <TlInit+0x58>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00c      	beq.n	8006bbe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <TlInit+0x5c>)
 8006baa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006bac:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <TlInit+0x60>)
 8006bae:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006bb0:	4b08      	ldr	r3, [pc, #32]	@ (8006bd4 <TlInit+0x58>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f107 020c 	add.w	r2, r7, #12
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
  }

  return;
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
}
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000108 	.word	0x20000108
 8006bcc:	200000fc 	.word	0x200000fc
 8006bd0:	2000010c 	.word	0x2000010c
 8006bd4:	20000310 	.word	0x20000310
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c49 	.word	0x08006c49

08006be0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <Cmd_SetStatus+0x48>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <Cmd_SetStatus+0x48>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006c00:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <Cmd_SetStatus+0x4c>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006c06:	e00b      	b.n	8006c20 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006c08:	4b08      	ldr	r3, [pc, #32]	@ (8006c2c <Cmd_SetStatus+0x4c>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006c0e:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <Cmd_SetStatus+0x48>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006c16:	4b04      	ldr	r3, [pc, #16]	@ (8006c28 <Cmd_SetStatus+0x48>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	4798      	blx	r3
  return;
 8006c1e:	bf00      	nop
 8006c20:	bf00      	nop
}
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20000330 	.word	0x20000330
 8006c2c:	20000104 	.word	0x20000104

08006c30 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006c38:	2000      	movs	r0, #0
 8006c3a:	f7f9 feba 	bl	80009b2 <shci_cmd_resp_release>

  return;
 8006c3e:	bf00      	nop
}
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4805      	ldr	r0, [pc, #20]	@ (8006c68 <TlUserEvtReceived+0x20>)
 8006c54:	f000 fae6 	bl	8007224 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006c58:	4803      	ldr	r0, [pc, #12]	@ (8006c68 <TlUserEvtReceived+0x20>)
 8006c5a:	f7f9 fe9e 	bl	800099a <shci_notify_asynch_evt>

  return;
 8006c5e:	bf00      	nop
}
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	200000fc 	.word	0x200000fc

08006c6c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a05      	ldr	r2, [pc, #20]	@ (8006c8c <shci_register_io_bus+0x20>)
 8006c78:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a04      	ldr	r2, [pc, #16]	@ (8006c90 <shci_register_io_bus+0x24>)
 8006c7e:	611a      	str	r2, [r3, #16]

  return;
 8006c80:	bf00      	nop
}
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	08006e29 	.word	0x08006e29
 8006c90:	08006e7d 	.word	0x08006e7d

08006c94 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006c98:	f001 f8fc 	bl	8007e94 <HW_IPCC_Enable>

  return;
 8006c9c:	bf00      	nop
}
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <TL_Init>:


void TL_Init( void )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006ca4:	4b10      	ldr	r3, [pc, #64]	@ (8006ce8 <TL_Init+0x48>)
 8006ca6:	4a11      	ldr	r2, [pc, #68]	@ (8006cec <TL_Init+0x4c>)
 8006ca8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006caa:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce8 <TL_Init+0x48>)
 8006cac:	4a10      	ldr	r2, [pc, #64]	@ (8006cf0 <TL_Init+0x50>)
 8006cae:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <TL_Init+0x48>)
 8006cb2:	4a10      	ldr	r2, [pc, #64]	@ (8006cf4 <TL_Init+0x54>)
 8006cb4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <TL_Init+0x48>)
 8006cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8006cf8 <TL_Init+0x58>)
 8006cba:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <TL_Init+0x48>)
 8006cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8006cfc <TL_Init+0x5c>)
 8006cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006cc2:	4b09      	ldr	r3, [pc, #36]	@ (8006ce8 <TL_Init+0x48>)
 8006cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8006d00 <TL_Init+0x60>)
 8006cc6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006cc8:	4b07      	ldr	r3, [pc, #28]	@ (8006ce8 <TL_Init+0x48>)
 8006cca:	4a0e      	ldr	r2, [pc, #56]	@ (8006d04 <TL_Init+0x64>)
 8006ccc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006cce:	4b06      	ldr	r3, [pc, #24]	@ (8006ce8 <TL_Init+0x48>)
 8006cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8006d08 <TL_Init+0x68>)
 8006cd2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006cd4:	4b04      	ldr	r3, [pc, #16]	@ (8006ce8 <TL_Init+0x48>)
 8006cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8006d0c <TL_Init+0x6c>)
 8006cd8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006cda:	4b03      	ldr	r3, [pc, #12]	@ (8006ce8 <TL_Init+0x48>)
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d10 <TL_Init+0x70>)
 8006cde:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006ce0:	f001 f8ec 	bl	8007ebc <HW_IPCC_Init>

  return;
 8006ce4:	bf00      	nop
}
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20030000 	.word	0x20030000
 8006cec:	20030028 	.word	0x20030028
 8006cf0:	20030048 	.word	0x20030048
 8006cf4:	20030058 	.word	0x20030058
 8006cf8:	20030068 	.word	0x20030068
 8006cfc:	20030070 	.word	0x20030070
 8006d00:	20030078 	.word	0x20030078
 8006d04:	20030080 	.word	0x20030080
 8006d08:	2003009c 	.word	0x2003009c
 8006d0c:	200300a0 	.word	0x200300a0
 8006d10:	200300ac 	.word	0x200300ac

08006d14 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8006d20:	4811      	ldr	r0, [pc, #68]	@ (8006d68 <TL_BLE_Init+0x54>)
 8006d22:	f000 fa27 	bl	8007174 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8006d26:	4b11      	ldr	r3, [pc, #68]	@ (8006d6c <TL_BLE_Init+0x58>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d70 <TL_BLE_Init+0x5c>)
 8006d40:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4a08      	ldr	r2, [pc, #32]	@ (8006d68 <TL_BLE_Init+0x54>)
 8006d46:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8006d48:	f001 f8ce 	bl	8007ee8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a08      	ldr	r2, [pc, #32]	@ (8006d74 <TL_BLE_Init+0x60>)
 8006d52:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4a07      	ldr	r2, [pc, #28]	@ (8006d78 <TL_BLE_Init+0x64>)
 8006d5a:	6013      	str	r3, [r2, #0]

  return 0;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	200300c8 	.word	0x200300c8
 8006d6c:	20030000 	.word	0x20030000
 8006d70:	20030a58 	.word	0x20030a58
 8006d74:	20000340 	.word	0x20000340
 8006d78:	20000344 	.word	0x20000344

08006d7c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006d88:	4b09      	ldr	r3, [pc, #36]	@ (8006db0 <TL_BLE_SendCmd+0x34>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006d92:	4b07      	ldr	r3, [pc, #28]	@ (8006db0 <TL_BLE_SendCmd+0x34>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f000 f96c 	bl	8007078 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006da0:	f001 f8ac 	bl	8007efc <HW_IPCC_BLE_SendCmd>

  return 0;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20030000 	.word	0x20030000

08006db4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006dba:	e01c      	b.n	8006df6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006dbc:	1d3b      	adds	r3, r7, #4
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4812      	ldr	r0, [pc, #72]	@ (8006e0c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006dc2:	f000 fa76 	bl	80072b2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7a5b      	ldrb	r3, [r3, #9]
 8006dca:	2b0f      	cmp	r3, #15
 8006dcc:	d003      	beq.n	8006dd6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7a5b      	ldrb	r3, [r3, #9]
 8006dd2:	2b0e      	cmp	r3, #14
 8006dd4:	d105      	bne.n	8006de2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	2002      	movs	r0, #2
 8006ddc:	f000 f94c 	bl	8007078 <OutputDbgTrace>
 8006de0:	e004      	b.n	8006dec <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4619      	mov	r1, r3
 8006de6:	2003      	movs	r0, #3
 8006de8:	f000 f946 	bl	8007078 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006dec:	4b08      	ldr	r3, [pc, #32]	@ (8006e10 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	4610      	mov	r0, r2
 8006df4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006df6:	4805      	ldr	r0, [pc, #20]	@ (8006e0c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006df8:	f000 f9cc 	bl	8007194 <LST_is_empty>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0dc      	beq.n	8006dbc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006e02:	bf00      	nop
}
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200300c8 	.word	0x200300c8
 8006e10:	20000340 	.word	0x20000340

08006e14 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006e18:	4b02      	ldr	r3, [pc, #8]	@ (8006e24 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4798      	blx	r3

  return;
 8006e1e:	bf00      	nop
}
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000344 	.word	0x20000344

08006e28 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006e34:	480d      	ldr	r0, [pc, #52]	@ (8006e6c <TL_SYS_Init+0x44>)
 8006e36:	f000 f99d 	bl	8007174 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <TL_SYS_Init+0x48>)
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4a08      	ldr	r2, [pc, #32]	@ (8006e6c <TL_SYS_Init+0x44>)
 8006e4c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8006e4e:	f001 f877 	bl	8007f40 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a07      	ldr	r2, [pc, #28]	@ (8006e74 <TL_SYS_Init+0x4c>)
 8006e58:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	4a06      	ldr	r2, [pc, #24]	@ (8006e78 <TL_SYS_Init+0x50>)
 8006e60:	6013      	str	r3, [r2, #0]

  return 0;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	200300d0 	.word	0x200300d0
 8006e70:	20030000 	.word	0x20030000
 8006e74:	20000348 	.word	0x20000348
 8006e78:	2000034c 	.word	0x2000034c

08006e7c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8006e88:	4b09      	ldr	r3, [pc, #36]	@ (8006eb0 <TL_SYS_SendCmd+0x34>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2210      	movs	r2, #16
 8006e90:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006e92:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <TL_SYS_SendCmd+0x34>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2004      	movs	r0, #4
 8006e9c:	f000 f8ec 	bl	8007078 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8006ea0:	f001 f858 	bl	8007f54 <HW_IPCC_SYS_SendCmd>

  return 0;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20030000 	.word	0x20030000

08006eb4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006eb8:	4b07      	ldr	r3, [pc, #28]	@ (8006ed8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	2005      	movs	r0, #5
 8006ec2:	f000 f8d9 	bl	8007078 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006ec6:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a03      	ldr	r2, [pc, #12]	@ (8006ed8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006ecc:	68d2      	ldr	r2, [r2, #12]
 8006ece:	6812      	ldr	r2, [r2, #0]
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3

  return;
 8006ed4:	bf00      	nop
}
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20030000 	.word	0x20030000
 8006edc:	20000348 	.word	0x20000348

08006ee0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006ee6:	e00e      	b.n	8006f06 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006ee8:	1d3b      	adds	r3, r7, #4
 8006eea:	4619      	mov	r1, r3
 8006eec:	480b      	ldr	r0, [pc, #44]	@ (8006f1c <HW_IPCC_SYS_EvtNot+0x3c>)
 8006eee:	f000 f9e0 	bl	80072b2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	2006      	movs	r0, #6
 8006ef8:	f000 f8be 	bl	8007078 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006efc:	4b08      	ldr	r3, [pc, #32]	@ (8006f20 <HW_IPCC_SYS_EvtNot+0x40>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4610      	mov	r0, r2
 8006f04:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006f06:	4805      	ldr	r0, [pc, #20]	@ (8006f1c <HW_IPCC_SYS_EvtNot+0x3c>)
 8006f08:	f000 f944 	bl	8007194 <LST_is_empty>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0ea      	beq.n	8006ee8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006f12:	bf00      	nop
}
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200300d0 	.word	0x200300d0
 8006f20:	2000034c 	.word	0x2000034c

08006f24 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8006f2c:	4817      	ldr	r0, [pc, #92]	@ (8006f8c <TL_MM_Init+0x68>)
 8006f2e:	f000 f921 	bl	8007174 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8006f32:	4817      	ldr	r0, [pc, #92]	@ (8006f90 <TL_MM_Init+0x6c>)
 8006f34:	f000 f91e 	bl	8007174 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8006f38:	4b16      	ldr	r3, [pc, #88]	@ (8006f94 <TL_MM_Init+0x70>)
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	4a16      	ldr	r2, [pc, #88]	@ (8006f98 <TL_MM_Init+0x74>)
 8006f3e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8006f40:	4b15      	ldr	r3, [pc, #84]	@ (8006f98 <TL_MM_Init+0x74>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6892      	ldr	r2, [r2, #8]
 8006f48:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8006f4a:	4b13      	ldr	r3, [pc, #76]	@ (8006f98 <TL_MM_Init+0x74>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	68d2      	ldr	r2, [r2, #12]
 8006f52:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8006f54:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <TL_MM_Init+0x74>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a0c      	ldr	r2, [pc, #48]	@ (8006f8c <TL_MM_Init+0x68>)
 8006f5a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f98 <TL_MM_Init+0x74>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6812      	ldr	r2, [r2, #0]
 8006f64:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8006f66:	4b0c      	ldr	r3, [pc, #48]	@ (8006f98 <TL_MM_Init+0x74>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6852      	ldr	r2, [r2, #4]
 8006f6e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006f70:	4b09      	ldr	r3, [pc, #36]	@ (8006f98 <TL_MM_Init+0x74>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6912      	ldr	r2, [r2, #16]
 8006f78:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8006f7a:	4b07      	ldr	r3, [pc, #28]	@ (8006f98 <TL_MM_Init+0x74>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6952      	ldr	r2, [r2, #20]
 8006f82:	619a      	str	r2, [r3, #24]

  return;
 8006f84:	bf00      	nop
}
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	200300b8 	.word	0x200300b8
 8006f90:	20000338 	.word	0x20000338
 8006f94:	20030000 	.word	0x20030000
 8006f98:	20000350 	.word	0x20000350

08006f9c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	4807      	ldr	r0, [pc, #28]	@ (8006fc4 <TL_MM_EvtDone+0x28>)
 8006fa8:	f000 f93c 	bl	8007224 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f000 f862 	bl	8007078 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006fb4:	4804      	ldr	r0, [pc, #16]	@ (8006fc8 <TL_MM_EvtDone+0x2c>)
 8006fb6:	f000 fff3 	bl	8007fa0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8006fba:	bf00      	nop
}
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000338 	.word	0x20000338
 8006fc8:	08006fcd 	.word	0x08006fcd

08006fcc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006fd2:	e00c      	b.n	8006fee <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006fd4:	1d3b      	adds	r3, r7, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	480a      	ldr	r0, [pc, #40]	@ (8007004 <SendFreeBuf+0x38>)
 8006fda:	f000 f96a 	bl	80072b2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006fde:	4b0a      	ldr	r3, [pc, #40]	@ (8007008 <SendFreeBuf+0x3c>)
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 f91b 	bl	8007224 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006fee:	4805      	ldr	r0, [pc, #20]	@ (8007004 <SendFreeBuf+0x38>)
 8006ff0:	f000 f8d0 	bl	8007194 <LST_is_empty>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0ec      	beq.n	8006fd4 <SendFreeBuf+0x8>
  }

  return;
 8006ffa:	bf00      	nop
}
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000338 	.word	0x20000338
 8007008:	20030000 	.word	0x20030000

0800700c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007010:	4805      	ldr	r0, [pc, #20]	@ (8007028 <TL_TRACES_Init+0x1c>)
 8007012:	f000 f8af 	bl	8007174 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007016:	4b05      	ldr	r3, [pc, #20]	@ (800702c <TL_TRACES_Init+0x20>)
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	4a03      	ldr	r2, [pc, #12]	@ (8007028 <TL_TRACES_Init+0x1c>)
 800701c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800701e:	f000 fff5 	bl	800800c <HW_IPCC_TRACES_Init>

  return;
 8007022:	bf00      	nop
}
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	200300c0 	.word	0x200300c0
 800702c:	20030000 	.word	0x20030000

08007030 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007036:	e008      	b.n	800704a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007038:	1d3b      	adds	r3, r7, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4808      	ldr	r0, [pc, #32]	@ (8007060 <HW_IPCC_TRACES_EvtNot+0x30>)
 800703e:	f000 f938 	bl	80072b2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f80d 	bl	8007064 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800704a:	4805      	ldr	r0, [pc, #20]	@ (8007060 <HW_IPCC_TRACES_EvtNot+0x30>)
 800704c:	f000 f8a2 	bl	8007194 <LST_is_empty>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f0      	beq.n	8007038 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007056:	bf00      	nop
}
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	200300c0 	.word	0x200300c0

08007064 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	2b06      	cmp	r3, #6
 8007088:	d845      	bhi.n	8007116 <OutputDbgTrace+0x9e>
 800708a:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <OutputDbgTrace+0x18>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070ad 	.word	0x080070ad
 8007094:	080070d1 	.word	0x080070d1
 8007098:	080070d7 	.word	0x080070d7
 800709c:	080070eb 	.word	0x080070eb
 80070a0:	080070f7 	.word	0x080070f7
 80070a4:	080070fd 	.word	0x080070fd
 80070a8:	0800710b 	.word	0x0800710b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	7a5b      	ldrb	r3, [r3, #9]
 80070b4:	2bff      	cmp	r3, #255	@ 0xff
 80070b6:	d005      	beq.n	80070c4 <OutputDbgTrace+0x4c>
 80070b8:	2bff      	cmp	r3, #255	@ 0xff
 80070ba:	dc05      	bgt.n	80070c8 <OutputDbgTrace+0x50>
 80070bc:	2b0e      	cmp	r3, #14
 80070be:	d005      	beq.n	80070cc <OutputDbgTrace+0x54>
 80070c0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80070c2:	e001      	b.n	80070c8 <OutputDbgTrace+0x50>
          break;
 80070c4:	bf00      	nop
 80070c6:	e027      	b.n	8007118 <OutputDbgTrace+0xa0>
          break;
 80070c8:	bf00      	nop
 80070ca:	e025      	b.n	8007118 <OutputDbgTrace+0xa0>
          break;
 80070cc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80070ce:	e023      	b.n	8007118 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80070d4:	e020      	b.n	8007118 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	7a5b      	ldrb	r3, [r3, #9]
 80070de:	2b0e      	cmp	r3, #14
 80070e0:	d001      	beq.n	80070e6 <OutputDbgTrace+0x6e>
 80070e2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80070e4:	e000      	b.n	80070e8 <OutputDbgTrace+0x70>
          break;
 80070e6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80070e8:	e016      	b.n	8007118 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	7a5b      	ldrb	r3, [r3, #9]
 80070f2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80070f4:	e010      	b.n	8007118 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80070fa:	e00d      	b.n	8007118 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8007106:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007108:	e006      	b.n	8007118 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	7a5b      	ldrb	r3, [r3, #9]
 8007112:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007114:	e000      	b.n	8007118 <OutputDbgTrace+0xa0>

    default:
      break;
 8007116:	bf00      	nop
  }

  return;
 8007118:	bf00      	nop
}
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800712e:	4b0f      	ldr	r3, [pc, #60]	@ (800716c <OTP_Read+0x48>)
 8007130:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007132:	e002      	b.n	800713a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3b08      	subs	r3, #8
 8007138:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3307      	adds	r3, #7
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	79fa      	ldrb	r2, [r7, #7]
 8007142:	429a      	cmp	r2, r3
 8007144:	d003      	beq.n	800714e <OTP_Read+0x2a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a09      	ldr	r2, [pc, #36]	@ (8007170 <OTP_Read+0x4c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d1f2      	bne.n	8007134 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3307      	adds	r3, #7
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	79fa      	ldrb	r2, [r7, #7]
 8007156:	429a      	cmp	r2, r3
 8007158:	d001      	beq.n	800715e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800715e:	68fb      	ldr	r3, [r7, #12]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	1fff73f8 	.word	0x1fff73f8
 8007170:	1fff7000 	.word	0x1fff7000

08007174 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	605a      	str	r2, [r3, #4]
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800719c:	f3ef 8310 	mrs	r3, PRIMASK
 80071a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80071a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80071a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80071a6:	b672      	cpsid	i
}
 80071a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d102      	bne.n	80071ba <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
 80071b8:	e001      	b.n	80071be <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f383 8810 	msr	PRIMASK, r3
}
 80071c8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071e2:	f3ef 8310 	mrs	r3, PRIMASK
 80071e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80071e8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80071ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80071ec:	b672      	cpsid	i
}
 80071ee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f383 8810 	msr	PRIMASK, r3
}
 8007216:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007218:	bf00      	nop
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800722e:	f3ef 8310 	mrs	r3, PRIMASK
 8007232:	60fb      	str	r3, [r7, #12]
  return(result);
 8007234:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007238:	b672      	cpsid	i
}
 800723a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f383 8810 	msr	PRIMASK, r3
}
 8007262:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007278:	f3ef 8310 	mrs	r3, PRIMASK
 800727c:	60fb      	str	r3, [r7, #12]
  return(result);
 800727e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007282:	b672      	cpsid	i
}
 8007284:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6852      	ldr	r2, [r2, #4]
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f383 8810 	msr	PRIMASK, r3
}
 80072a4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072bc:	f3ef 8310 	mrs	r3, PRIMASK
 80072c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80072c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80072c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072c6:	b672      	cpsid	i
}
 80072c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff ffca 	bl	8007270 <LST_remove_node>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f383 8810 	msr	PRIMASK, r3
}
 80072e6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80072e8:	bf00      	nop
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80072f4:	4b03      	ldr	r3, [pc, #12]	@ (8007304 <LL_FLASH_GetUDN+0x14>)
 80072f6:	681b      	ldr	r3, [r3, #0]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	1fff7580 	.word	0x1fff7580

08007308 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800730c:	4b03      	ldr	r3, [pc, #12]	@ (800731c <LL_FLASH_GetDeviceID+0x14>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	b2db      	uxtb	r3, r3
}
 8007312:	4618      	mov	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	1fff7584 	.word	0x1fff7584

08007320 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007324:	4b03      	ldr	r3, [pc, #12]	@ (8007334 <LL_FLASH_GetSTCompanyID+0x14>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	0a1b      	lsrs	r3, r3, #8
}
 800732a:	4618      	mov	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	1fff7584 	.word	0x1fff7584

08007338 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007338:	b5b0      	push	{r4, r5, r7, lr}
 800733a:	b090      	sub	sp, #64	@ 0x40
 800733c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800733e:	2392      	movs	r3, #146	@ 0x92
 8007340:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007344:	4b25      	ldr	r3, [pc, #148]	@ (80073dc <APP_BLE_Init+0xa4>)
 8007346:	1d3c      	adds	r4, r7, #4
 8007348:	461d      	mov	r5, r3
 800734a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800734c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800734e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800735a:	c403      	stmia	r4!, {r0, r1}
 800735c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800735e:	f000 f921 	bl	80075a4 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007362:	2101      	movs	r1, #1
 8007364:	2002      	movs	r0, #2
 8007366:	f000 fe79 	bl	800805c <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800736a:	4a1d      	ldr	r2, [pc, #116]	@ (80073e0 <APP_BLE_Init+0xa8>)
 800736c:	2100      	movs	r1, #0
 800736e:	2002      	movs	r0, #2
 8007370:	f000 ffa0 	bl	80082b4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007374:	1d3b      	adds	r3, r7, #4
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff f8c6 	bl	8006508 <SHCI_C2_BLE_Init>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007382:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800738a:	f7fa fac2 	bl	8001912 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800738e:	f000 f91f 	bl	80075d0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007392:	f7ff f813 	bl	80063bc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007396:	4b13      	ldr	r3, [pc, #76]	@ (80073e4 <APP_BLE_Init+0xac>)
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800739e:	4b11      	ldr	r3, [pc, #68]	@ (80073e4 <APP_BLE_Init+0xac>)
 80073a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80073a4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80073a6:	4a10      	ldr	r2, [pc, #64]	@ (80073e8 <APP_BLE_Init+0xb0>)
 80073a8:	2100      	movs	r1, #0
 80073aa:	2001      	movs	r0, #1
 80073ac:	f000 ff82 	bl	80082b4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80073b0:	2006      	movs	r0, #6
 80073b2:	f7fe fe77 	bl	80060a4 <aci_hal_set_radio_activity_mask>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80073bc:	f000 facb 	bl	8007956 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80073c0:	4b08      	ldr	r3, [pc, #32]	@ (80073e4 <APP_BLE_Init+0xac>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80073c6:	4b07      	ldr	r3, [pc, #28]	@ (80073e4 <APP_BLE_Init+0xac>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80073cc:	2001      	movs	r0, #1
 80073ce:	f000 f9b3 	bl	8007738 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80073d2:	bf00      	nop
}
 80073d4:	3740      	adds	r7, #64	@ 0x40
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bdb0      	pop	{r4, r5, r7, pc}
 80073da:	bf00      	nop
 80073dc:	08009444 	.word	0x08009444
 80073e0:	08006725 	.word	0x08006725
 80073e4:	2000035c 	.word	0x2000035c
 80073e8:	08007821 	.word	0x08007821

080073ec <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	@ 0x30
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80073f4:	2392      	movs	r3, #146	@ 0x92
 80073f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3301      	adds	r3, #1
 80073fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2bff      	cmp	r3, #255	@ 0xff
 8007406:	d05c      	beq.n	80074c2 <SVCCTL_App_Notification+0xd6>
 8007408:	2bff      	cmp	r3, #255	@ 0xff
 800740a:	f300 80bd 	bgt.w	8007588 <SVCCTL_App_Notification+0x19c>
 800740e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007410:	d02b      	beq.n	800746a <SVCCTL_App_Notification+0x7e>
 8007412:	2b3e      	cmp	r3, #62	@ 0x3e
 8007414:	f300 80b8 	bgt.w	8007588 <SVCCTL_App_Notification+0x19c>
 8007418:	2b05      	cmp	r3, #5
 800741a:	d002      	beq.n	8007422 <SVCCTL_App_Notification+0x36>
 800741c:	2b10      	cmp	r3, #16
 800741e:	d020      	beq.n	8007462 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007420:	e0b2      	b.n	8007588 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007424:	3302      	adds	r3, #2
 8007426:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800742e:	b29a      	uxth	r2, r3
 8007430:	4b59      	ldr	r3, [pc, #356]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 8007432:	8adb      	ldrh	r3, [r3, #22]
 8007434:	429a      	cmp	r2, r3
 8007436:	d106      	bne.n	8007446 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007438:	4b57      	ldr	r3, [pc, #348]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 800743a:	2200      	movs	r2, #0
 800743c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800743e:	4b56      	ldr	r3, [pc, #344]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007446:	2001      	movs	r0, #1
 8007448:	f000 f976 	bl	8007738 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800744c:	4b53      	ldr	r3, [pc, #332]	@ (800759c <SVCCTL_App_Notification+0x1b0>)
 800744e:	2201      	movs	r2, #1
 8007450:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007452:	4b51      	ldr	r3, [pc, #324]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 8007454:	8ada      	ldrh	r2, [r3, #22]
 8007456:	4b51      	ldr	r3, [pc, #324]	@ (800759c <SVCCTL_App_Notification+0x1b0>)
 8007458:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800745a:	4850      	ldr	r0, [pc, #320]	@ (800759c <SVCCTL_App_Notification+0x1b0>)
 800745c:	f000 fa67 	bl	800792e <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007460:	e095      	b.n	800758e <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8007462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007464:	3302      	adds	r3, #2
 8007466:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8007468:	e091      	b.n	800758e <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	3302      	adds	r3, #2
 800746e:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d001      	beq.n	800747c <SVCCTL_App_Notification+0x90>
 8007478:	2b03      	cmp	r3, #3
          break;
 800747a:	e021      	b.n	80074c0 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	3301      	adds	r3, #1
 8007480:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007482:	4b45      	ldr	r3, [pc, #276]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 8007484:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007488:	2b04      	cmp	r3, #4
 800748a:	d104      	bne.n	8007496 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800748c:	4b42      	ldr	r3, [pc, #264]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 800748e:	2206      	movs	r2, #6
 8007490:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007494:	e003      	b.n	800749e <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007496:	4b40      	ldr	r3, [pc, #256]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 8007498:	2205      	movs	r2, #5
 800749a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 80074a8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80074aa:	4b3c      	ldr	r3, [pc, #240]	@ (800759c <SVCCTL_App_Notification+0x1b0>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80074b0:	4b39      	ldr	r3, [pc, #228]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 80074b2:	8ada      	ldrh	r2, [r3, #22]
 80074b4:	4b39      	ldr	r3, [pc, #228]	@ (800759c <SVCCTL_App_Notification+0x1b0>)
 80074b6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80074b8:	4838      	ldr	r0, [pc, #224]	@ (800759c <SVCCTL_App_Notification+0x1b0>)
 80074ba:	f000 fa38 	bl	800792e <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80074be:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80074c0:	e065      	b.n	800758e <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	3302      	adds	r3, #2
 80074c6:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d048      	beq.n	8007568 <SVCCTL_App_Notification+0x17c>
 80074d6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80074da:	4293      	cmp	r3, r2
 80074dc:	dc56      	bgt.n	800758c <SVCCTL_App_Notification+0x1a0>
 80074de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e2:	d04b      	beq.n	800757c <SVCCTL_App_Notification+0x190>
 80074e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e8:	dc50      	bgt.n	800758c <SVCCTL_App_Notification+0x1a0>
 80074ea:	f240 420a 	movw	r2, #1034	@ 0x40a
 80074ee:	4293      	cmp	r3, r2
 80074f0:	dc4c      	bgt.n	800758c <SVCCTL_App_Notification+0x1a0>
 80074f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f6:	dc04      	bgt.n	8007502 <SVCCTL_App_Notification+0x116>
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d041      	beq.n	8007580 <SVCCTL_App_Notification+0x194>
 80074fc:	2b06      	cmp	r3, #6
 80074fe:	d039      	beq.n	8007574 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007500:	e044      	b.n	800758c <SVCCTL_App_Notification+0x1a0>
 8007502:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007506:	2b09      	cmp	r3, #9
 8007508:	d840      	bhi.n	800758c <SVCCTL_App_Notification+0x1a0>
 800750a:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <SVCCTL_App_Notification+0x124>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	08007561 	.word	0x08007561
 8007514:	08007539 	.word	0x08007539
 8007518:	0800758d 	.word	0x0800758d
 800751c:	0800758d 	.word	0x0800758d
 8007520:	0800758d 	.word	0x0800758d
 8007524:	0800758d 	.word	0x0800758d
 8007528:	08007585 	.word	0x08007585
 800752c:	0800758d 	.word	0x0800758d
 8007530:	0800754d 	.word	0x0800754d
 8007534:	08007585 	.word	0x08007585
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007538:	4b17      	ldr	r3, [pc, #92]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 800753a:	8adb      	ldrh	r3, [r3, #22]
 800753c:	4918      	ldr	r1, [pc, #96]	@ (80075a0 <SVCCTL_App_Notification+0x1b4>)
 800753e:	4618      	mov	r0, r3
 8007540:	f7fd ffb2 	bl	80054a8 <aci_gap_pass_key_resp>
 8007544:	4603      	mov	r3, r0
 8007546:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800754a:	e01c      	b.n	8007586 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800754c:	4b12      	ldr	r3, [pc, #72]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 800754e:	8adb      	ldrh	r3, [r3, #22]
 8007550:	2101      	movs	r1, #1
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe f952 	bl	80057fc <aci_gap_numeric_comparison_value_confirm_yesno>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800755e:	e012      	b.n	8007586 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	3302      	adds	r3, #2
 8007564:	623b      	str	r3, [r7, #32]
          break;
 8007566:	e00e      	b.n	8007586 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007568:	4b0b      	ldr	r3, [pc, #44]	@ (8007598 <SVCCTL_App_Notification+0x1ac>)
 800756a:	8adb      	ldrh	r3, [r3, #22]
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fc58 	bl	8005e22 <aci_gatt_confirm_indication>
        break;
 8007572:	e008      	b.n	8007586 <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	3302      	adds	r3, #2
 8007578:	61fb      	str	r3, [r7, #28]
          break;
 800757a:	e004      	b.n	8007586 <SVCCTL_App_Notification+0x19a>
          break;
 800757c:	bf00      	nop
 800757e:	e005      	b.n	800758c <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007580:	bf00      	nop
 8007582:	e003      	b.n	800758c <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007584:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007586:	e001      	b.n	800758c <SVCCTL_App_Notification+0x1a0>
      break;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800758c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800758e:	2301      	movs	r3, #1
}
 8007590:	4618      	mov	r0, r3
 8007592:	3730      	adds	r7, #48	@ 0x30
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	2000035c 	.word	0x2000035c
 800759c:	200003e0 	.word	0x200003e0
 80075a0:	0001b207 	.word	0x0001b207

080075a4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80075aa:	4b06      	ldr	r3, [pc, #24]	@ (80075c4 <Ble_Tl_Init+0x20>)
 80075ac:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80075ae:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <Ble_Tl_Init+0x24>)
 80075b0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80075b2:	463b      	mov	r3, r7
 80075b4:	4619      	mov	r1, r3
 80075b6:	4805      	ldr	r0, [pc, #20]	@ (80075cc <Ble_Tl_Init+0x28>)
 80075b8:	f7ff f898 	bl	80066ec <hci_init>

  return;
 80075bc:	bf00      	nop
}
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	200300d8 	.word	0x200300d8
 80075c8:	080078d1 	.word	0x080078d1
 80075cc:	08007899 	.word	0x08007899

080075d0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80075d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d2:	b08d      	sub	sp, #52	@ 0x34
 80075d4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80075d6:	2300      	movs	r3, #0
 80075d8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80075da:	2392      	movs	r3, #146	@ 0x92
 80075dc:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80075de:	f7fe fdb5 	bl	800614c <hci_reset>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80075e6:	f000 f8d7 	bl	8007798 <BleGetBdAddress>
 80075ea:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	2106      	movs	r1, #6
 80075f0:	2000      	movs	r0, #0
 80075f2:	f7fe fc6b 	bl	8005ecc <aci_hal_write_config_data>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80075fa:	4a4a      	ldr	r2, [pc, #296]	@ (8007724 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80075fc:	2110      	movs	r1, #16
 80075fe:	2018      	movs	r0, #24
 8007600:	f7fe fc64 	bl	8005ecc <aci_hal_write_config_data>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007608:	4a47      	ldr	r2, [pc, #284]	@ (8007728 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800760a:	2110      	movs	r1, #16
 800760c:	2008      	movs	r0, #8
 800760e:	f7fe fc5d 	bl	8005ecc <aci_hal_write_config_data>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007616:	2118      	movs	r1, #24
 8007618:	2001      	movs	r0, #1
 800761a:	f7fe fcdc 	bl	8005fd6 <aci_hal_set_tx_power_level>
 800761e:	4603      	mov	r3, r0
 8007620:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007622:	f7fe f952 	bl	80058ca <aci_gatt_init>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	f043 0301 	orr.w	r3, r3, #1
 8007634:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01f      	beq.n	800767c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800763c:	4b3b      	ldr	r3, [pc, #236]	@ (800772c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800763e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007640:	1dba      	adds	r2, r7, #6
 8007642:	7bf8      	ldrb	r0, [r7, #15]
 8007644:	1cbb      	adds	r3, r7, #2
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	1d3b      	adds	r3, r7, #4
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	2208      	movs	r2, #8
 8007650:	2100      	movs	r1, #0
 8007652:	f7fd ff90 	bl	8005576 <aci_gap_init>
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800765a:	88fc      	ldrh	r4, [r7, #6]
 800765c:	88bd      	ldrh	r5, [r7, #4]
 800765e:	68b8      	ldr	r0, [r7, #8]
 8007660:	f7f8 fd8e 	bl	8000180 <strlen>
 8007664:	4603      	mov	r3, r0
 8007666:	b2da      	uxtb	r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	4613      	mov	r3, r2
 800766e:	2200      	movs	r2, #0
 8007670:	4629      	mov	r1, r5
 8007672:	4620      	mov	r0, r4
 8007674:	f7fe fb2c 	bl	8005cd0 <aci_gatt_update_char_value>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800767c:	88f8      	ldrh	r0, [r7, #6]
 800767e:	8879      	ldrh	r1, [r7, #2]
 8007680:	463b      	mov	r3, r7
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	2302      	movs	r3, #2
 8007686:	2200      	movs	r2, #0
 8007688:	f7fe fb22 	bl	8005cd0 <aci_gatt_update_char_value>
 800768c:	4603      	mov	r3, r0
 800768e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007690:	2202      	movs	r2, #2
 8007692:	2102      	movs	r1, #2
 8007694:	2000      	movs	r0, #0
 8007696:	f7fe fd7d 	bl	8006194 <hci_le_set_default_phy>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800769e:	4b24      	ldr	r3, [pc, #144]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80076a4:	4b22      	ldr	r3, [pc, #136]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fd fde5 	bl	8005278 <aci_gap_set_io_capability>
 80076ae:	4603      	mov	r3, r0
 80076b0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80076b2:	4b1f      	ldr	r3, [pc, #124]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076b4:	2201      	movs	r2, #1
 80076b6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80076b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076ba:	2208      	movs	r2, #8
 80076bc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80076be:	4b1c      	ldr	r3, [pc, #112]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076c0:	2210      	movs	r2, #16
 80076c2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80076c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80076ca:	4b19      	ldr	r3, [pc, #100]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076cc:	4a19      	ldr	r2, [pc, #100]	@ (8007734 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80076ce:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80076d0:	4b17      	ldr	r3, [pc, #92]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80076d6:	4b16      	ldr	r3, [pc, #88]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076d8:	789c      	ldrb	r4, [r3, #2]
 80076da:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076dc:	785d      	ldrb	r5, [r3, #1]
 80076de:	4b14      	ldr	r3, [pc, #80]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076e0:	791b      	ldrb	r3, [r3, #4]
 80076e2:	4a13      	ldr	r2, [pc, #76]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076e4:	7952      	ldrb	r2, [r2, #5]
 80076e6:	4912      	ldr	r1, [pc, #72]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076e8:	78c9      	ldrb	r1, [r1, #3]
 80076ea:	4811      	ldr	r0, [pc, #68]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80076ec:	6880      	ldr	r0, [r0, #8]
 80076ee:	2600      	movs	r6, #0
 80076f0:	9604      	str	r6, [sp, #16]
 80076f2:	9003      	str	r0, [sp, #12]
 80076f4:	9102      	str	r1, [sp, #8]
 80076f6:	9201      	str	r2, [sp, #4]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	2300      	movs	r3, #0
 80076fc:	2201      	movs	r2, #1
 80076fe:	4629      	mov	r1, r5
 8007700:	4620      	mov	r0, r4
 8007702:	f7fd fe0d 	bl	8005320 <aci_gap_set_authentication_requirement>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800770a:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800770c:	789b      	ldrb	r3, [r3, #2]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007712:	f7fe f84f 	bl	80057b4 <aci_gap_configure_filter_accept_list>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007722:	bf00      	nop
 8007724:	080096d8 	.word	0x080096d8
 8007728:	080096e8 	.word	0x080096e8
 800772c:	08009480 	.word	0x08009480
 8007730:	2000035c 	.word	0x2000035c
 8007734:	0001b207 	.word	0x0001b207

08007738 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08c      	sub	sp, #48	@ 0x30
 800773c:	af08      	add	r7, sp, #32
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007742:	2392      	movs	r3, #146	@ 0x92
 8007744:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007746:	4a12      	ldr	r2, [pc, #72]	@ (8007790 <Adv_Request+0x58>)
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800774e:	2300      	movs	r3, #0
 8007750:	9306      	str	r3, [sp, #24]
 8007752:	2300      	movs	r3, #0
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	2300      	movs	r3, #0
 8007758:	9304      	str	r3, [sp, #16]
 800775a:	2300      	movs	r3, #0
 800775c:	9303      	str	r3, [sp, #12]
 800775e:	2300      	movs	r3, #0
 8007760:	9302      	str	r3, [sp, #8]
 8007762:	2300      	movs	r3, #0
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	2300      	movs	r3, #0
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	2300      	movs	r3, #0
 800776c:	22a0      	movs	r2, #160	@ 0xa0
 800776e:	2180      	movs	r1, #128	@ 0x80
 8007770:	2000      	movs	r0, #0
 8007772:	f7fd fc87 	bl	8005084 <aci_gap_set_discoverable>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800777a:	4906      	ldr	r1, [pc, #24]	@ (8007794 <Adv_Request+0x5c>)
 800777c:	200e      	movs	r0, #14
 800777e:	f7fd ffa7 	bl	80056d0 <aci_gap_update_adv_data>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007786:	bf00      	nop
}
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	2000035c 	.word	0x2000035c
 8007794:	20000050 	.word	0x20000050

08007798 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800779e:	f7ff fda7 	bl	80072f0 <LL_FLASH_GetUDN>
 80077a2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077aa:	d023      	beq.n	80077f4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80077ac:	f7ff fdb8 	bl	8007320 <LL_FLASH_GetSTCompanyID>
 80077b0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80077b2:	f7ff fda9 	bl	8007308 <LL_FLASH_GetDeviceID>
 80077b6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	4b16      	ldr	r3, [pc, #88]	@ (8007818 <BleGetBdAddress+0x80>)
 80077be:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	4b14      	ldr	r3, [pc, #80]	@ (8007818 <BleGetBdAddress+0x80>)
 80077c8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	4b12      	ldr	r3, [pc, #72]	@ (8007818 <BleGetBdAddress+0x80>)
 80077d0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	4b10      	ldr	r3, [pc, #64]	@ (8007818 <BleGetBdAddress+0x80>)
 80077d8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	0a1b      	lsrs	r3, r3, #8
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <BleGetBdAddress+0x80>)
 80077e2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	0c1b      	lsrs	r3, r3, #16
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007818 <BleGetBdAddress+0x80>)
 80077ec:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80077ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <BleGetBdAddress+0x80>)
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	e00b      	b.n	800780c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80077f4:	2000      	movs	r0, #0
 80077f6:	f7ff fc95 	bl	8007124 <OTP_Read>
 80077fa:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	e001      	b.n	800780c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007808:	4b04      	ldr	r3, [pc, #16]	@ (800781c <BleGetBdAddress+0x84>)
 800780a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000354 	.word	0x20000354
 800781c:	080096d0 	.word	0x080096d0

08007820 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007826:	4b0a      	ldr	r3, [pc, #40]	@ (8007850 <Adv_Cancel+0x30>)
 8007828:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800782c:	2b05      	cmp	r3, #5
 800782e:	d00a      	beq.n	8007846 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007830:	2392      	movs	r3, #146	@ 0x92
 8007832:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007834:	f7fd fc02 	bl	800503c <aci_gap_set_non_discoverable>
 8007838:	4603      	mov	r3, r0
 800783a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800783c:	4b04      	ldr	r3, [pc, #16]	@ (8007850 <Adv_Cancel+0x30>)
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007844:	bf00      	nop
 8007846:	bf00      	nop
}
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2000035c 	.word	0x2000035c

08007854 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800785c:	2100      	movs	r1, #0
 800785e:	2002      	movs	r0, #2
 8007860:	f000 fd4a 	bl	80082f8 <UTIL_SEQ_SetTask>

  return;
 8007864:	bf00      	nop
}
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007874:	2001      	movs	r0, #1
 8007876:	f000 fdab 	bl	80083d0 <UTIL_SEQ_SetEvt>

  return;
 800787a:	bf00      	nop
}
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800788a:	2001      	movs	r0, #1
 800788c:	f000 fdc0 	bl	8008410 <UTIL_SEQ_WaitEvt>

  return;
 8007890:	bf00      	nop
}
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	3308      	adds	r3, #8
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fdd8 	bl	8006460 <SVCCTL_UserEvtRx>
 80078b0:	4603      	mov	r3, r0
 80078b2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80078c0:	e003      	b.n	80078ca <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
  return;
 80078c8:	bf00      	nop
}
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <BLE_StatusNot+0x16>
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d006      	beq.n	80078f2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80078e4:	e00b      	b.n	80078fe <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80078e6:	2303      	movs	r3, #3
 80078e8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fd30 	bl	8008350 <UTIL_SEQ_PauseTask>
      break;
 80078f0:	e005      	b.n	80078fe <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80078f2:	2303      	movs	r3, #3
 80078f4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fd4a 	bl	8008390 <UTIL_SEQ_ResumeTask>
      break;
 80078fc:	bf00      	nop
  }

  return;
 80078fe:	bf00      	nop
}
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <Custom_STM_App_Notification+0x16>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d002      	beq.n	8007920 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800791a:	e002      	b.n	8007922 <Custom_STM_App_Notification+0x1c>
      break;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <Custom_STM_App_Notification+0x1c>
      break;
 8007920:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007922:	bf00      	nop
}
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <Custom_APP_Notification+0x16>
 800793e:	2b01      	cmp	r3, #1
 8007940:	d002      	beq.n	8007948 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007942:	e002      	b.n	800794a <Custom_APP_Notification+0x1c>
      break;
 8007944:	bf00      	nop
 8007946:	e000      	b.n	800794a <Custom_APP_Notification+0x1c>
      break;
 8007948:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800794a:	bf00      	nop
}
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007956:	b480      	push	{r7}
 8007958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800795a:	bf00      	nop
}
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08e      	sub	sp, #56	@ 0x38
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800796c:	2300      	movs	r3, #0
 800796e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3301      	adds	r3, #1
 8007976:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2bff      	cmp	r3, #255	@ 0xff
 800797e:	f040 808d 	bne.w	8007a9c <Custom_STM_Event_Handler+0x138>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	3302      	adds	r3, #2
 8007986:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8007992:	2b1a      	cmp	r3, #26
 8007994:	d87e      	bhi.n	8007a94 <Custom_STM_Event_Handler+0x130>
 8007996:	a201      	add	r2, pc, #4	@ (adr r2, 800799c <Custom_STM_Event_Handler+0x38>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	08007a09 	.word	0x08007a09
 80079a0:	08007a95 	.word	0x08007a95
 80079a4:	08007a95 	.word	0x08007a95
 80079a8:	08007a95 	.word	0x08007a95
 80079ac:	08007a95 	.word	0x08007a95
 80079b0:	08007a95 	.word	0x08007a95
 80079b4:	08007a95 	.word	0x08007a95
 80079b8:	08007a95 	.word	0x08007a95
 80079bc:	08007a95 	.word	0x08007a95
 80079c0:	08007a95 	.word	0x08007a95
 80079c4:	08007a95 	.word	0x08007a95
 80079c8:	08007a95 	.word	0x08007a95
 80079cc:	08007a95 	.word	0x08007a95
 80079d0:	08007a95 	.word	0x08007a95
 80079d4:	08007a95 	.word	0x08007a95
 80079d8:	08007a95 	.word	0x08007a95
 80079dc:	08007a95 	.word	0x08007a95
 80079e0:	08007a95 	.word	0x08007a95
 80079e4:	08007a95 	.word	0x08007a95
 80079e8:	08007a95 	.word	0x08007a95
 80079ec:	08007a95 	.word	0x08007a95
 80079f0:	08007a95 	.word	0x08007a95
 80079f4:	08007a95 	.word	0x08007a95
 80079f8:	08007a95 	.word	0x08007a95
 80079fc:	08007a95 	.word	0x08007a95
 8007a00:	08007a95 	.word	0x08007a95
 8007a04:	08007a77 	.word	0x08007a77
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0a:	3302      	adds	r3, #2
 8007a0c:	627b      	str	r3, [r7, #36]	@ 0x24
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	885b      	ldrh	r3, [r3, #2]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	4b25      	ldr	r3, [pc, #148]	@ (8007aac <Custom_STM_Event_Handler+0x148>)
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d13b      	bne.n	8007a98 <Custom_STM_Event_Handler+0x134>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            uint8_t *bluetooth_data = attribute_modified->Attr_Data;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	3308      	adds	r3, #8
 8007a2a:	623b      	str	r3, [r7, #32]
            uint16_t data_length = attribute_modified->Attr_Data_Length;
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	799a      	ldrb	r2, [r3, #6]
 8007a30:	79db      	ldrb	r3, [r3, #7]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	4313      	orrs	r3, r2
 8007a36:	83fb      	strh	r3, [r7, #30]
            printf("Received BLE Data (Length: %d): ", data_length);
 8007a38:	8bfb      	ldrh	r3, [r7, #30]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	481c      	ldr	r0, [pc, #112]	@ (8007ab0 <Custom_STM_Event_Handler+0x14c>)
 8007a3e:	f000 fe19 	bl	8008674 <iprintf>
            for (uint16_t i = 0; i < data_length; i++) {
 8007a42:	2300      	movs	r3, #0
 8007a44:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007a46:	e00a      	b.n	8007a5e <Custom_STM_Event_Handler+0xfa>
              printf("%02X ", bluetooth_data[i]); // Heksadecymalny format
 8007a48:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007a4a:	6a3a      	ldr	r2, [r7, #32]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	4619      	mov	r1, r3
 8007a52:	4818      	ldr	r0, [pc, #96]	@ (8007ab4 <Custom_STM_Event_Handler+0x150>)
 8007a54:	f000 fe0e 	bl	8008674 <iprintf>
            for (uint16_t i = 0; i < data_length; i++) {
 8007a58:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007a5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007a60:	8bfb      	ldrh	r3, [r7, #30]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d3f0      	bcc.n	8007a48 <Custom_STM_Event_Handler+0xe4>
            }
            printf("\n");
 8007a66:	200a      	movs	r0, #10
 8007a68:	f000 fe16 	bl	8008698 <putchar>

            HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	4812      	ldr	r0, [pc, #72]	@ (8007ab8 <Custom_STM_Event_Handler+0x154>)
 8007a70:	f7fa feb0 	bl	80027d4 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8007a74:	e010      	b.n	8007a98 <Custom_STM_Event_Handler+0x134>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8007a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a78:	3302      	adds	r3, #2
 8007a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8007a88:	f107 0308 	add.w	r3, r7, #8
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff ff3a 	bl	8007906 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8007a92:	e002      	b.n	8007a9a <Custom_STM_Event_Handler+0x136>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8007a94:	bf00      	nop
 8007a96:	e002      	b.n	8007a9e <Custom_STM_Event_Handler+0x13a>
          break;
 8007a98:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007a9a:	e000      	b.n	8007a9e <Custom_STM_Event_Handler+0x13a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8007a9c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8007a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3738      	adds	r7, #56	@ 0x38
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	200003e4 	.word	0x200003e4
 8007ab0:	0800948c 	.word	0x0800948c
 8007ab4:	080094b0 	.word	0x080094b0
 8007ab8:	48000400 	.word	0x48000400

08007abc <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08c      	sub	sp, #48	@ 0x30
 8007ac0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ac2:	2392      	movs	r3, #146	@ 0x92
 8007ac4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8007ac6:	4834      	ldr	r0, [pc, #208]	@ (8007b98 <SVCCTL_InitCustomSvc+0xdc>)
 8007ac8:	f7fe fcb0 	bl	800642c <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8007acc:	2303      	movs	r3, #3
 8007ace:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8007ad0:	238f      	movs	r3, #143	@ 0x8f
 8007ad2:	713b      	strb	r3, [r7, #4]
 8007ad4:	23e5      	movs	r3, #229	@ 0xe5
 8007ad6:	717b      	strb	r3, [r7, #5]
 8007ad8:	23b3      	movs	r3, #179	@ 0xb3
 8007ada:	71bb      	strb	r3, [r7, #6]
 8007adc:	23d5      	movs	r3, #213	@ 0xd5
 8007ade:	71fb      	strb	r3, [r7, #7]
 8007ae0:	232e      	movs	r3, #46	@ 0x2e
 8007ae2:	723b      	strb	r3, [r7, #8]
 8007ae4:	237f      	movs	r3, #127	@ 0x7f
 8007ae6:	727b      	strb	r3, [r7, #9]
 8007ae8:	234a      	movs	r3, #74	@ 0x4a
 8007aea:	72bb      	strb	r3, [r7, #10]
 8007aec:	2398      	movs	r3, #152	@ 0x98
 8007aee:	72fb      	strb	r3, [r7, #11]
 8007af0:	232a      	movs	r3, #42	@ 0x2a
 8007af2:	733b      	strb	r3, [r7, #12]
 8007af4:	2348      	movs	r3, #72	@ 0x48
 8007af6:	737b      	strb	r3, [r7, #13]
 8007af8:	237a      	movs	r3, #122	@ 0x7a
 8007afa:	73bb      	strb	r3, [r7, #14]
 8007afc:	23cc      	movs	r3, #204	@ 0xcc
 8007afe:	73fb      	strb	r3, [r7, #15]
 8007b00:	2300      	movs	r3, #0
 8007b02:	743b      	strb	r3, [r7, #16]
 8007b04:	2300      	movs	r3, #0
 8007b06:	747b      	strb	r3, [r7, #17]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	74bb      	strb	r3, [r7, #18]
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8007b10:	7dbb      	ldrb	r3, [r7, #22]
 8007b12:	1d39      	adds	r1, r7, #4
 8007b14:	4a21      	ldr	r2, [pc, #132]	@ (8007b9c <SVCCTL_InitCustomSvc+0xe0>)
 8007b16:	9200      	str	r2, [sp, #0]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	2002      	movs	r0, #2
 8007b1c:	f7fd fefa 	bl	8005914 <aci_gatt_add_service>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8007b24:	2319      	movs	r3, #25
 8007b26:	713b      	strb	r3, [r7, #4]
 8007b28:	23ed      	movs	r3, #237	@ 0xed
 8007b2a:	717b      	strb	r3, [r7, #5]
 8007b2c:	2382      	movs	r3, #130	@ 0x82
 8007b2e:	71bb      	strb	r3, [r7, #6]
 8007b30:	23ae      	movs	r3, #174	@ 0xae
 8007b32:	71fb      	strb	r3, [r7, #7]
 8007b34:	23ed      	movs	r3, #237	@ 0xed
 8007b36:	723b      	strb	r3, [r7, #8]
 8007b38:	2321      	movs	r3, #33	@ 0x21
 8007b3a:	727b      	strb	r3, [r7, #9]
 8007b3c:	234c      	movs	r3, #76	@ 0x4c
 8007b3e:	72bb      	strb	r3, [r7, #10]
 8007b40:	239d      	movs	r3, #157	@ 0x9d
 8007b42:	72fb      	strb	r3, [r7, #11]
 8007b44:	2341      	movs	r3, #65	@ 0x41
 8007b46:	733b      	strb	r3, [r7, #12]
 8007b48:	2345      	movs	r3, #69	@ 0x45
 8007b4a:	737b      	strb	r3, [r7, #13]
 8007b4c:	2322      	movs	r3, #34	@ 0x22
 8007b4e:	73bb      	strb	r3, [r7, #14]
 8007b50:	238e      	movs	r3, #142	@ 0x8e
 8007b52:	73fb      	strb	r3, [r7, #15]
 8007b54:	2300      	movs	r3, #0
 8007b56:	743b      	strb	r3, [r7, #16]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	747b      	strb	r3, [r7, #17]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	74bb      	strb	r3, [r7, #18]
 8007b60:	2300      	movs	r3, #0
 8007b62:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8007b64:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <SVCCTL_InitCustomSvc+0xe0>)
 8007b66:	8818      	ldrh	r0, [r3, #0]
 8007b68:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba0 <SVCCTL_InitCustomSvc+0xe4>)
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	1d3a      	adds	r2, r7, #4
 8007b6e:	490d      	ldr	r1, [pc, #52]	@ (8007ba4 <SVCCTL_InitCustomSvc+0xe8>)
 8007b70:	9105      	str	r1, [sp, #20]
 8007b72:	2100      	movs	r1, #0
 8007b74:	9104      	str	r1, [sp, #16]
 8007b76:	2110      	movs	r1, #16
 8007b78:	9103      	str	r1, [sp, #12]
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	9102      	str	r1, [sp, #8]
 8007b7e:	2100      	movs	r1, #0
 8007b80:	9101      	str	r1, [sp, #4]
 8007b82:	2108      	movs	r1, #8
 8007b84:	9100      	str	r1, [sp, #0]
 8007b86:	2102      	movs	r1, #2
 8007b88:	f7fd ff9a 	bl	8005ac0 <aci_gatt_add_char>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8007b90:	bf00      	nop
}
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	08007965 	.word	0x08007965
 8007b9c:	200003e4 	.word	0x200003e4
 8007ba0:	2000005e 	.word	0x2000005e
 8007ba4:	200003e6 	.word	0x200003e6

08007ba8 <LL_PWR_EnableBootC2>:
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007bac:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <LL_PWR_EnableBootC2+0x1c>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	4a04      	ldr	r2, [pc, #16]	@ (8007bc4 <LL_PWR_EnableBootC2+0x1c>)
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bb6:	60d3      	str	r3, [r2, #12]
}
 8007bb8:	bf00      	nop
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	58000400 	.word	0x58000400

08007bc8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007bd0:	4b06      	ldr	r3, [pc, #24]	@ (8007bec <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007bd2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007bd6:	4905      	ldr	r1, [pc, #20]	@ (8007bec <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	58000800 	.word	0x58000800

08007bf0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007bf8:	4b05      	ldr	r3, [pc, #20]	@ (8007c10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007bfa:	6a1a      	ldr	r2, [r3, #32]
 8007bfc:	4904      	ldr	r1, [pc, #16]	@ (8007c10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	620b      	str	r3, [r1, #32]
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	58000800 	.word	0x58000800

08007c14 <LL_AHB3_GRP1_EnableClock>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4013      	ands	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c38:	68fb      	ldr	r3, [r7, #12]
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c52:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8007c56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c66:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c70:	68fb      	ldr	r3, [r7, #12]
}
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f043 0201 	orr.w	r2, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	601a      	str	r2, [r3, #0]
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	605a      	str	r2, [r3, #4]
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	041b      	lsls	r3, r3, #16
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	605a      	str	r2, [r3, #4]
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	401a      	ands	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	605a      	str	r2, [r3, #4]
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	609a      	str	r2, [r3, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	041a      	lsls	r2, r3, #16
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	609a      	str	r2, [r3, #8]
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	4013      	ands	r3, r2
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d101      	bne.n	8007d82 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69da      	ldr	r2, [r3, #28]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	4013      	ands	r3, r2
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d101      	bne.n	8007dac <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007dc0:	2102      	movs	r1, #2
 8007dc2:	4818      	ldr	r0, [pc, #96]	@ (8007e24 <HW_IPCC_Rx_Handler+0x68>)
 8007dc4:	f7ff ffe4 	bl	8007d90 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d008      	beq.n	8007de0 <HW_IPCC_Rx_Handler+0x24>
 8007dce:	4b15      	ldr	r3, [pc, #84]	@ (8007e24 <HW_IPCC_Rx_Handler+0x68>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8007dda:	f000 f8d5 	bl	8007f88 <HW_IPCC_SYS_EvtHandler>
 8007dde:	e01e      	b.n	8007e1e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007de0:	2101      	movs	r1, #1
 8007de2:	4810      	ldr	r0, [pc, #64]	@ (8007e24 <HW_IPCC_Rx_Handler+0x68>)
 8007de4:	f7ff ffd4 	bl	8007d90 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <HW_IPCC_Rx_Handler+0x44>
 8007dee:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <HW_IPCC_Rx_Handler+0x68>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d102      	bne.n	8007e00 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8007dfa:	f000 f889 	bl	8007f10 <HW_IPCC_BLE_EvtHandler>
 8007dfe:	e00e      	b.n	8007e1e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8007e00:	2108      	movs	r1, #8
 8007e02:	4808      	ldr	r0, [pc, #32]	@ (8007e24 <HW_IPCC_Rx_Handler+0x68>)
 8007e04:	f7ff ffc4 	bl	8007d90 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d008      	beq.n	8007e20 <HW_IPCC_Rx_Handler+0x64>
 8007e0e:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <HW_IPCC_Rx_Handler+0x68>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8007e1a:	f000 f901 	bl	8008020 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
}
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	58000c00 	.word	0x58000c00

08007e28 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007e2c:	2102      	movs	r1, #2
 8007e2e:	4818      	ldr	r0, [pc, #96]	@ (8007e90 <HW_IPCC_Tx_Handler+0x68>)
 8007e30:	f7ff ff99 	bl	8007d66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d108      	bne.n	8007e4c <HW_IPCC_Tx_Handler+0x24>
 8007e3a:	4b15      	ldr	r3, [pc, #84]	@ (8007e90 <HW_IPCC_Tx_Handler+0x68>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007e46:	f000 f893 	bl	8007f70 <HW_IPCC_SYS_CmdEvtHandler>
 8007e4a:	e01e      	b.n	8007e8a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007e4c:	2108      	movs	r1, #8
 8007e4e:	4810      	ldr	r0, [pc, #64]	@ (8007e90 <HW_IPCC_Tx_Handler+0x68>)
 8007e50:	f7ff ff89 	bl	8007d66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d108      	bne.n	8007e6c <HW_IPCC_Tx_Handler+0x44>
 8007e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e90 <HW_IPCC_Tx_Handler+0x68>)
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d102      	bne.n	8007e6c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8007e66:	f000 f8bd 	bl	8007fe4 <HW_IPCC_MM_FreeBufHandler>
 8007e6a:	e00e      	b.n	8007e8a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007e6c:	2120      	movs	r1, #32
 8007e6e:	4808      	ldr	r0, [pc, #32]	@ (8007e90 <HW_IPCC_Tx_Handler+0x68>)
 8007e70:	f7ff ff79 	bl	8007d66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d108      	bne.n	8007e8c <HW_IPCC_Tx_Handler+0x64>
 8007e7a:	4b05      	ldr	r3, [pc, #20]	@ (8007e90 <HW_IPCC_Tx_Handler+0x68>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007e86:	f000 f84f 	bl	8007f28 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007e8a:	bf00      	nop
 8007e8c:	bf00      	nop
}
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	58000c00 	.word	0x58000c00

08007e94 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007e98:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007e9c:	f7ff fed3 	bl	8007c46 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007ea0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007ea4:	f7ff fea4 	bl	8007bf0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007ea8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007eac:	f7ff fe8c 	bl	8007bc8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007eb0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007eb2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007eb4:	f7ff fe78 	bl	8007ba8 <LL_PWR_EnableBootC2>

  return;
 8007eb8:	bf00      	nop
}
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007ec0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007ec4:	f7ff fea6 	bl	8007c14 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007ec8:	4806      	ldr	r0, [pc, #24]	@ (8007ee4 <HW_IPCC_Init+0x28>)
 8007eca:	f7ff fee8 	bl	8007c9e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8007ece:	4805      	ldr	r0, [pc, #20]	@ (8007ee4 <HW_IPCC_Init+0x28>)
 8007ed0:	f7ff fed5 	bl	8007c7e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007ed4:	202c      	movs	r0, #44	@ 0x2c
 8007ed6:	f7fa fa8a 	bl	80023ee <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007eda:	202d      	movs	r0, #45	@ 0x2d
 8007edc:	f7fa fa87 	bl	80023ee <HAL_NVIC_EnableIRQ>

  return;
 8007ee0:	bf00      	nop
}
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	58000c00 	.word	0x58000c00

08007ee8 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007eec:	2101      	movs	r1, #1
 8007eee:	4802      	ldr	r0, [pc, #8]	@ (8007ef8 <HW_IPCC_BLE_Init+0x10>)
 8007ef0:	f7ff ff0a 	bl	8007d08 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007ef4:	bf00      	nop
}
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	58000c00 	.word	0x58000c00

08007efc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8007f00:	2101      	movs	r1, #1
 8007f02:	4802      	ldr	r0, [pc, #8]	@ (8007f0c <HW_IPCC_BLE_SendCmd+0x10>)
 8007f04:	f7ff ff20 	bl	8007d48 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007f08:	bf00      	nop
}
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	58000c00 	.word	0x58000c00

08007f10 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007f14:	f7fe ff4e 	bl	8006db4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4802      	ldr	r0, [pc, #8]	@ (8007f24 <HW_IPCC_BLE_EvtHandler+0x14>)
 8007f1c:	f7ff ff06 	bl	8007d2c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007f20:	bf00      	nop
}
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	58000c00 	.word	0x58000c00

08007f28 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007f2c:	2120      	movs	r1, #32
 8007f2e:	4803      	ldr	r0, [pc, #12]	@ (8007f3c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007f30:	f7ff fed8 	bl	8007ce4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007f34:	f7fe ff6e 	bl	8006e14 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007f38:	bf00      	nop
}
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	58000c00 	.word	0x58000c00

08007f40 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007f44:	2102      	movs	r1, #2
 8007f46:	4802      	ldr	r0, [pc, #8]	@ (8007f50 <HW_IPCC_SYS_Init+0x10>)
 8007f48:	f7ff fede 	bl	8007d08 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007f4c:	bf00      	nop
}
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	58000c00 	.word	0x58000c00

08007f54 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007f58:	2102      	movs	r1, #2
 8007f5a:	4804      	ldr	r0, [pc, #16]	@ (8007f6c <HW_IPCC_SYS_SendCmd+0x18>)
 8007f5c:	f7ff fef4 	bl	8007d48 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007f60:	2102      	movs	r1, #2
 8007f62:	4802      	ldr	r0, [pc, #8]	@ (8007f6c <HW_IPCC_SYS_SendCmd+0x18>)
 8007f64:	f7ff feab 	bl	8007cbe <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007f68:	bf00      	nop
}
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	58000c00 	.word	0x58000c00

08007f70 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007f74:	2102      	movs	r1, #2
 8007f76:	4803      	ldr	r0, [pc, #12]	@ (8007f84 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007f78:	f7ff feb4 	bl	8007ce4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007f7c:	f7fe ff9a 	bl	8006eb4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007f80:	bf00      	nop
}
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	58000c00 	.word	0x58000c00

08007f88 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007f8c:	f7fe ffa8 	bl	8006ee0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007f90:	2102      	movs	r1, #2
 8007f92:	4802      	ldr	r0, [pc, #8]	@ (8007f9c <HW_IPCC_SYS_EvtHandler+0x14>)
 8007f94:	f7ff feca 	bl	8007d2c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007f98:	bf00      	nop
}
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	58000c00 	.word	0x58000c00

08007fa0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007fa8:	2108      	movs	r1, #8
 8007faa:	480c      	ldr	r0, [pc, #48]	@ (8007fdc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007fac:	f7ff fedb 	bl	8007d66 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007fe0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007fbc:	2108      	movs	r1, #8
 8007fbe:	4807      	ldr	r0, [pc, #28]	@ (8007fdc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007fc0:	f7ff fe7d 	bl	8007cbe <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007fc4:	e006      	b.n	8007fd4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007fca:	2108      	movs	r1, #8
 8007fcc:	4803      	ldr	r0, [pc, #12]	@ (8007fdc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007fce:	f7ff febb 	bl	8007d48 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8007fd2:	bf00      	nop
}
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	58000c00 	.word	0x58000c00
 8007fe0:	200003e8 	.word	0x200003e8

08007fe4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007fe8:	2108      	movs	r1, #8
 8007fea:	4806      	ldr	r0, [pc, #24]	@ (8008004 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007fec:	f7ff fe7a 	bl	8007ce4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007ff6:	2108      	movs	r1, #8
 8007ff8:	4802      	ldr	r0, [pc, #8]	@ (8008004 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007ffa:	f7ff fea5 	bl	8007d48 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007ffe:	bf00      	nop
}
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	58000c00 	.word	0x58000c00
 8008008:	200003e8 	.word	0x200003e8

0800800c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008010:	2108      	movs	r1, #8
 8008012:	4802      	ldr	r0, [pc, #8]	@ (800801c <HW_IPCC_TRACES_Init+0x10>)
 8008014:	f7ff fe78 	bl	8007d08 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008018:	bf00      	nop
}
 800801a:	bd80      	pop	{r7, pc}
 800801c:	58000c00 	.word	0x58000c00

08008020 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008024:	f7ff f804 	bl	8007030 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008028:	2108      	movs	r1, #8
 800802a:	4802      	ldr	r0, [pc, #8]	@ (8008034 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800802c:	f7ff fe7e 	bl	8007d2c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008030:	bf00      	nop
}
 8008032:	bd80      	pop	{r7, pc}
 8008034:	58000c00 	.word	0x58000c00

08008038 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800803c:	4b05      	ldr	r3, [pc, #20]	@ (8008054 <UTIL_LPM_Init+0x1c>)
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008042:	4b05      	ldr	r3, [pc, #20]	@ (8008058 <UTIL_LPM_Init+0x20>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008048:	bf00      	nop
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	200003ec 	.word	0x200003ec
 8008058:	200003f0 	.word	0x200003f0

0800805c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008068:	f3ef 8310 	mrs	r3, PRIMASK
 800806c:	613b      	str	r3, [r7, #16]
  return(result);
 800806e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008072:	b672      	cpsid	i
}
 8008074:	bf00      	nop
  
  switch(state)
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d008      	beq.n	800808e <UTIL_LPM_SetOffMode+0x32>
 800807c:	2b01      	cmp	r3, #1
 800807e:	d10e      	bne.n	800809e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008080:	4b0d      	ldr	r3, [pc, #52]	@ (80080b8 <UTIL_LPM_SetOffMode+0x5c>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4313      	orrs	r3, r2
 8008088:	4a0b      	ldr	r2, [pc, #44]	@ (80080b8 <UTIL_LPM_SetOffMode+0x5c>)
 800808a:	6013      	str	r3, [r2, #0]
      break;
 800808c:	e008      	b.n	80080a0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	43da      	mvns	r2, r3
 8008092:	4b09      	ldr	r3, [pc, #36]	@ (80080b8 <UTIL_LPM_SetOffMode+0x5c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4013      	ands	r3, r2
 8008098:	4a07      	ldr	r2, [pc, #28]	@ (80080b8 <UTIL_LPM_SetOffMode+0x5c>)
 800809a:	6013      	str	r3, [r2, #0]
      break;
 800809c:	e000      	b.n	80080a0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800809e:	bf00      	nop
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f383 8810 	msr	PRIMASK, r3
}
 80080aa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80080ac:	bf00      	nop
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	200003f0 	.word	0x200003f0

080080bc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b090      	sub	sp, #64	@ 0x40
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80080c4:	4b73      	ldr	r3, [pc, #460]	@ (8008294 <UTIL_SEQ_Run+0x1d8>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80080ca:	4b72      	ldr	r3, [pc, #456]	@ (8008294 <UTIL_SEQ_Run+0x1d8>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4013      	ands	r3, r2
 80080d2:	4a70      	ldr	r2, [pc, #448]	@ (8008294 <UTIL_SEQ_Run+0x1d8>)
 80080d4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80080d6:	4b70      	ldr	r3, [pc, #448]	@ (8008298 <UTIL_SEQ_Run+0x1dc>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80080dc:	4b6f      	ldr	r3, [pc, #444]	@ (800829c <UTIL_SEQ_Run+0x1e0>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80080e2:	4b6f      	ldr	r3, [pc, #444]	@ (80082a0 <UTIL_SEQ_Run+0x1e4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80080e8:	4b6e      	ldr	r3, [pc, #440]	@ (80082a4 <UTIL_SEQ_Run+0x1e8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80080ee:	e08d      	b.n	800820c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80080f4:	e002      	b.n	80080fc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80080f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f8:	3301      	adds	r3, #1
 80080fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80080fc:	4a6a      	ldr	r2, [pc, #424]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 80080fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008100:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	401a      	ands	r2, r3
 8008108:	4b62      	ldr	r3, [pc, #392]	@ (8008294 <UTIL_SEQ_Run+0x1d8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4013      	ands	r3, r2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0f1      	beq.n	80080f6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008112:	4a65      	ldr	r2, [pc, #404]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 8008114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008116:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	401a      	ands	r2, r3
 800811e:	4b5d      	ldr	r3, [pc, #372]	@ (8008294 <UTIL_SEQ_Run+0x1d8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4013      	ands	r3, r2
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008126:	4a60      	ldr	r2, [pc, #384]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 8008128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	4013      	ands	r3, r2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008138:	4a5b      	ldr	r2, [pc, #364]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 800813a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	4413      	add	r3, r2
 8008140:	f04f 32ff 	mov.w	r2, #4294967295
 8008144:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008146:	4a58      	ldr	r2, [pc, #352]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 8008148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	4413      	add	r3, r2
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	4013      	ands	r3, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f000 f9b3 	bl	80084c0 <SEQ_BitPosition>
 800815a:	4603      	mov	r3, r0
 800815c:	461a      	mov	r2, r3
 800815e:	4b53      	ldr	r3, [pc, #332]	@ (80082ac <UTIL_SEQ_Run+0x1f0>)
 8008160:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008162:	4a51      	ldr	r2, [pc, #324]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 8008164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	4413      	add	r3, r2
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	4b4f      	ldr	r3, [pc, #316]	@ (80082ac <UTIL_SEQ_Run+0x1f0>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2101      	movs	r1, #1
 8008172:	fa01 f303 	lsl.w	r3, r1, r3
 8008176:	43db      	mvns	r3, r3
 8008178:	401a      	ands	r2, r3
 800817a:	494b      	ldr	r1, [pc, #300]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 800817c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	440b      	add	r3, r1
 8008182:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008184:	f3ef 8310 	mrs	r3, PRIMASK
 8008188:	61bb      	str	r3, [r7, #24]
  return(result);
 800818a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800818c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800818e:	b672      	cpsid	i
}
 8008190:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008192:	4b46      	ldr	r3, [pc, #280]	@ (80082ac <UTIL_SEQ_Run+0x1f0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2201      	movs	r2, #1
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	43da      	mvns	r2, r3
 800819e:	4b3e      	ldr	r3, [pc, #248]	@ (8008298 <UTIL_SEQ_Run+0x1dc>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4013      	ands	r3, r2
 80081a4:	4a3c      	ldr	r2, [pc, #240]	@ (8008298 <UTIL_SEQ_Run+0x1dc>)
 80081a6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80081a8:	2301      	movs	r3, #1
 80081aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ac:	e013      	b.n	80081d6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80081ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b0:	3b01      	subs	r3, #1
 80081b2:	4a3d      	ldr	r2, [pc, #244]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 80081b4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80081b8:	4b3c      	ldr	r3, [pc, #240]	@ (80082ac <UTIL_SEQ_Run+0x1f0>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2201      	movs	r2, #1
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	43da      	mvns	r2, r3
 80081c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c6:	3b01      	subs	r3, #1
 80081c8:	400a      	ands	r2, r1
 80081ca:	4937      	ldr	r1, [pc, #220]	@ (80082a8 <UTIL_SEQ_Run+0x1ec>)
 80081cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80081d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d2:	3b01      	subs	r3, #1
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e8      	bne.n	80081ae <UTIL_SEQ_Run+0xf2>
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f383 8810 	msr	PRIMASK, r3
}
 80081e6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80081e8:	4b30      	ldr	r3, [pc, #192]	@ (80082ac <UTIL_SEQ_Run+0x1f0>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a30      	ldr	r2, [pc, #192]	@ (80082b0 <UTIL_SEQ_Run+0x1f4>)
 80081ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f2:	4798      	blx	r3

    local_taskset = TaskSet;
 80081f4:	4b28      	ldr	r3, [pc, #160]	@ (8008298 <UTIL_SEQ_Run+0x1dc>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80081fa:	4b28      	ldr	r3, [pc, #160]	@ (800829c <UTIL_SEQ_Run+0x1e0>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008200:	4b27      	ldr	r3, [pc, #156]	@ (80082a0 <UTIL_SEQ_Run+0x1e4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8008206:	4b27      	ldr	r3, [pc, #156]	@ (80082a4 <UTIL_SEQ_Run+0x1e8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800820c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	401a      	ands	r2, r3
 8008212:	4b20      	ldr	r3, [pc, #128]	@ (8008294 <UTIL_SEQ_Run+0x1d8>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4013      	ands	r3, r2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <UTIL_SEQ_Run+0x16c>
 800821c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	4013      	ands	r3, r2
 8008222:	2b00      	cmp	r3, #0
 8008224:	f43f af64 	beq.w	80080f0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008228:	4b20      	ldr	r3, [pc, #128]	@ (80082ac <UTIL_SEQ_Run+0x1f0>)
 800822a:	f04f 32ff 	mov.w	r2, #4294967295
 800822e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008230:	f000 f938 	bl	80084a4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008234:	f3ef 8310 	mrs	r3, PRIMASK
 8008238:	613b      	str	r3, [r7, #16]
  return(result);
 800823a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800823c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800823e:	b672      	cpsid	i
}
 8008240:	bf00      	nop
  local_taskset = TaskSet;
 8008242:	4b15      	ldr	r3, [pc, #84]	@ (8008298 <UTIL_SEQ_Run+0x1dc>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008248:	4b14      	ldr	r3, [pc, #80]	@ (800829c <UTIL_SEQ_Run+0x1e0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800824e:	4b14      	ldr	r3, [pc, #80]	@ (80082a0 <UTIL_SEQ_Run+0x1e4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	401a      	ands	r2, r3
 800825a:	4b0e      	ldr	r3, [pc, #56]	@ (8008294 <UTIL_SEQ_Run+0x1d8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4013      	ands	r3, r2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d107      	bne.n	8008274 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008264:	4b0f      	ldr	r3, [pc, #60]	@ (80082a4 <UTIL_SEQ_Run+0x1e8>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008270:	f7f8 fb7f 	bl	8000972 <UTIL_SEQ_Idle>
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f383 8810 	msr	PRIMASK, r3
}
 800827e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008280:	f000 f917 	bl	80084b2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008284:	4a03      	ldr	r2, [pc, #12]	@ (8008294 <UTIL_SEQ_Run+0x1d8>)
 8008286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008288:	6013      	str	r3, [r2, #0]

  return;
 800828a:	bf00      	nop
}
 800828c:	3740      	adds	r7, #64	@ 0x40
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000064 	.word	0x20000064
 8008298:	200003f4 	.word	0x200003f4
 800829c:	200003f8 	.word	0x200003f8
 80082a0:	20000060 	.word	0x20000060
 80082a4:	200003fc 	.word	0x200003fc
 80082a8:	20000484 	.word	0x20000484
 80082ac:	20000400 	.word	0x20000400
 80082b0:	20000404 	.word	0x20000404

080082b4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c0:	f3ef 8310 	mrs	r3, PRIMASK
 80082c4:	617b      	str	r3, [r7, #20]
  return(result);
 80082c6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80082c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80082ca:	b672      	cpsid	i
}
 80082cc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 f8f6 	bl	80084c0 <SEQ_BitPosition>
 80082d4:	4603      	mov	r3, r0
 80082d6:	4619      	mov	r1, r3
 80082d8:	4a06      	ldr	r2, [pc, #24]	@ (80082f4 <UTIL_SEQ_RegTask+0x40>)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f383 8810 	msr	PRIMASK, r3
}
 80082ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80082ec:	bf00      	nop
}
 80082ee:	3720      	adds	r7, #32
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000404 	.word	0x20000404

080082f8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008302:	f3ef 8310 	mrs	r3, PRIMASK
 8008306:	60fb      	str	r3, [r7, #12]
  return(result);
 8008308:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800830a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800830c:	b672      	cpsid	i
}
 800830e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008310:	4b0d      	ldr	r3, [pc, #52]	@ (8008348 <UTIL_SEQ_SetTask+0x50>)
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4313      	orrs	r3, r2
 8008318:	4a0b      	ldr	r2, [pc, #44]	@ (8008348 <UTIL_SEQ_SetTask+0x50>)
 800831a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800831c:	4a0b      	ldr	r2, [pc, #44]	@ (800834c <UTIL_SEQ_SetTask+0x54>)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	431a      	orrs	r2, r3
 8008328:	4908      	ldr	r1, [pc, #32]	@ (800834c <UTIL_SEQ_SetTask+0x54>)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f383 8810 	msr	PRIMASK, r3
}
 800833a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800833c:	bf00      	nop
}
 800833e:	371c      	adds	r7, #28
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	200003f4 	.word	0x200003f4
 800834c:	20000484 	.word	0x20000484

08008350 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008358:	f3ef 8310 	mrs	r3, PRIMASK
 800835c:	60fb      	str	r3, [r7, #12]
  return(result);
 800835e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008362:	b672      	cpsid	i
}
 8008364:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	43da      	mvns	r2, r3
 800836a:	4b08      	ldr	r3, [pc, #32]	@ (800838c <UTIL_SEQ_PauseTask+0x3c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4013      	ands	r3, r2
 8008370:	4a06      	ldr	r2, [pc, #24]	@ (800838c <UTIL_SEQ_PauseTask+0x3c>)
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f383 8810 	msr	PRIMASK, r3
}
 800837e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008380:	bf00      	nop
}
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	20000060 	.word	0x20000060

08008390 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008398:	f3ef 8310 	mrs	r3, PRIMASK
 800839c:	60fb      	str	r3, [r7, #12]
  return(result);
 800839e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80083a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80083a2:	b672      	cpsid	i
}
 80083a4:	bf00      	nop

  TaskMask |= TaskId_bm;
 80083a6:	4b09      	ldr	r3, [pc, #36]	@ (80083cc <UTIL_SEQ_ResumeTask+0x3c>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	4a07      	ldr	r2, [pc, #28]	@ (80083cc <UTIL_SEQ_ResumeTask+0x3c>)
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f383 8810 	msr	PRIMASK, r3
}
 80083bc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80083be:	bf00      	nop
}
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000060 	.word	0x20000060

080083d0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d8:	f3ef 8310 	mrs	r3, PRIMASK
 80083dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80083de:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80083e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80083e2:	b672      	cpsid	i
}
 80083e4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80083e6:	4b09      	ldr	r3, [pc, #36]	@ (800840c <UTIL_SEQ_SetEvt+0x3c>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	4a07      	ldr	r2, [pc, #28]	@ (800840c <UTIL_SEQ_SetEvt+0x3c>)
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f383 8810 	msr	PRIMASK, r3
}
 80083fc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80083fe:	bf00      	nop
}
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	200003f8 	.word	0x200003f8

08008410 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008418:	4b1f      	ldr	r3, [pc, #124]	@ (8008498 <UTIL_SEQ_WaitEvt+0x88>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800841e:	4b1e      	ldr	r3, [pc, #120]	@ (8008498 <UTIL_SEQ_WaitEvt+0x88>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d102      	bne.n	800842e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008428:	2300      	movs	r3, #0
 800842a:	61fb      	str	r3, [r7, #28]
 800842c:	e005      	b.n	800843a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800842e:	4b1a      	ldr	r3, [pc, #104]	@ (8008498 <UTIL_SEQ_WaitEvt+0x88>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2201      	movs	r2, #1
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800843a:	4b18      	ldr	r3, [pc, #96]	@ (800849c <UTIL_SEQ_WaitEvt+0x8c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008440:	4a16      	ldr	r2, [pc, #88]	@ (800849c <UTIL_SEQ_WaitEvt+0x8c>)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8008446:	e003      	b.n	8008450 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	69f8      	ldr	r0, [r7, #28]
 800844c:	f7f8 fa98 	bl	8000980 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008450:	4b13      	ldr	r3, [pc, #76]	@ (80084a0 <UTIL_SEQ_WaitEvt+0x90>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4013      	ands	r3, r2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f5      	beq.n	8008448 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800845c:	4a0e      	ldr	r2, [pc, #56]	@ (8008498 <UTIL_SEQ_WaitEvt+0x88>)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008462:	f3ef 8310 	mrs	r3, PRIMASK
 8008466:	60bb      	str	r3, [r7, #8]
  return(result);
 8008468:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800846a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800846c:	b672      	cpsid	i
}
 800846e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	43da      	mvns	r2, r3
 8008474:	4b0a      	ldr	r3, [pc, #40]	@ (80084a0 <UTIL_SEQ_WaitEvt+0x90>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4013      	ands	r3, r2
 800847a:	4a09      	ldr	r2, [pc, #36]	@ (80084a0 <UTIL_SEQ_WaitEvt+0x90>)
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f383 8810 	msr	PRIMASK, r3
}
 8008488:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800848a:	4a04      	ldr	r2, [pc, #16]	@ (800849c <UTIL_SEQ_WaitEvt+0x8c>)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	6013      	str	r3, [r2, #0]
  return;
 8008490:	bf00      	nop
}
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	20000400 	.word	0x20000400
 800849c:	200003fc 	.word	0x200003fc
 80084a0:	200003f8 	.word	0x200003f8

080084a4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80084a8:	bf00      	nop
}
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80084b2:	b480      	push	{r7}
 80084b4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80084b6:	bf00      	nop
}
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <SEQ_BitPosition+0x16>
    return 32U;
 80084d2:	2320      	movs	r3, #32
 80084d4:	e003      	b.n	80084de <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	fab3 f383 	clz	r3, r3
 80084dc:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 80084de:	f1c3 031f 	rsb	r3, r3, #31
 80084e2:	b2db      	uxtb	r3, r3
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <std>:
 80084f0:	2300      	movs	r3, #0
 80084f2:	b510      	push	{r4, lr}
 80084f4:	4604      	mov	r4, r0
 80084f6:	e9c0 3300 	strd	r3, r3, [r0]
 80084fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084fe:	6083      	str	r3, [r0, #8]
 8008500:	8181      	strh	r1, [r0, #12]
 8008502:	6643      	str	r3, [r0, #100]	@ 0x64
 8008504:	81c2      	strh	r2, [r0, #14]
 8008506:	6183      	str	r3, [r0, #24]
 8008508:	4619      	mov	r1, r3
 800850a:	2208      	movs	r2, #8
 800850c:	305c      	adds	r0, #92	@ 0x5c
 800850e:	f000 f90e 	bl	800872e <memset>
 8008512:	4b0d      	ldr	r3, [pc, #52]	@ (8008548 <std+0x58>)
 8008514:	6263      	str	r3, [r4, #36]	@ 0x24
 8008516:	4b0d      	ldr	r3, [pc, #52]	@ (800854c <std+0x5c>)
 8008518:	62a3      	str	r3, [r4, #40]	@ 0x28
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <std+0x60>)
 800851c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <std+0x64>)
 8008520:	6323      	str	r3, [r4, #48]	@ 0x30
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <std+0x68>)
 8008524:	6224      	str	r4, [r4, #32]
 8008526:	429c      	cmp	r4, r3
 8008528:	d006      	beq.n	8008538 <std+0x48>
 800852a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800852e:	4294      	cmp	r4, r2
 8008530:	d002      	beq.n	8008538 <std+0x48>
 8008532:	33d0      	adds	r3, #208	@ 0xd0
 8008534:	429c      	cmp	r4, r3
 8008536:	d105      	bne.n	8008544 <std+0x54>
 8008538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800853c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008540:	f000 b96e 	b.w	8008820 <__retarget_lock_init_recursive>
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	080086a9 	.word	0x080086a9
 800854c:	080086cb 	.word	0x080086cb
 8008550:	08008703 	.word	0x08008703
 8008554:	08008727 	.word	0x08008727
 8008558:	2000048c 	.word	0x2000048c

0800855c <stdio_exit_handler>:
 800855c:	4a02      	ldr	r2, [pc, #8]	@ (8008568 <stdio_exit_handler+0xc>)
 800855e:	4903      	ldr	r1, [pc, #12]	@ (800856c <stdio_exit_handler+0x10>)
 8008560:	4803      	ldr	r0, [pc, #12]	@ (8008570 <stdio_exit_handler+0x14>)
 8008562:	f000 b869 	b.w	8008638 <_fwalk_sglue>
 8008566:	bf00      	nop
 8008568:	20000068 	.word	0x20000068
 800856c:	080090dd 	.word	0x080090dd
 8008570:	20000078 	.word	0x20000078

08008574 <cleanup_stdio>:
 8008574:	6841      	ldr	r1, [r0, #4]
 8008576:	4b0c      	ldr	r3, [pc, #48]	@ (80085a8 <cleanup_stdio+0x34>)
 8008578:	4299      	cmp	r1, r3
 800857a:	b510      	push	{r4, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	d001      	beq.n	8008584 <cleanup_stdio+0x10>
 8008580:	f000 fdac 	bl	80090dc <_fflush_r>
 8008584:	68a1      	ldr	r1, [r4, #8]
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <cleanup_stdio+0x38>)
 8008588:	4299      	cmp	r1, r3
 800858a:	d002      	beq.n	8008592 <cleanup_stdio+0x1e>
 800858c:	4620      	mov	r0, r4
 800858e:	f000 fda5 	bl	80090dc <_fflush_r>
 8008592:	68e1      	ldr	r1, [r4, #12]
 8008594:	4b06      	ldr	r3, [pc, #24]	@ (80085b0 <cleanup_stdio+0x3c>)
 8008596:	4299      	cmp	r1, r3
 8008598:	d004      	beq.n	80085a4 <cleanup_stdio+0x30>
 800859a:	4620      	mov	r0, r4
 800859c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a0:	f000 bd9c 	b.w	80090dc <_fflush_r>
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	bf00      	nop
 80085a8:	2000048c 	.word	0x2000048c
 80085ac:	200004f4 	.word	0x200004f4
 80085b0:	2000055c 	.word	0x2000055c

080085b4 <global_stdio_init.part.0>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <global_stdio_init.part.0+0x30>)
 80085b8:	4c0b      	ldr	r4, [pc, #44]	@ (80085e8 <global_stdio_init.part.0+0x34>)
 80085ba:	4a0c      	ldr	r2, [pc, #48]	@ (80085ec <global_stdio_init.part.0+0x38>)
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	4620      	mov	r0, r4
 80085c0:	2200      	movs	r2, #0
 80085c2:	2104      	movs	r1, #4
 80085c4:	f7ff ff94 	bl	80084f0 <std>
 80085c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085cc:	2201      	movs	r2, #1
 80085ce:	2109      	movs	r1, #9
 80085d0:	f7ff ff8e 	bl	80084f0 <std>
 80085d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085d8:	2202      	movs	r2, #2
 80085da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085de:	2112      	movs	r1, #18
 80085e0:	f7ff bf86 	b.w	80084f0 <std>
 80085e4:	200005c4 	.word	0x200005c4
 80085e8:	2000048c 	.word	0x2000048c
 80085ec:	0800855d 	.word	0x0800855d

080085f0 <__sfp_lock_acquire>:
 80085f0:	4801      	ldr	r0, [pc, #4]	@ (80085f8 <__sfp_lock_acquire+0x8>)
 80085f2:	f000 b916 	b.w	8008822 <__retarget_lock_acquire_recursive>
 80085f6:	bf00      	nop
 80085f8:	200005cd 	.word	0x200005cd

080085fc <__sfp_lock_release>:
 80085fc:	4801      	ldr	r0, [pc, #4]	@ (8008604 <__sfp_lock_release+0x8>)
 80085fe:	f000 b911 	b.w	8008824 <__retarget_lock_release_recursive>
 8008602:	bf00      	nop
 8008604:	200005cd 	.word	0x200005cd

08008608 <__sinit>:
 8008608:	b510      	push	{r4, lr}
 800860a:	4604      	mov	r4, r0
 800860c:	f7ff fff0 	bl	80085f0 <__sfp_lock_acquire>
 8008610:	6a23      	ldr	r3, [r4, #32]
 8008612:	b11b      	cbz	r3, 800861c <__sinit+0x14>
 8008614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008618:	f7ff bff0 	b.w	80085fc <__sfp_lock_release>
 800861c:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <__sinit+0x28>)
 800861e:	6223      	str	r3, [r4, #32]
 8008620:	4b04      	ldr	r3, [pc, #16]	@ (8008634 <__sinit+0x2c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1f5      	bne.n	8008614 <__sinit+0xc>
 8008628:	f7ff ffc4 	bl	80085b4 <global_stdio_init.part.0>
 800862c:	e7f2      	b.n	8008614 <__sinit+0xc>
 800862e:	bf00      	nop
 8008630:	08008575 	.word	0x08008575
 8008634:	200005c4 	.word	0x200005c4

08008638 <_fwalk_sglue>:
 8008638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800863c:	4607      	mov	r7, r0
 800863e:	4688      	mov	r8, r1
 8008640:	4614      	mov	r4, r2
 8008642:	2600      	movs	r6, #0
 8008644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008648:	f1b9 0901 	subs.w	r9, r9, #1
 800864c:	d505      	bpl.n	800865a <_fwalk_sglue+0x22>
 800864e:	6824      	ldr	r4, [r4, #0]
 8008650:	2c00      	cmp	r4, #0
 8008652:	d1f7      	bne.n	8008644 <_fwalk_sglue+0xc>
 8008654:	4630      	mov	r0, r6
 8008656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d907      	bls.n	8008670 <_fwalk_sglue+0x38>
 8008660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008664:	3301      	adds	r3, #1
 8008666:	d003      	beq.n	8008670 <_fwalk_sglue+0x38>
 8008668:	4629      	mov	r1, r5
 800866a:	4638      	mov	r0, r7
 800866c:	47c0      	blx	r8
 800866e:	4306      	orrs	r6, r0
 8008670:	3568      	adds	r5, #104	@ 0x68
 8008672:	e7e9      	b.n	8008648 <_fwalk_sglue+0x10>

08008674 <iprintf>:
 8008674:	b40f      	push	{r0, r1, r2, r3}
 8008676:	b507      	push	{r0, r1, r2, lr}
 8008678:	4906      	ldr	r1, [pc, #24]	@ (8008694 <iprintf+0x20>)
 800867a:	ab04      	add	r3, sp, #16
 800867c:	6808      	ldr	r0, [r1, #0]
 800867e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008682:	6881      	ldr	r1, [r0, #8]
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	f000 f9ff 	bl	8008a88 <_vfiprintf_r>
 800868a:	b003      	add	sp, #12
 800868c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008690:	b004      	add	sp, #16
 8008692:	4770      	bx	lr
 8008694:	20000074 	.word	0x20000074

08008698 <putchar>:
 8008698:	4b02      	ldr	r3, [pc, #8]	@ (80086a4 <putchar+0xc>)
 800869a:	4601      	mov	r1, r0
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	6882      	ldr	r2, [r0, #8]
 80086a0:	f000 bd44 	b.w	800912c <_putc_r>
 80086a4:	20000074 	.word	0x20000074

080086a8 <__sread>:
 80086a8:	b510      	push	{r4, lr}
 80086aa:	460c      	mov	r4, r1
 80086ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b0:	f000 f868 	bl	8008784 <_read_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	bfab      	itete	ge
 80086b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086ba:	89a3      	ldrhlt	r3, [r4, #12]
 80086bc:	181b      	addge	r3, r3, r0
 80086be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086c2:	bfac      	ite	ge
 80086c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086c6:	81a3      	strhlt	r3, [r4, #12]
 80086c8:	bd10      	pop	{r4, pc}

080086ca <__swrite>:
 80086ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ce:	461f      	mov	r7, r3
 80086d0:	898b      	ldrh	r3, [r1, #12]
 80086d2:	05db      	lsls	r3, r3, #23
 80086d4:	4605      	mov	r5, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4616      	mov	r6, r2
 80086da:	d505      	bpl.n	80086e8 <__swrite+0x1e>
 80086dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e0:	2302      	movs	r3, #2
 80086e2:	2200      	movs	r2, #0
 80086e4:	f000 f83c 	bl	8008760 <_lseek_r>
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	4632      	mov	r2, r6
 80086f6:	463b      	mov	r3, r7
 80086f8:	4628      	mov	r0, r5
 80086fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086fe:	f000 b853 	b.w	80087a8 <_write_r>

08008702 <__sseek>:
 8008702:	b510      	push	{r4, lr}
 8008704:	460c      	mov	r4, r1
 8008706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870a:	f000 f829 	bl	8008760 <_lseek_r>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	bf15      	itete	ne
 8008714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800871a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800871e:	81a3      	strheq	r3, [r4, #12]
 8008720:	bf18      	it	ne
 8008722:	81a3      	strhne	r3, [r4, #12]
 8008724:	bd10      	pop	{r4, pc}

08008726 <__sclose>:
 8008726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872a:	f000 b809 	b.w	8008740 <_close_r>

0800872e <memset>:
 800872e:	4402      	add	r2, r0
 8008730:	4603      	mov	r3, r0
 8008732:	4293      	cmp	r3, r2
 8008734:	d100      	bne.n	8008738 <memset+0xa>
 8008736:	4770      	bx	lr
 8008738:	f803 1b01 	strb.w	r1, [r3], #1
 800873c:	e7f9      	b.n	8008732 <memset+0x4>
	...

08008740 <_close_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d06      	ldr	r5, [pc, #24]	@ (800875c <_close_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	f7f9 fa8a 	bl	8001c64 <_close>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_close_r+0x1a>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_close_r+0x1a>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	200005c8 	.word	0x200005c8

08008760 <_lseek_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d07      	ldr	r5, [pc, #28]	@ (8008780 <_lseek_r+0x20>)
 8008764:	4604      	mov	r4, r0
 8008766:	4608      	mov	r0, r1
 8008768:	4611      	mov	r1, r2
 800876a:	2200      	movs	r2, #0
 800876c:	602a      	str	r2, [r5, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	f7f9 fa9f 	bl	8001cb2 <_lseek>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_lseek_r+0x1e>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_lseek_r+0x1e>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	200005c8 	.word	0x200005c8

08008784 <_read_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	@ (80087a4 <_read_r+0x20>)
 8008788:	4604      	mov	r4, r0
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	2200      	movs	r2, #0
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	f7f9 fa2d 	bl	8001bf2 <_read>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_read_r+0x1e>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_read_r+0x1e>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	200005c8 	.word	0x200005c8

080087a8 <_write_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	@ (80087c8 <_write_r+0x20>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f9 fa38 	bl	8001c2c <_write>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_write_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_write_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	200005c8 	.word	0x200005c8

080087cc <__errno>:
 80087cc:	4b01      	ldr	r3, [pc, #4]	@ (80087d4 <__errno+0x8>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20000074 	.word	0x20000074

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4d0d      	ldr	r5, [pc, #52]	@ (8008810 <__libc_init_array+0x38>)
 80087dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008814 <__libc_init_array+0x3c>)
 80087de:	1b64      	subs	r4, r4, r5
 80087e0:	10a4      	asrs	r4, r4, #2
 80087e2:	2600      	movs	r6, #0
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008818 <__libc_init_array+0x40>)
 80087ea:	4c0c      	ldr	r4, [pc, #48]	@ (800881c <__libc_init_array+0x44>)
 80087ec:	f000 fdfa 	bl	80093e4 <_init>
 80087f0:	1b64      	subs	r4, r4, r5
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	2600      	movs	r6, #0
 80087f6:	42a6      	cmp	r6, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008800:	4798      	blx	r3
 8008802:	3601      	adds	r6, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f855 3b04 	ldr.w	r3, [r5], #4
 800880a:	4798      	blx	r3
 800880c:	3601      	adds	r6, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	08009734 	.word	0x08009734
 8008814:	08009734 	.word	0x08009734
 8008818:	08009734 	.word	0x08009734
 800881c:	08009738 	.word	0x08009738

08008820 <__retarget_lock_init_recursive>:
 8008820:	4770      	bx	lr

08008822 <__retarget_lock_acquire_recursive>:
 8008822:	4770      	bx	lr

08008824 <__retarget_lock_release_recursive>:
 8008824:	4770      	bx	lr

08008826 <memcpy>:
 8008826:	440a      	add	r2, r1
 8008828:	4291      	cmp	r1, r2
 800882a:	f100 33ff 	add.w	r3, r0, #4294967295
 800882e:	d100      	bne.n	8008832 <memcpy+0xc>
 8008830:	4770      	bx	lr
 8008832:	b510      	push	{r4, lr}
 8008834:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800883c:	4291      	cmp	r1, r2
 800883e:	d1f9      	bne.n	8008834 <memcpy+0xe>
 8008840:	bd10      	pop	{r4, pc}
	...

08008844 <_free_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4605      	mov	r5, r0
 8008848:	2900      	cmp	r1, #0
 800884a:	d041      	beq.n	80088d0 <_free_r+0x8c>
 800884c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008850:	1f0c      	subs	r4, r1, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfb8      	it	lt
 8008856:	18e4      	addlt	r4, r4, r3
 8008858:	f000 f8e0 	bl	8008a1c <__malloc_lock>
 800885c:	4a1d      	ldr	r2, [pc, #116]	@ (80088d4 <_free_r+0x90>)
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	b933      	cbnz	r3, 8008870 <_free_r+0x2c>
 8008862:	6063      	str	r3, [r4, #4]
 8008864:	6014      	str	r4, [r2, #0]
 8008866:	4628      	mov	r0, r5
 8008868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886c:	f000 b8dc 	b.w	8008a28 <__malloc_unlock>
 8008870:	42a3      	cmp	r3, r4
 8008872:	d908      	bls.n	8008886 <_free_r+0x42>
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	1821      	adds	r1, r4, r0
 8008878:	428b      	cmp	r3, r1
 800887a:	bf01      	itttt	eq
 800887c:	6819      	ldreq	r1, [r3, #0]
 800887e:	685b      	ldreq	r3, [r3, #4]
 8008880:	1809      	addeq	r1, r1, r0
 8008882:	6021      	streq	r1, [r4, #0]
 8008884:	e7ed      	b.n	8008862 <_free_r+0x1e>
 8008886:	461a      	mov	r2, r3
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	b10b      	cbz	r3, 8008890 <_free_r+0x4c>
 800888c:	42a3      	cmp	r3, r4
 800888e:	d9fa      	bls.n	8008886 <_free_r+0x42>
 8008890:	6811      	ldr	r1, [r2, #0]
 8008892:	1850      	adds	r0, r2, r1
 8008894:	42a0      	cmp	r0, r4
 8008896:	d10b      	bne.n	80088b0 <_free_r+0x6c>
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	4401      	add	r1, r0
 800889c:	1850      	adds	r0, r2, r1
 800889e:	4283      	cmp	r3, r0
 80088a0:	6011      	str	r1, [r2, #0]
 80088a2:	d1e0      	bne.n	8008866 <_free_r+0x22>
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	6053      	str	r3, [r2, #4]
 80088aa:	4408      	add	r0, r1
 80088ac:	6010      	str	r0, [r2, #0]
 80088ae:	e7da      	b.n	8008866 <_free_r+0x22>
 80088b0:	d902      	bls.n	80088b8 <_free_r+0x74>
 80088b2:	230c      	movs	r3, #12
 80088b4:	602b      	str	r3, [r5, #0]
 80088b6:	e7d6      	b.n	8008866 <_free_r+0x22>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	1821      	adds	r1, r4, r0
 80088bc:	428b      	cmp	r3, r1
 80088be:	bf04      	itt	eq
 80088c0:	6819      	ldreq	r1, [r3, #0]
 80088c2:	685b      	ldreq	r3, [r3, #4]
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	bf04      	itt	eq
 80088c8:	1809      	addeq	r1, r1, r0
 80088ca:	6021      	streq	r1, [r4, #0]
 80088cc:	6054      	str	r4, [r2, #4]
 80088ce:	e7ca      	b.n	8008866 <_free_r+0x22>
 80088d0:	bd38      	pop	{r3, r4, r5, pc}
 80088d2:	bf00      	nop
 80088d4:	200005d4 	.word	0x200005d4

080088d8 <sbrk_aligned>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	4e0f      	ldr	r6, [pc, #60]	@ (8008918 <sbrk_aligned+0x40>)
 80088dc:	460c      	mov	r4, r1
 80088de:	6831      	ldr	r1, [r6, #0]
 80088e0:	4605      	mov	r5, r0
 80088e2:	b911      	cbnz	r1, 80088ea <sbrk_aligned+0x12>
 80088e4:	f000 fcea 	bl	80092bc <_sbrk_r>
 80088e8:	6030      	str	r0, [r6, #0]
 80088ea:	4621      	mov	r1, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 fce5 	bl	80092bc <_sbrk_r>
 80088f2:	1c43      	adds	r3, r0, #1
 80088f4:	d103      	bne.n	80088fe <sbrk_aligned+0x26>
 80088f6:	f04f 34ff 	mov.w	r4, #4294967295
 80088fa:	4620      	mov	r0, r4
 80088fc:	bd70      	pop	{r4, r5, r6, pc}
 80088fe:	1cc4      	adds	r4, r0, #3
 8008900:	f024 0403 	bic.w	r4, r4, #3
 8008904:	42a0      	cmp	r0, r4
 8008906:	d0f8      	beq.n	80088fa <sbrk_aligned+0x22>
 8008908:	1a21      	subs	r1, r4, r0
 800890a:	4628      	mov	r0, r5
 800890c:	f000 fcd6 	bl	80092bc <_sbrk_r>
 8008910:	3001      	adds	r0, #1
 8008912:	d1f2      	bne.n	80088fa <sbrk_aligned+0x22>
 8008914:	e7ef      	b.n	80088f6 <sbrk_aligned+0x1e>
 8008916:	bf00      	nop
 8008918:	200005d0 	.word	0x200005d0

0800891c <_malloc_r>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	1ccd      	adds	r5, r1, #3
 8008922:	f025 0503 	bic.w	r5, r5, #3
 8008926:	3508      	adds	r5, #8
 8008928:	2d0c      	cmp	r5, #12
 800892a:	bf38      	it	cc
 800892c:	250c      	movcc	r5, #12
 800892e:	2d00      	cmp	r5, #0
 8008930:	4606      	mov	r6, r0
 8008932:	db01      	blt.n	8008938 <_malloc_r+0x1c>
 8008934:	42a9      	cmp	r1, r5
 8008936:	d904      	bls.n	8008942 <_malloc_r+0x26>
 8008938:	230c      	movs	r3, #12
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	2000      	movs	r0, #0
 800893e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a18 <_malloc_r+0xfc>
 8008946:	f000 f869 	bl	8008a1c <__malloc_lock>
 800894a:	f8d8 3000 	ldr.w	r3, [r8]
 800894e:	461c      	mov	r4, r3
 8008950:	bb44      	cbnz	r4, 80089a4 <_malloc_r+0x88>
 8008952:	4629      	mov	r1, r5
 8008954:	4630      	mov	r0, r6
 8008956:	f7ff ffbf 	bl	80088d8 <sbrk_aligned>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	4604      	mov	r4, r0
 800895e:	d158      	bne.n	8008a12 <_malloc_r+0xf6>
 8008960:	f8d8 4000 	ldr.w	r4, [r8]
 8008964:	4627      	mov	r7, r4
 8008966:	2f00      	cmp	r7, #0
 8008968:	d143      	bne.n	80089f2 <_malloc_r+0xd6>
 800896a:	2c00      	cmp	r4, #0
 800896c:	d04b      	beq.n	8008a06 <_malloc_r+0xea>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	4639      	mov	r1, r7
 8008972:	4630      	mov	r0, r6
 8008974:	eb04 0903 	add.w	r9, r4, r3
 8008978:	f000 fca0 	bl	80092bc <_sbrk_r>
 800897c:	4581      	cmp	r9, r0
 800897e:	d142      	bne.n	8008a06 <_malloc_r+0xea>
 8008980:	6821      	ldr	r1, [r4, #0]
 8008982:	1a6d      	subs	r5, r5, r1
 8008984:	4629      	mov	r1, r5
 8008986:	4630      	mov	r0, r6
 8008988:	f7ff ffa6 	bl	80088d8 <sbrk_aligned>
 800898c:	3001      	adds	r0, #1
 800898e:	d03a      	beq.n	8008a06 <_malloc_r+0xea>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	442b      	add	r3, r5
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	f8d8 3000 	ldr.w	r3, [r8]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	bb62      	cbnz	r2, 80089f8 <_malloc_r+0xdc>
 800899e:	f8c8 7000 	str.w	r7, [r8]
 80089a2:	e00f      	b.n	80089c4 <_malloc_r+0xa8>
 80089a4:	6822      	ldr	r2, [r4, #0]
 80089a6:	1b52      	subs	r2, r2, r5
 80089a8:	d420      	bmi.n	80089ec <_malloc_r+0xd0>
 80089aa:	2a0b      	cmp	r2, #11
 80089ac:	d917      	bls.n	80089de <_malloc_r+0xc2>
 80089ae:	1961      	adds	r1, r4, r5
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	6025      	str	r5, [r4, #0]
 80089b4:	bf18      	it	ne
 80089b6:	6059      	strne	r1, [r3, #4]
 80089b8:	6863      	ldr	r3, [r4, #4]
 80089ba:	bf08      	it	eq
 80089bc:	f8c8 1000 	streq.w	r1, [r8]
 80089c0:	5162      	str	r2, [r4, r5]
 80089c2:	604b      	str	r3, [r1, #4]
 80089c4:	4630      	mov	r0, r6
 80089c6:	f000 f82f 	bl	8008a28 <__malloc_unlock>
 80089ca:	f104 000b 	add.w	r0, r4, #11
 80089ce:	1d23      	adds	r3, r4, #4
 80089d0:	f020 0007 	bic.w	r0, r0, #7
 80089d4:	1ac2      	subs	r2, r0, r3
 80089d6:	bf1c      	itt	ne
 80089d8:	1a1b      	subne	r3, r3, r0
 80089da:	50a3      	strne	r3, [r4, r2]
 80089dc:	e7af      	b.n	800893e <_malloc_r+0x22>
 80089de:	6862      	ldr	r2, [r4, #4]
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	bf0c      	ite	eq
 80089e4:	f8c8 2000 	streq.w	r2, [r8]
 80089e8:	605a      	strne	r2, [r3, #4]
 80089ea:	e7eb      	b.n	80089c4 <_malloc_r+0xa8>
 80089ec:	4623      	mov	r3, r4
 80089ee:	6864      	ldr	r4, [r4, #4]
 80089f0:	e7ae      	b.n	8008950 <_malloc_r+0x34>
 80089f2:	463c      	mov	r4, r7
 80089f4:	687f      	ldr	r7, [r7, #4]
 80089f6:	e7b6      	b.n	8008966 <_malloc_r+0x4a>
 80089f8:	461a      	mov	r2, r3
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d1fb      	bne.n	80089f8 <_malloc_r+0xdc>
 8008a00:	2300      	movs	r3, #0
 8008a02:	6053      	str	r3, [r2, #4]
 8008a04:	e7de      	b.n	80089c4 <_malloc_r+0xa8>
 8008a06:	230c      	movs	r3, #12
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f000 f80c 	bl	8008a28 <__malloc_unlock>
 8008a10:	e794      	b.n	800893c <_malloc_r+0x20>
 8008a12:	6005      	str	r5, [r0, #0]
 8008a14:	e7d6      	b.n	80089c4 <_malloc_r+0xa8>
 8008a16:	bf00      	nop
 8008a18:	200005d4 	.word	0x200005d4

08008a1c <__malloc_lock>:
 8008a1c:	4801      	ldr	r0, [pc, #4]	@ (8008a24 <__malloc_lock+0x8>)
 8008a1e:	f7ff bf00 	b.w	8008822 <__retarget_lock_acquire_recursive>
 8008a22:	bf00      	nop
 8008a24:	200005cc 	.word	0x200005cc

08008a28 <__malloc_unlock>:
 8008a28:	4801      	ldr	r0, [pc, #4]	@ (8008a30 <__malloc_unlock+0x8>)
 8008a2a:	f7ff befb 	b.w	8008824 <__retarget_lock_release_recursive>
 8008a2e:	bf00      	nop
 8008a30:	200005cc 	.word	0x200005cc

08008a34 <__sfputc_r>:
 8008a34:	6893      	ldr	r3, [r2, #8]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	b410      	push	{r4}
 8008a3c:	6093      	str	r3, [r2, #8]
 8008a3e:	da08      	bge.n	8008a52 <__sfputc_r+0x1e>
 8008a40:	6994      	ldr	r4, [r2, #24]
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	db01      	blt.n	8008a4a <__sfputc_r+0x16>
 8008a46:	290a      	cmp	r1, #10
 8008a48:	d103      	bne.n	8008a52 <__sfputc_r+0x1e>
 8008a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4e:	f000 bba1 	b.w	8009194 <__swbuf_r>
 8008a52:	6813      	ldr	r3, [r2, #0]
 8008a54:	1c58      	adds	r0, r3, #1
 8008a56:	6010      	str	r0, [r2, #0]
 8008a58:	7019      	strb	r1, [r3, #0]
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <__sfputs_r>:
 8008a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	4614      	mov	r4, r2
 8008a6a:	18d5      	adds	r5, r2, r3
 8008a6c:	42ac      	cmp	r4, r5
 8008a6e:	d101      	bne.n	8008a74 <__sfputs_r+0x12>
 8008a70:	2000      	movs	r0, #0
 8008a72:	e007      	b.n	8008a84 <__sfputs_r+0x22>
 8008a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a78:	463a      	mov	r2, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ffda 	bl	8008a34 <__sfputc_r>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d1f3      	bne.n	8008a6c <__sfputs_r+0xa>
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a88 <_vfiprintf_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	b09d      	sub	sp, #116	@ 0x74
 8008a90:	4614      	mov	r4, r2
 8008a92:	4698      	mov	r8, r3
 8008a94:	4606      	mov	r6, r0
 8008a96:	b118      	cbz	r0, 8008aa0 <_vfiprintf_r+0x18>
 8008a98:	6a03      	ldr	r3, [r0, #32]
 8008a9a:	b90b      	cbnz	r3, 8008aa0 <_vfiprintf_r+0x18>
 8008a9c:	f7ff fdb4 	bl	8008608 <__sinit>
 8008aa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aa2:	07d9      	lsls	r1, r3, #31
 8008aa4:	d405      	bmi.n	8008ab2 <_vfiprintf_r+0x2a>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	059a      	lsls	r2, r3, #22
 8008aaa:	d402      	bmi.n	8008ab2 <_vfiprintf_r+0x2a>
 8008aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aae:	f7ff feb8 	bl	8008822 <__retarget_lock_acquire_recursive>
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	071b      	lsls	r3, r3, #28
 8008ab6:	d501      	bpl.n	8008abc <_vfiprintf_r+0x34>
 8008ab8:	692b      	ldr	r3, [r5, #16]
 8008aba:	b99b      	cbnz	r3, 8008ae4 <_vfiprintf_r+0x5c>
 8008abc:	4629      	mov	r1, r5
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f000 fba6 	bl	8009210 <__swsetup_r>
 8008ac4:	b170      	cbz	r0, 8008ae4 <_vfiprintf_r+0x5c>
 8008ac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ac8:	07dc      	lsls	r4, r3, #31
 8008aca:	d504      	bpl.n	8008ad6 <_vfiprintf_r+0x4e>
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad0:	b01d      	add	sp, #116	@ 0x74
 8008ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	0598      	lsls	r0, r3, #22
 8008ada:	d4f7      	bmi.n	8008acc <_vfiprintf_r+0x44>
 8008adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ade:	f7ff fea1 	bl	8008824 <__retarget_lock_release_recursive>
 8008ae2:	e7f3      	b.n	8008acc <_vfiprintf_r+0x44>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae8:	2320      	movs	r3, #32
 8008aea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008af2:	2330      	movs	r3, #48	@ 0x30
 8008af4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ca4 <_vfiprintf_r+0x21c>
 8008af8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008afc:	f04f 0901 	mov.w	r9, #1
 8008b00:	4623      	mov	r3, r4
 8008b02:	469a      	mov	sl, r3
 8008b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b08:	b10a      	cbz	r2, 8008b0e <_vfiprintf_r+0x86>
 8008b0a:	2a25      	cmp	r2, #37	@ 0x25
 8008b0c:	d1f9      	bne.n	8008b02 <_vfiprintf_r+0x7a>
 8008b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b12:	d00b      	beq.n	8008b2c <_vfiprintf_r+0xa4>
 8008b14:	465b      	mov	r3, fp
 8008b16:	4622      	mov	r2, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f7ff ffa1 	bl	8008a62 <__sfputs_r>
 8008b20:	3001      	adds	r0, #1
 8008b22:	f000 80a7 	beq.w	8008c74 <_vfiprintf_r+0x1ec>
 8008b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b28:	445a      	add	r2, fp
 8008b2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 809f 	beq.w	8008c74 <_vfiprintf_r+0x1ec>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b40:	f10a 0a01 	add.w	sl, sl, #1
 8008b44:	9304      	str	r3, [sp, #16]
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b4e:	4654      	mov	r4, sl
 8008b50:	2205      	movs	r2, #5
 8008b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b56:	4853      	ldr	r0, [pc, #332]	@ (8008ca4 <_vfiprintf_r+0x21c>)
 8008b58:	f7f7 fb1a 	bl	8000190 <memchr>
 8008b5c:	9a04      	ldr	r2, [sp, #16]
 8008b5e:	b9d8      	cbnz	r0, 8008b98 <_vfiprintf_r+0x110>
 8008b60:	06d1      	lsls	r1, r2, #27
 8008b62:	bf44      	itt	mi
 8008b64:	2320      	movmi	r3, #32
 8008b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b6a:	0713      	lsls	r3, r2, #28
 8008b6c:	bf44      	itt	mi
 8008b6e:	232b      	movmi	r3, #43	@ 0x2b
 8008b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b74:	f89a 3000 	ldrb.w	r3, [sl]
 8008b78:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b7a:	d015      	beq.n	8008ba8 <_vfiprintf_r+0x120>
 8008b7c:	9a07      	ldr	r2, [sp, #28]
 8008b7e:	4654      	mov	r4, sl
 8008b80:	2000      	movs	r0, #0
 8008b82:	f04f 0c0a 	mov.w	ip, #10
 8008b86:	4621      	mov	r1, r4
 8008b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b8c:	3b30      	subs	r3, #48	@ 0x30
 8008b8e:	2b09      	cmp	r3, #9
 8008b90:	d94b      	bls.n	8008c2a <_vfiprintf_r+0x1a2>
 8008b92:	b1b0      	cbz	r0, 8008bc2 <_vfiprintf_r+0x13a>
 8008b94:	9207      	str	r2, [sp, #28]
 8008b96:	e014      	b.n	8008bc2 <_vfiprintf_r+0x13a>
 8008b98:	eba0 0308 	sub.w	r3, r0, r8
 8008b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	46a2      	mov	sl, r4
 8008ba6:	e7d2      	b.n	8008b4e <_vfiprintf_r+0xc6>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	1d19      	adds	r1, r3, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	9103      	str	r1, [sp, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bfbb      	ittet	lt
 8008bb4:	425b      	neglt	r3, r3
 8008bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bba:	9307      	strge	r3, [sp, #28]
 8008bbc:	9307      	strlt	r3, [sp, #28]
 8008bbe:	bfb8      	it	lt
 8008bc0:	9204      	strlt	r2, [sp, #16]
 8008bc2:	7823      	ldrb	r3, [r4, #0]
 8008bc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bc6:	d10a      	bne.n	8008bde <_vfiprintf_r+0x156>
 8008bc8:	7863      	ldrb	r3, [r4, #1]
 8008bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bcc:	d132      	bne.n	8008c34 <_vfiprintf_r+0x1ac>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	9203      	str	r2, [sp, #12]
 8008bd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bda:	3402      	adds	r4, #2
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008cb4 <_vfiprintf_r+0x22c>
 8008be2:	7821      	ldrb	r1, [r4, #0]
 8008be4:	2203      	movs	r2, #3
 8008be6:	4650      	mov	r0, sl
 8008be8:	f7f7 fad2 	bl	8000190 <memchr>
 8008bec:	b138      	cbz	r0, 8008bfe <_vfiprintf_r+0x176>
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	eba0 000a 	sub.w	r0, r0, sl
 8008bf4:	2240      	movs	r2, #64	@ 0x40
 8008bf6:	4082      	lsls	r2, r0
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	3401      	adds	r4, #1
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c02:	4829      	ldr	r0, [pc, #164]	@ (8008ca8 <_vfiprintf_r+0x220>)
 8008c04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c08:	2206      	movs	r2, #6
 8008c0a:	f7f7 fac1 	bl	8000190 <memchr>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d03f      	beq.n	8008c92 <_vfiprintf_r+0x20a>
 8008c12:	4b26      	ldr	r3, [pc, #152]	@ (8008cac <_vfiprintf_r+0x224>)
 8008c14:	bb1b      	cbnz	r3, 8008c5e <_vfiprintf_r+0x1d6>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	3307      	adds	r3, #7
 8008c1a:	f023 0307 	bic.w	r3, r3, #7
 8008c1e:	3308      	adds	r3, #8
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c24:	443b      	add	r3, r7
 8008c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c28:	e76a      	b.n	8008b00 <_vfiprintf_r+0x78>
 8008c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c2e:	460c      	mov	r4, r1
 8008c30:	2001      	movs	r0, #1
 8008c32:	e7a8      	b.n	8008b86 <_vfiprintf_r+0xfe>
 8008c34:	2300      	movs	r3, #0
 8008c36:	3401      	adds	r4, #1
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	f04f 0c0a 	mov.w	ip, #10
 8008c40:	4620      	mov	r0, r4
 8008c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c46:	3a30      	subs	r2, #48	@ 0x30
 8008c48:	2a09      	cmp	r2, #9
 8008c4a:	d903      	bls.n	8008c54 <_vfiprintf_r+0x1cc>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0c6      	beq.n	8008bde <_vfiprintf_r+0x156>
 8008c50:	9105      	str	r1, [sp, #20]
 8008c52:	e7c4      	b.n	8008bde <_vfiprintf_r+0x156>
 8008c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c58:	4604      	mov	r4, r0
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e7f0      	b.n	8008c40 <_vfiprintf_r+0x1b8>
 8008c5e:	ab03      	add	r3, sp, #12
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	462a      	mov	r2, r5
 8008c64:	4b12      	ldr	r3, [pc, #72]	@ (8008cb0 <_vfiprintf_r+0x228>)
 8008c66:	a904      	add	r1, sp, #16
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f3af 8000 	nop.w
 8008c6e:	4607      	mov	r7, r0
 8008c70:	1c78      	adds	r0, r7, #1
 8008c72:	d1d6      	bne.n	8008c22 <_vfiprintf_r+0x19a>
 8008c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c76:	07d9      	lsls	r1, r3, #31
 8008c78:	d405      	bmi.n	8008c86 <_vfiprintf_r+0x1fe>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	059a      	lsls	r2, r3, #22
 8008c7e:	d402      	bmi.n	8008c86 <_vfiprintf_r+0x1fe>
 8008c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c82:	f7ff fdcf 	bl	8008824 <__retarget_lock_release_recursive>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	065b      	lsls	r3, r3, #25
 8008c8a:	f53f af1f 	bmi.w	8008acc <_vfiprintf_r+0x44>
 8008c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c90:	e71e      	b.n	8008ad0 <_vfiprintf_r+0x48>
 8008c92:	ab03      	add	r3, sp, #12
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	462a      	mov	r2, r5
 8008c98:	4b05      	ldr	r3, [pc, #20]	@ (8008cb0 <_vfiprintf_r+0x228>)
 8008c9a:	a904      	add	r1, sp, #16
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f000 f879 	bl	8008d94 <_printf_i>
 8008ca2:	e7e4      	b.n	8008c6e <_vfiprintf_r+0x1e6>
 8008ca4:	080096f8 	.word	0x080096f8
 8008ca8:	08009702 	.word	0x08009702
 8008cac:	00000000 	.word	0x00000000
 8008cb0:	08008a63 	.word	0x08008a63
 8008cb4:	080096fe 	.word	0x080096fe

08008cb8 <_printf_common>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	4616      	mov	r6, r2
 8008cbe:	4698      	mov	r8, r3
 8008cc0:	688a      	ldr	r2, [r1, #8]
 8008cc2:	690b      	ldr	r3, [r1, #16]
 8008cc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	bfb8      	it	lt
 8008ccc:	4613      	movlt	r3, r2
 8008cce:	6033      	str	r3, [r6, #0]
 8008cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cd4:	4607      	mov	r7, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	b10a      	cbz	r2, 8008cde <_printf_common+0x26>
 8008cda:	3301      	adds	r3, #1
 8008cdc:	6033      	str	r3, [r6, #0]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	0699      	lsls	r1, r3, #26
 8008ce2:	bf42      	ittt	mi
 8008ce4:	6833      	ldrmi	r3, [r6, #0]
 8008ce6:	3302      	addmi	r3, #2
 8008ce8:	6033      	strmi	r3, [r6, #0]
 8008cea:	6825      	ldr	r5, [r4, #0]
 8008cec:	f015 0506 	ands.w	r5, r5, #6
 8008cf0:	d106      	bne.n	8008d00 <_printf_common+0x48>
 8008cf2:	f104 0a19 	add.w	sl, r4, #25
 8008cf6:	68e3      	ldr	r3, [r4, #12]
 8008cf8:	6832      	ldr	r2, [r6, #0]
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	42ab      	cmp	r3, r5
 8008cfe:	dc26      	bgt.n	8008d4e <_printf_common+0x96>
 8008d00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d04:	6822      	ldr	r2, [r4, #0]
 8008d06:	3b00      	subs	r3, #0
 8008d08:	bf18      	it	ne
 8008d0a:	2301      	movne	r3, #1
 8008d0c:	0692      	lsls	r2, r2, #26
 8008d0e:	d42b      	bmi.n	8008d68 <_printf_common+0xb0>
 8008d10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d14:	4641      	mov	r1, r8
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c8      	blx	r9
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d01e      	beq.n	8008d5c <_printf_common+0xa4>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	6922      	ldr	r2, [r4, #16]
 8008d22:	f003 0306 	and.w	r3, r3, #6
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	bf02      	ittt	eq
 8008d2a:	68e5      	ldreq	r5, [r4, #12]
 8008d2c:	6833      	ldreq	r3, [r6, #0]
 8008d2e:	1aed      	subeq	r5, r5, r3
 8008d30:	68a3      	ldr	r3, [r4, #8]
 8008d32:	bf0c      	ite	eq
 8008d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d38:	2500      	movne	r5, #0
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	bfc4      	itt	gt
 8008d3e:	1a9b      	subgt	r3, r3, r2
 8008d40:	18ed      	addgt	r5, r5, r3
 8008d42:	2600      	movs	r6, #0
 8008d44:	341a      	adds	r4, #26
 8008d46:	42b5      	cmp	r5, r6
 8008d48:	d11a      	bne.n	8008d80 <_printf_common+0xc8>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e008      	b.n	8008d60 <_printf_common+0xa8>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4652      	mov	r2, sl
 8008d52:	4641      	mov	r1, r8
 8008d54:	4638      	mov	r0, r7
 8008d56:	47c8      	blx	r9
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d103      	bne.n	8008d64 <_printf_common+0xac>
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d64:	3501      	adds	r5, #1
 8008d66:	e7c6      	b.n	8008cf6 <_printf_common+0x3e>
 8008d68:	18e1      	adds	r1, r4, r3
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	2030      	movs	r0, #48	@ 0x30
 8008d6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d72:	4422      	add	r2, r4
 8008d74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d7c:	3302      	adds	r3, #2
 8008d7e:	e7c7      	b.n	8008d10 <_printf_common+0x58>
 8008d80:	2301      	movs	r3, #1
 8008d82:	4622      	mov	r2, r4
 8008d84:	4641      	mov	r1, r8
 8008d86:	4638      	mov	r0, r7
 8008d88:	47c8      	blx	r9
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d0e6      	beq.n	8008d5c <_printf_common+0xa4>
 8008d8e:	3601      	adds	r6, #1
 8008d90:	e7d9      	b.n	8008d46 <_printf_common+0x8e>
	...

08008d94 <_printf_i>:
 8008d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d98:	7e0f      	ldrb	r7, [r1, #24]
 8008d9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d9c:	2f78      	cmp	r7, #120	@ 0x78
 8008d9e:	4691      	mov	r9, r2
 8008da0:	4680      	mov	r8, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	469a      	mov	sl, r3
 8008da6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008daa:	d807      	bhi.n	8008dbc <_printf_i+0x28>
 8008dac:	2f62      	cmp	r7, #98	@ 0x62
 8008dae:	d80a      	bhi.n	8008dc6 <_printf_i+0x32>
 8008db0:	2f00      	cmp	r7, #0
 8008db2:	f000 80d2 	beq.w	8008f5a <_printf_i+0x1c6>
 8008db6:	2f58      	cmp	r7, #88	@ 0x58
 8008db8:	f000 80b9 	beq.w	8008f2e <_printf_i+0x19a>
 8008dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008dc4:	e03a      	b.n	8008e3c <_printf_i+0xa8>
 8008dc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dca:	2b15      	cmp	r3, #21
 8008dcc:	d8f6      	bhi.n	8008dbc <_printf_i+0x28>
 8008dce:	a101      	add	r1, pc, #4	@ (adr r1, 8008dd4 <_printf_i+0x40>)
 8008dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd4:	08008e2d 	.word	0x08008e2d
 8008dd8:	08008e41 	.word	0x08008e41
 8008ddc:	08008dbd 	.word	0x08008dbd
 8008de0:	08008dbd 	.word	0x08008dbd
 8008de4:	08008dbd 	.word	0x08008dbd
 8008de8:	08008dbd 	.word	0x08008dbd
 8008dec:	08008e41 	.word	0x08008e41
 8008df0:	08008dbd 	.word	0x08008dbd
 8008df4:	08008dbd 	.word	0x08008dbd
 8008df8:	08008dbd 	.word	0x08008dbd
 8008dfc:	08008dbd 	.word	0x08008dbd
 8008e00:	08008f41 	.word	0x08008f41
 8008e04:	08008e6b 	.word	0x08008e6b
 8008e08:	08008efb 	.word	0x08008efb
 8008e0c:	08008dbd 	.word	0x08008dbd
 8008e10:	08008dbd 	.word	0x08008dbd
 8008e14:	08008f63 	.word	0x08008f63
 8008e18:	08008dbd 	.word	0x08008dbd
 8008e1c:	08008e6b 	.word	0x08008e6b
 8008e20:	08008dbd 	.word	0x08008dbd
 8008e24:	08008dbd 	.word	0x08008dbd
 8008e28:	08008f03 	.word	0x08008f03
 8008e2c:	6833      	ldr	r3, [r6, #0]
 8008e2e:	1d1a      	adds	r2, r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6032      	str	r2, [r6, #0]
 8008e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e09d      	b.n	8008f7c <_printf_i+0x1e8>
 8008e40:	6833      	ldr	r3, [r6, #0]
 8008e42:	6820      	ldr	r0, [r4, #0]
 8008e44:	1d19      	adds	r1, r3, #4
 8008e46:	6031      	str	r1, [r6, #0]
 8008e48:	0606      	lsls	r6, r0, #24
 8008e4a:	d501      	bpl.n	8008e50 <_printf_i+0xbc>
 8008e4c:	681d      	ldr	r5, [r3, #0]
 8008e4e:	e003      	b.n	8008e58 <_printf_i+0xc4>
 8008e50:	0645      	lsls	r5, r0, #25
 8008e52:	d5fb      	bpl.n	8008e4c <_printf_i+0xb8>
 8008e54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e58:	2d00      	cmp	r5, #0
 8008e5a:	da03      	bge.n	8008e64 <_printf_i+0xd0>
 8008e5c:	232d      	movs	r3, #45	@ 0x2d
 8008e5e:	426d      	negs	r5, r5
 8008e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e64:	4859      	ldr	r0, [pc, #356]	@ (8008fcc <_printf_i+0x238>)
 8008e66:	230a      	movs	r3, #10
 8008e68:	e011      	b.n	8008e8e <_printf_i+0xfa>
 8008e6a:	6821      	ldr	r1, [r4, #0]
 8008e6c:	6833      	ldr	r3, [r6, #0]
 8008e6e:	0608      	lsls	r0, r1, #24
 8008e70:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e74:	d402      	bmi.n	8008e7c <_printf_i+0xe8>
 8008e76:	0649      	lsls	r1, r1, #25
 8008e78:	bf48      	it	mi
 8008e7a:	b2ad      	uxthmi	r5, r5
 8008e7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e7e:	4853      	ldr	r0, [pc, #332]	@ (8008fcc <_printf_i+0x238>)
 8008e80:	6033      	str	r3, [r6, #0]
 8008e82:	bf14      	ite	ne
 8008e84:	230a      	movne	r3, #10
 8008e86:	2308      	moveq	r3, #8
 8008e88:	2100      	movs	r1, #0
 8008e8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e8e:	6866      	ldr	r6, [r4, #4]
 8008e90:	60a6      	str	r6, [r4, #8]
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	bfa2      	ittt	ge
 8008e96:	6821      	ldrge	r1, [r4, #0]
 8008e98:	f021 0104 	bicge.w	r1, r1, #4
 8008e9c:	6021      	strge	r1, [r4, #0]
 8008e9e:	b90d      	cbnz	r5, 8008ea4 <_printf_i+0x110>
 8008ea0:	2e00      	cmp	r6, #0
 8008ea2:	d04b      	beq.n	8008f3c <_printf_i+0x1a8>
 8008ea4:	4616      	mov	r6, r2
 8008ea6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eaa:	fb03 5711 	mls	r7, r3, r1, r5
 8008eae:	5dc7      	ldrb	r7, [r0, r7]
 8008eb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008eb4:	462f      	mov	r7, r5
 8008eb6:	42bb      	cmp	r3, r7
 8008eb8:	460d      	mov	r5, r1
 8008eba:	d9f4      	bls.n	8008ea6 <_printf_i+0x112>
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d10b      	bne.n	8008ed8 <_printf_i+0x144>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	07df      	lsls	r7, r3, #31
 8008ec4:	d508      	bpl.n	8008ed8 <_printf_i+0x144>
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	6861      	ldr	r1, [r4, #4]
 8008eca:	4299      	cmp	r1, r3
 8008ecc:	bfde      	ittt	le
 8008ece:	2330      	movle	r3, #48	@ 0x30
 8008ed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ed4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ed8:	1b92      	subs	r2, r2, r6
 8008eda:	6122      	str	r2, [r4, #16]
 8008edc:	f8cd a000 	str.w	sl, [sp]
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	aa03      	add	r2, sp, #12
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	f7ff fee6 	bl	8008cb8 <_printf_common>
 8008eec:	3001      	adds	r0, #1
 8008eee:	d14a      	bne.n	8008f86 <_printf_i+0x1f2>
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	b004      	add	sp, #16
 8008ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	f043 0320 	orr.w	r3, r3, #32
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	4833      	ldr	r0, [pc, #204]	@ (8008fd0 <_printf_i+0x23c>)
 8008f04:	2778      	movs	r7, #120	@ 0x78
 8008f06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	6831      	ldr	r1, [r6, #0]
 8008f0e:	061f      	lsls	r7, r3, #24
 8008f10:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f14:	d402      	bmi.n	8008f1c <_printf_i+0x188>
 8008f16:	065f      	lsls	r7, r3, #25
 8008f18:	bf48      	it	mi
 8008f1a:	b2ad      	uxthmi	r5, r5
 8008f1c:	6031      	str	r1, [r6, #0]
 8008f1e:	07d9      	lsls	r1, r3, #31
 8008f20:	bf44      	itt	mi
 8008f22:	f043 0320 	orrmi.w	r3, r3, #32
 8008f26:	6023      	strmi	r3, [r4, #0]
 8008f28:	b11d      	cbz	r5, 8008f32 <_printf_i+0x19e>
 8008f2a:	2310      	movs	r3, #16
 8008f2c:	e7ac      	b.n	8008e88 <_printf_i+0xf4>
 8008f2e:	4827      	ldr	r0, [pc, #156]	@ (8008fcc <_printf_i+0x238>)
 8008f30:	e7e9      	b.n	8008f06 <_printf_i+0x172>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	f023 0320 	bic.w	r3, r3, #32
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	e7f6      	b.n	8008f2a <_printf_i+0x196>
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	e7bd      	b.n	8008ebc <_printf_i+0x128>
 8008f40:	6833      	ldr	r3, [r6, #0]
 8008f42:	6825      	ldr	r5, [r4, #0]
 8008f44:	6961      	ldr	r1, [r4, #20]
 8008f46:	1d18      	adds	r0, r3, #4
 8008f48:	6030      	str	r0, [r6, #0]
 8008f4a:	062e      	lsls	r6, r5, #24
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	d501      	bpl.n	8008f54 <_printf_i+0x1c0>
 8008f50:	6019      	str	r1, [r3, #0]
 8008f52:	e002      	b.n	8008f5a <_printf_i+0x1c6>
 8008f54:	0668      	lsls	r0, r5, #25
 8008f56:	d5fb      	bpl.n	8008f50 <_printf_i+0x1bc>
 8008f58:	8019      	strh	r1, [r3, #0]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6123      	str	r3, [r4, #16]
 8008f5e:	4616      	mov	r6, r2
 8008f60:	e7bc      	b.n	8008edc <_printf_i+0x148>
 8008f62:	6833      	ldr	r3, [r6, #0]
 8008f64:	1d1a      	adds	r2, r3, #4
 8008f66:	6032      	str	r2, [r6, #0]
 8008f68:	681e      	ldr	r6, [r3, #0]
 8008f6a:	6862      	ldr	r2, [r4, #4]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7f7 f90e 	bl	8000190 <memchr>
 8008f74:	b108      	cbz	r0, 8008f7a <_printf_i+0x1e6>
 8008f76:	1b80      	subs	r0, r0, r6
 8008f78:	6060      	str	r0, [r4, #4]
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	6123      	str	r3, [r4, #16]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f84:	e7aa      	b.n	8008edc <_printf_i+0x148>
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	4632      	mov	r2, r6
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	47d0      	blx	sl
 8008f90:	3001      	adds	r0, #1
 8008f92:	d0ad      	beq.n	8008ef0 <_printf_i+0x15c>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	079b      	lsls	r3, r3, #30
 8008f98:	d413      	bmi.n	8008fc2 <_printf_i+0x22e>
 8008f9a:	68e0      	ldr	r0, [r4, #12]
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	4298      	cmp	r0, r3
 8008fa0:	bfb8      	it	lt
 8008fa2:	4618      	movlt	r0, r3
 8008fa4:	e7a6      	b.n	8008ef4 <_printf_i+0x160>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4632      	mov	r2, r6
 8008faa:	4649      	mov	r1, r9
 8008fac:	4640      	mov	r0, r8
 8008fae:	47d0      	blx	sl
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d09d      	beq.n	8008ef0 <_printf_i+0x15c>
 8008fb4:	3501      	adds	r5, #1
 8008fb6:	68e3      	ldr	r3, [r4, #12]
 8008fb8:	9903      	ldr	r1, [sp, #12]
 8008fba:	1a5b      	subs	r3, r3, r1
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	dcf2      	bgt.n	8008fa6 <_printf_i+0x212>
 8008fc0:	e7eb      	b.n	8008f9a <_printf_i+0x206>
 8008fc2:	2500      	movs	r5, #0
 8008fc4:	f104 0619 	add.w	r6, r4, #25
 8008fc8:	e7f5      	b.n	8008fb6 <_printf_i+0x222>
 8008fca:	bf00      	nop
 8008fcc:	08009709 	.word	0x08009709
 8008fd0:	0800971a 	.word	0x0800971a

08008fd4 <__sflush_r>:
 8008fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	0716      	lsls	r6, r2, #28
 8008fde:	4605      	mov	r5, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	d454      	bmi.n	800908e <__sflush_r+0xba>
 8008fe4:	684b      	ldr	r3, [r1, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dc02      	bgt.n	8008ff0 <__sflush_r+0x1c>
 8008fea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dd48      	ble.n	8009082 <__sflush_r+0xae>
 8008ff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ff2:	2e00      	cmp	r6, #0
 8008ff4:	d045      	beq.n	8009082 <__sflush_r+0xae>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ffc:	682f      	ldr	r7, [r5, #0]
 8008ffe:	6a21      	ldr	r1, [r4, #32]
 8009000:	602b      	str	r3, [r5, #0]
 8009002:	d030      	beq.n	8009066 <__sflush_r+0x92>
 8009004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	0759      	lsls	r1, r3, #29
 800900a:	d505      	bpl.n	8009018 <__sflush_r+0x44>
 800900c:	6863      	ldr	r3, [r4, #4]
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009012:	b10b      	cbz	r3, 8009018 <__sflush_r+0x44>
 8009014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	2300      	movs	r3, #0
 800901a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800901c:	6a21      	ldr	r1, [r4, #32]
 800901e:	4628      	mov	r0, r5
 8009020:	47b0      	blx	r6
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	d106      	bne.n	8009036 <__sflush_r+0x62>
 8009028:	6829      	ldr	r1, [r5, #0]
 800902a:	291d      	cmp	r1, #29
 800902c:	d82b      	bhi.n	8009086 <__sflush_r+0xb2>
 800902e:	4a2a      	ldr	r2, [pc, #168]	@ (80090d8 <__sflush_r+0x104>)
 8009030:	410a      	asrs	r2, r1
 8009032:	07d6      	lsls	r6, r2, #31
 8009034:	d427      	bmi.n	8009086 <__sflush_r+0xb2>
 8009036:	2200      	movs	r2, #0
 8009038:	6062      	str	r2, [r4, #4]
 800903a:	04d9      	lsls	r1, r3, #19
 800903c:	6922      	ldr	r2, [r4, #16]
 800903e:	6022      	str	r2, [r4, #0]
 8009040:	d504      	bpl.n	800904c <__sflush_r+0x78>
 8009042:	1c42      	adds	r2, r0, #1
 8009044:	d101      	bne.n	800904a <__sflush_r+0x76>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	b903      	cbnz	r3, 800904c <__sflush_r+0x78>
 800904a:	6560      	str	r0, [r4, #84]	@ 0x54
 800904c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800904e:	602f      	str	r7, [r5, #0]
 8009050:	b1b9      	cbz	r1, 8009082 <__sflush_r+0xae>
 8009052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009056:	4299      	cmp	r1, r3
 8009058:	d002      	beq.n	8009060 <__sflush_r+0x8c>
 800905a:	4628      	mov	r0, r5
 800905c:	f7ff fbf2 	bl	8008844 <_free_r>
 8009060:	2300      	movs	r3, #0
 8009062:	6363      	str	r3, [r4, #52]	@ 0x34
 8009064:	e00d      	b.n	8009082 <__sflush_r+0xae>
 8009066:	2301      	movs	r3, #1
 8009068:	4628      	mov	r0, r5
 800906a:	47b0      	blx	r6
 800906c:	4602      	mov	r2, r0
 800906e:	1c50      	adds	r0, r2, #1
 8009070:	d1c9      	bne.n	8009006 <__sflush_r+0x32>
 8009072:	682b      	ldr	r3, [r5, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0c6      	beq.n	8009006 <__sflush_r+0x32>
 8009078:	2b1d      	cmp	r3, #29
 800907a:	d001      	beq.n	8009080 <__sflush_r+0xac>
 800907c:	2b16      	cmp	r3, #22
 800907e:	d11e      	bne.n	80090be <__sflush_r+0xea>
 8009080:	602f      	str	r7, [r5, #0]
 8009082:	2000      	movs	r0, #0
 8009084:	e022      	b.n	80090cc <__sflush_r+0xf8>
 8009086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800908a:	b21b      	sxth	r3, r3
 800908c:	e01b      	b.n	80090c6 <__sflush_r+0xf2>
 800908e:	690f      	ldr	r7, [r1, #16]
 8009090:	2f00      	cmp	r7, #0
 8009092:	d0f6      	beq.n	8009082 <__sflush_r+0xae>
 8009094:	0793      	lsls	r3, r2, #30
 8009096:	680e      	ldr	r6, [r1, #0]
 8009098:	bf08      	it	eq
 800909a:	694b      	ldreq	r3, [r1, #20]
 800909c:	600f      	str	r7, [r1, #0]
 800909e:	bf18      	it	ne
 80090a0:	2300      	movne	r3, #0
 80090a2:	eba6 0807 	sub.w	r8, r6, r7
 80090a6:	608b      	str	r3, [r1, #8]
 80090a8:	f1b8 0f00 	cmp.w	r8, #0
 80090ac:	dde9      	ble.n	8009082 <__sflush_r+0xae>
 80090ae:	6a21      	ldr	r1, [r4, #32]
 80090b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090b2:	4643      	mov	r3, r8
 80090b4:	463a      	mov	r2, r7
 80090b6:	4628      	mov	r0, r5
 80090b8:	47b0      	blx	r6
 80090ba:	2800      	cmp	r0, #0
 80090bc:	dc08      	bgt.n	80090d0 <__sflush_r+0xfc>
 80090be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d0:	4407      	add	r7, r0
 80090d2:	eba8 0800 	sub.w	r8, r8, r0
 80090d6:	e7e7      	b.n	80090a8 <__sflush_r+0xd4>
 80090d8:	dfbffffe 	.word	0xdfbffffe

080090dc <_fflush_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	690b      	ldr	r3, [r1, #16]
 80090e0:	4605      	mov	r5, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	b913      	cbnz	r3, 80090ec <_fflush_r+0x10>
 80090e6:	2500      	movs	r5, #0
 80090e8:	4628      	mov	r0, r5
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	b118      	cbz	r0, 80090f6 <_fflush_r+0x1a>
 80090ee:	6a03      	ldr	r3, [r0, #32]
 80090f0:	b90b      	cbnz	r3, 80090f6 <_fflush_r+0x1a>
 80090f2:	f7ff fa89 	bl	8008608 <__sinit>
 80090f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f3      	beq.n	80090e6 <_fflush_r+0xa>
 80090fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009100:	07d0      	lsls	r0, r2, #31
 8009102:	d404      	bmi.n	800910e <_fflush_r+0x32>
 8009104:	0599      	lsls	r1, r3, #22
 8009106:	d402      	bmi.n	800910e <_fflush_r+0x32>
 8009108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800910a:	f7ff fb8a 	bl	8008822 <__retarget_lock_acquire_recursive>
 800910e:	4628      	mov	r0, r5
 8009110:	4621      	mov	r1, r4
 8009112:	f7ff ff5f 	bl	8008fd4 <__sflush_r>
 8009116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009118:	07da      	lsls	r2, r3, #31
 800911a:	4605      	mov	r5, r0
 800911c:	d4e4      	bmi.n	80090e8 <_fflush_r+0xc>
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	059b      	lsls	r3, r3, #22
 8009122:	d4e1      	bmi.n	80090e8 <_fflush_r+0xc>
 8009124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009126:	f7ff fb7d 	bl	8008824 <__retarget_lock_release_recursive>
 800912a:	e7dd      	b.n	80090e8 <_fflush_r+0xc>

0800912c <_putc_r>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	460d      	mov	r5, r1
 8009130:	4614      	mov	r4, r2
 8009132:	4606      	mov	r6, r0
 8009134:	b118      	cbz	r0, 800913e <_putc_r+0x12>
 8009136:	6a03      	ldr	r3, [r0, #32]
 8009138:	b90b      	cbnz	r3, 800913e <_putc_r+0x12>
 800913a:	f7ff fa65 	bl	8008608 <__sinit>
 800913e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009140:	07d8      	lsls	r0, r3, #31
 8009142:	d405      	bmi.n	8009150 <_putc_r+0x24>
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	0599      	lsls	r1, r3, #22
 8009148:	d402      	bmi.n	8009150 <_putc_r+0x24>
 800914a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800914c:	f7ff fb69 	bl	8008822 <__retarget_lock_acquire_recursive>
 8009150:	68a3      	ldr	r3, [r4, #8]
 8009152:	3b01      	subs	r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	60a3      	str	r3, [r4, #8]
 8009158:	da05      	bge.n	8009166 <_putc_r+0x3a>
 800915a:	69a2      	ldr	r2, [r4, #24]
 800915c:	4293      	cmp	r3, r2
 800915e:	db12      	blt.n	8009186 <_putc_r+0x5a>
 8009160:	b2eb      	uxtb	r3, r5
 8009162:	2b0a      	cmp	r3, #10
 8009164:	d00f      	beq.n	8009186 <_putc_r+0x5a>
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	6022      	str	r2, [r4, #0]
 800916c:	701d      	strb	r5, [r3, #0]
 800916e:	b2ed      	uxtb	r5, r5
 8009170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009172:	07da      	lsls	r2, r3, #31
 8009174:	d405      	bmi.n	8009182 <_putc_r+0x56>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	059b      	lsls	r3, r3, #22
 800917a:	d402      	bmi.n	8009182 <_putc_r+0x56>
 800917c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800917e:	f7ff fb51 	bl	8008824 <__retarget_lock_release_recursive>
 8009182:	4628      	mov	r0, r5
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	4629      	mov	r1, r5
 8009188:	4622      	mov	r2, r4
 800918a:	4630      	mov	r0, r6
 800918c:	f000 f802 	bl	8009194 <__swbuf_r>
 8009190:	4605      	mov	r5, r0
 8009192:	e7ed      	b.n	8009170 <_putc_r+0x44>

08009194 <__swbuf_r>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	460e      	mov	r6, r1
 8009198:	4614      	mov	r4, r2
 800919a:	4605      	mov	r5, r0
 800919c:	b118      	cbz	r0, 80091a6 <__swbuf_r+0x12>
 800919e:	6a03      	ldr	r3, [r0, #32]
 80091a0:	b90b      	cbnz	r3, 80091a6 <__swbuf_r+0x12>
 80091a2:	f7ff fa31 	bl	8008608 <__sinit>
 80091a6:	69a3      	ldr	r3, [r4, #24]
 80091a8:	60a3      	str	r3, [r4, #8]
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	071a      	lsls	r2, r3, #28
 80091ae:	d501      	bpl.n	80091b4 <__swbuf_r+0x20>
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	b943      	cbnz	r3, 80091c6 <__swbuf_r+0x32>
 80091b4:	4621      	mov	r1, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 f82a 	bl	8009210 <__swsetup_r>
 80091bc:	b118      	cbz	r0, 80091c6 <__swbuf_r+0x32>
 80091be:	f04f 37ff 	mov.w	r7, #4294967295
 80091c2:	4638      	mov	r0, r7
 80091c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	6922      	ldr	r2, [r4, #16]
 80091ca:	1a98      	subs	r0, r3, r2
 80091cc:	6963      	ldr	r3, [r4, #20]
 80091ce:	b2f6      	uxtb	r6, r6
 80091d0:	4283      	cmp	r3, r0
 80091d2:	4637      	mov	r7, r6
 80091d4:	dc05      	bgt.n	80091e2 <__swbuf_r+0x4e>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f7ff ff7f 	bl	80090dc <_fflush_r>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d1ed      	bne.n	80091be <__swbuf_r+0x2a>
 80091e2:	68a3      	ldr	r3, [r4, #8]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	60a3      	str	r3, [r4, #8]
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	6022      	str	r2, [r4, #0]
 80091ee:	701e      	strb	r6, [r3, #0]
 80091f0:	6962      	ldr	r2, [r4, #20]
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d004      	beq.n	8009202 <__swbuf_r+0x6e>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	07db      	lsls	r3, r3, #31
 80091fc:	d5e1      	bpl.n	80091c2 <__swbuf_r+0x2e>
 80091fe:	2e0a      	cmp	r6, #10
 8009200:	d1df      	bne.n	80091c2 <__swbuf_r+0x2e>
 8009202:	4621      	mov	r1, r4
 8009204:	4628      	mov	r0, r5
 8009206:	f7ff ff69 	bl	80090dc <_fflush_r>
 800920a:	2800      	cmp	r0, #0
 800920c:	d0d9      	beq.n	80091c2 <__swbuf_r+0x2e>
 800920e:	e7d6      	b.n	80091be <__swbuf_r+0x2a>

08009210 <__swsetup_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4b29      	ldr	r3, [pc, #164]	@ (80092b8 <__swsetup_r+0xa8>)
 8009214:	4605      	mov	r5, r0
 8009216:	6818      	ldr	r0, [r3, #0]
 8009218:	460c      	mov	r4, r1
 800921a:	b118      	cbz	r0, 8009224 <__swsetup_r+0x14>
 800921c:	6a03      	ldr	r3, [r0, #32]
 800921e:	b90b      	cbnz	r3, 8009224 <__swsetup_r+0x14>
 8009220:	f7ff f9f2 	bl	8008608 <__sinit>
 8009224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009228:	0719      	lsls	r1, r3, #28
 800922a:	d422      	bmi.n	8009272 <__swsetup_r+0x62>
 800922c:	06da      	lsls	r2, r3, #27
 800922e:	d407      	bmi.n	8009240 <__swsetup_r+0x30>
 8009230:	2209      	movs	r2, #9
 8009232:	602a      	str	r2, [r5, #0]
 8009234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	f04f 30ff 	mov.w	r0, #4294967295
 800923e:	e033      	b.n	80092a8 <__swsetup_r+0x98>
 8009240:	0758      	lsls	r0, r3, #29
 8009242:	d512      	bpl.n	800926a <__swsetup_r+0x5a>
 8009244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009246:	b141      	cbz	r1, 800925a <__swsetup_r+0x4a>
 8009248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800924c:	4299      	cmp	r1, r3
 800924e:	d002      	beq.n	8009256 <__swsetup_r+0x46>
 8009250:	4628      	mov	r0, r5
 8009252:	f7ff faf7 	bl	8008844 <_free_r>
 8009256:	2300      	movs	r3, #0
 8009258:	6363      	str	r3, [r4, #52]	@ 0x34
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009260:	81a3      	strh	r3, [r4, #12]
 8009262:	2300      	movs	r3, #0
 8009264:	6063      	str	r3, [r4, #4]
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f043 0308 	orr.w	r3, r3, #8
 8009270:	81a3      	strh	r3, [r4, #12]
 8009272:	6923      	ldr	r3, [r4, #16]
 8009274:	b94b      	cbnz	r3, 800928a <__swsetup_r+0x7a>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800927c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009280:	d003      	beq.n	800928a <__swsetup_r+0x7a>
 8009282:	4621      	mov	r1, r4
 8009284:	4628      	mov	r0, r5
 8009286:	f000 f84f 	bl	8009328 <__smakebuf_r>
 800928a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800928e:	f013 0201 	ands.w	r2, r3, #1
 8009292:	d00a      	beq.n	80092aa <__swsetup_r+0x9a>
 8009294:	2200      	movs	r2, #0
 8009296:	60a2      	str	r2, [r4, #8]
 8009298:	6962      	ldr	r2, [r4, #20]
 800929a:	4252      	negs	r2, r2
 800929c:	61a2      	str	r2, [r4, #24]
 800929e:	6922      	ldr	r2, [r4, #16]
 80092a0:	b942      	cbnz	r2, 80092b4 <__swsetup_r+0xa4>
 80092a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092a6:	d1c5      	bne.n	8009234 <__swsetup_r+0x24>
 80092a8:	bd38      	pop	{r3, r4, r5, pc}
 80092aa:	0799      	lsls	r1, r3, #30
 80092ac:	bf58      	it	pl
 80092ae:	6962      	ldrpl	r2, [r4, #20]
 80092b0:	60a2      	str	r2, [r4, #8]
 80092b2:	e7f4      	b.n	800929e <__swsetup_r+0x8e>
 80092b4:	2000      	movs	r0, #0
 80092b6:	e7f7      	b.n	80092a8 <__swsetup_r+0x98>
 80092b8:	20000074 	.word	0x20000074

080092bc <_sbrk_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d06      	ldr	r5, [pc, #24]	@ (80092d8 <_sbrk_r+0x1c>)
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	f7f8 fd00 	bl	8001ccc <_sbrk>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_sbrk_r+0x1a>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_sbrk_r+0x1a>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	200005c8 	.word	0x200005c8

080092dc <__swhatbuf_r>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	460c      	mov	r4, r1
 80092e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e4:	2900      	cmp	r1, #0
 80092e6:	b096      	sub	sp, #88	@ 0x58
 80092e8:	4615      	mov	r5, r2
 80092ea:	461e      	mov	r6, r3
 80092ec:	da0d      	bge.n	800930a <__swhatbuf_r+0x2e>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092f4:	f04f 0100 	mov.w	r1, #0
 80092f8:	bf14      	ite	ne
 80092fa:	2340      	movne	r3, #64	@ 0x40
 80092fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009300:	2000      	movs	r0, #0
 8009302:	6031      	str	r1, [r6, #0]
 8009304:	602b      	str	r3, [r5, #0]
 8009306:	b016      	add	sp, #88	@ 0x58
 8009308:	bd70      	pop	{r4, r5, r6, pc}
 800930a:	466a      	mov	r2, sp
 800930c:	f000 f848 	bl	80093a0 <_fstat_r>
 8009310:	2800      	cmp	r0, #0
 8009312:	dbec      	blt.n	80092ee <__swhatbuf_r+0x12>
 8009314:	9901      	ldr	r1, [sp, #4]
 8009316:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800931a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800931e:	4259      	negs	r1, r3
 8009320:	4159      	adcs	r1, r3
 8009322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009326:	e7eb      	b.n	8009300 <__swhatbuf_r+0x24>

08009328 <__smakebuf_r>:
 8009328:	898b      	ldrh	r3, [r1, #12]
 800932a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800932c:	079d      	lsls	r5, r3, #30
 800932e:	4606      	mov	r6, r0
 8009330:	460c      	mov	r4, r1
 8009332:	d507      	bpl.n	8009344 <__smakebuf_r+0x1c>
 8009334:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	2301      	movs	r3, #1
 800933e:	6163      	str	r3, [r4, #20]
 8009340:	b003      	add	sp, #12
 8009342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009344:	ab01      	add	r3, sp, #4
 8009346:	466a      	mov	r2, sp
 8009348:	f7ff ffc8 	bl	80092dc <__swhatbuf_r>
 800934c:	9f00      	ldr	r7, [sp, #0]
 800934e:	4605      	mov	r5, r0
 8009350:	4639      	mov	r1, r7
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff fae2 	bl	800891c <_malloc_r>
 8009358:	b948      	cbnz	r0, 800936e <__smakebuf_r+0x46>
 800935a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935e:	059a      	lsls	r2, r3, #22
 8009360:	d4ee      	bmi.n	8009340 <__smakebuf_r+0x18>
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	f043 0302 	orr.w	r3, r3, #2
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	e7e2      	b.n	8009334 <__smakebuf_r+0xc>
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	6020      	str	r0, [r4, #0]
 8009372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	9b01      	ldr	r3, [sp, #4]
 800937a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800937e:	b15b      	cbz	r3, 8009398 <__smakebuf_r+0x70>
 8009380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009384:	4630      	mov	r0, r6
 8009386:	f000 f81d 	bl	80093c4 <_isatty_r>
 800938a:	b128      	cbz	r0, 8009398 <__smakebuf_r+0x70>
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	f043 0301 	orr.w	r3, r3, #1
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	431d      	orrs	r5, r3
 800939c:	81a5      	strh	r5, [r4, #12]
 800939e:	e7cf      	b.n	8009340 <__smakebuf_r+0x18>

080093a0 <_fstat_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d07      	ldr	r5, [pc, #28]	@ (80093c0 <_fstat_r+0x20>)
 80093a4:	2300      	movs	r3, #0
 80093a6:	4604      	mov	r4, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	4611      	mov	r1, r2
 80093ac:	602b      	str	r3, [r5, #0]
 80093ae:	f7f8 fc65 	bl	8001c7c <_fstat>
 80093b2:	1c43      	adds	r3, r0, #1
 80093b4:	d102      	bne.n	80093bc <_fstat_r+0x1c>
 80093b6:	682b      	ldr	r3, [r5, #0]
 80093b8:	b103      	cbz	r3, 80093bc <_fstat_r+0x1c>
 80093ba:	6023      	str	r3, [r4, #0]
 80093bc:	bd38      	pop	{r3, r4, r5, pc}
 80093be:	bf00      	nop
 80093c0:	200005c8 	.word	0x200005c8

080093c4 <_isatty_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d06      	ldr	r5, [pc, #24]	@ (80093e0 <_isatty_r+0x1c>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	602b      	str	r3, [r5, #0]
 80093d0:	f7f8 fc64 	bl	8001c9c <_isatty>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_isatty_r+0x1a>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	b103      	cbz	r3, 80093de <_isatty_r+0x1a>
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	200005c8 	.word	0x200005c8

080093e4 <_init>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	bf00      	nop
 80093e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ea:	bc08      	pop	{r3}
 80093ec:	469e      	mov	lr, r3
 80093ee:	4770      	bx	lr

080093f0 <_fini>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	bf00      	nop
 80093f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f6:	bc08      	pop	{r3}
 80093f8:	469e      	mov	lr, r3
 80093fa:	4770      	bx	lr
