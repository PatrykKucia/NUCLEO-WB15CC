
Sending_Receiving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f18  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800a058  0800a058  0000b058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a388  0800a388  0000b388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a390  0800a390  0000b390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a394  0800a394  0000b394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000c0  20000008  0800a398  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000c8  0800a458  0000c0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000100  0800a48d  0000c100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  20000114  0800a49e  0000c114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000834  0800a49e  0000c834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800a49e  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003121d  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000068dc  00000000  00000000  0003dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b88  00000000  00000000  00044590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002183  00000000  00000000  00047118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000290c5  00000000  00000000  0004929b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00032259  00000000  00000000  00072360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e002b  00000000  00000000  000a45b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001845e4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000be94  00000000  00000000  00184628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  001904bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000114 	.word	0x20000114
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a040 	.word	0x0800a040

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000118 	.word	0x20000118
 800017c:	0800a040 	.word	0x0800a040

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <APPD_EnableCPU2+0x5c>)
 8000528:	881a      	ldrh	r2, [r3, #0]
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800052c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <APPD_EnableCPU2+0x64>)
 8000530:	881a      	ldrh	r2, [r3, #0]
 8000532:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <APPD_EnableCPU2+0x60>)
 8000534:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <APPD_EnableCPU2+0x68>)
 8000538:	881a      	ldrh	r2, [r3, #0]
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800053c:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <APPD_EnableCPU2+0x6c>)
 8000540:	881a      	ldrh	r2, [r3, #0]
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <APPD_EnableCPU2+0x60>)
 8000544:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000546:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <APPD_EnableCPU2+0x70>)
 8000548:	881a      	ldrh	r2, [r3, #0]
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800054c:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <APPD_EnableCPU2+0x74>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	c403      	stmia	r4!, {r0, r1}
 800055e:	8022      	strh	r2, [r4, #0]
 8000560:	3402      	adds	r4, #2
 8000562:	0c13      	lsrs	r3, r2, #16
 8000564:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000566:	f007 fa5d 	bl	8007a24 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f006 fcee 	bl	8006f4e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000572:	bf00      	nop
}
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bdb0      	pop	{r4, r5, r7, pc}
 800057a:	bf00      	nop
 800057c:	20000008 	.word	0x20000008
 8000580:	200301e8 	.word	0x200301e8
 8000584:	2000000a 	.word	0x2000000a
 8000588:	2000000c 	.word	0x2000000c
 800058c:	2000000e 	.word	0x2000000e
 8000590:	20000010 	.word	0x20000010
 8000594:	0800a058 	.word	0x0800a058

08000598 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <LL_C2_PWR_SetPowerMode+0x28>)
 80005a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005a6:	f023 0207 	bic.w	r2, r3, #7
 80005aa:	4905      	ldr	r1, [pc, #20]	@ (80005c0 <LL_C2_PWR_SetPowerMode+0x28>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	58000400 	.word	0x58000400

080005c4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80005d2:	4905      	ldr	r1, [pc, #20]	@ (80005e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	58000800 	.word	0x58000800

080005ec <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000602:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000606:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000612:	4313      	orrs	r3, r2
 8000614:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	cafecafe 	.word	0xcafecafe

08000628 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800063a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	608b      	str	r3, [r1, #8]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <LL_DBGMCU_GetDeviceID+0x18>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e0042000 	.word	0xe0042000

0800066c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <LL_DBGMCU_GetRevisionID+0x18>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	b29b      	uxth	r3, r3
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e0042000 	.word	0xe0042000

08000688 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	22ff      	movs	r2, #255	@ 0xff
 8000694:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	22ca      	movs	r2, #202	@ 0xca
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2253      	movs	r2, #83	@ 0x53
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f023 0207 	bic.w	r2, r3, #7
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	431a      	orrs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	609a      	str	r2, [r3, #8]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <MX_APPE_Config+0x18>)
 80006ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006f2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80006f4:	f000 f824 	bl	8000740 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80006f8:	f000 f829 	bl	800074e <Config_HSE>

  return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58004000 	.word	0x58004000

08000704 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000708:	f000 f835 	bl	8000776 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800070c:	f000 f84e 	bl	80007ac <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000710:	4903      	ldr	r1, [pc, #12]	@ (8000720 <MX_APPE_Init+0x1c>)
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fd78 	bl	8001208 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000718:	f000 f858 	bl	80007cc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800071c:	bf00      	nop
}
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000020c 	.word	0x2000020c

08000724 <Init_Smps>:

void Init_Smps(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000728:	bf00      	nop
}
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <Init_Exti>:

void Init_Exti(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000736:	2050      	movs	r0, #80	@ 0x50
 8000738:	f7ff ff44 	bl	80005c4 <LL_EXTI_EnableIT_32_63>

  return;
 800073c:	bf00      	nop
}
 800073e:	bd80      	pop	{r7, pc}

08000740 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000744:	bf00      	nop
}
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000754:	2000      	movs	r0, #0
 8000756:	f007 f9f1 	bl	8007b3c <OTP_Read>
 800075a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d005      	beq.n	800076e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	799b      	ldrb	r3, [r3, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff40 	bl	80005ec <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800076c:	bf00      	nop
 800076e:	bf00      	nop
}
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <System_Init>:

static void System_Init(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  Init_Smps();
 800077a:	f7ff ffd3 	bl	8000724 <Init_Smps>

  Init_Exti();
 800077e:	f7ff ffd8 	bl	8000732 <Init_Exti>

  Init_Rtc();
 8000782:	f000 f803 	bl	800078c <Init_Rtc>

  return;
 8000786:	bf00      	nop
}
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <Init_Rtc>:

static void Init_Rtc(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000790:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <Init_Rtc+0x1c>)
 8000792:	f7ff ff86 	bl	80006a2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000796:	2100      	movs	r1, #0
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <Init_Rtc+0x1c>)
 800079a:	f7ff ff92 	bl	80006c2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800079e:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <Init_Rtc+0x1c>)
 80007a0:	f7ff ff72 	bl	8000688 <LL_RTC_EnableWriteProtection>

  return;
 80007a4:	bf00      	nop
}
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40002800 	.word	0x40002800

080007ac <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80007b0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80007b4:	f7ff ff38 	bl	8000628 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80007b8:	f008 fa6c 	bl	8008c94 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff feeb 	bl	8000598 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80007c2:	f002 fa27 	bl	8002c14 <HAL_PWREx_EnableSRAMRetention>

  return;
 80007c6:	bf00      	nop
}
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80007d2:	f006 ff71 	bl	80076b8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <appe_Tl_Init+0x50>)
 80007d8:	2100      	movs	r1, #0
 80007da:	2010      	movs	r0, #16
 80007dc:	f008 fb98 	bl	8008f10 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <appe_Tl_Init+0x54>)
 80007e2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <appe_Tl_Init+0x58>)
 80007e6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	480e      	ldr	r0, [pc, #56]	@ (8000828 <appe_Tl_Init+0x5c>)
 80007ee:	f006 fe25 	bl	800743c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <appe_Tl_Init+0x60>)
 80007f4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <appe_Tl_Init+0x64>)
 80007f8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <appe_Tl_Init+0x68>)
 80007fc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007fe:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000802:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f007 f897 	bl	800793c <TL_MM_Init>

  TL_Enable();
 800080e:	f006 ff4d 	bl	80076ac <TL_Enable>

  return;
 8000812:	bf00      	nop
}
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08007475 	.word	0x08007475
 8000820:	20030734 	.word	0x20030734
 8000824:	08000839 	.word	0x08000839
 8000828:	08000851 	.word	0x08000851
 800082c:	2003094c 	.word	0x2003094c
 8000830:	20030840 	.word	0x20030840
 8000834:	200301f8 	.word	0x200301f8

08000838 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000842:	bf00      	nop
}
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	330b      	adds	r3, #11
 800085e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800086a:	2b07      	cmp	r3, #7
 800086c:	d81f      	bhi.n	80008ae <APPE_SysUserEvtRx+0x5e>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <APPE_SysUserEvtRx+0x24>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000895 	.word	0x08000895
 8000878:	080008a7 	.word	0x080008a7
 800087c:	080008af 	.word	0x080008af
 8000880:	080008af 	.word	0x080008af
 8000884:	080008af 	.word	0x080008af
 8000888:	080008af 	.word	0x080008af
 800088c:	080008af 	.word	0x080008af
 8000890:	080008af 	.word	0x080008af
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4618      	mov	r0, r3
 800089a:	f006 fb85 	bl	8006fa8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 f81b 	bl	80008da <APPE_SysEvtReadyProcessing>
    break;
 80008a4:	e004      	b.n	80008b0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f806 	bl	80008b8 <APPE_SysEvtError>
    break;
 80008ac:	e000      	b.n	80008b0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80008ae:	bf00      	nop
  }

  return;
 80008b0:	bf00      	nop
}
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	330b      	adds	r3, #11
 80008c6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3302      	adds	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80008ce:	bf00      	nop
}
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b08a      	sub	sp, #40	@ 0x28
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	330b      	adds	r3, #11
 80008fe:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	3302      	adds	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11d      	bne.n	800094a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800090e:	f7ff fe07 	bl	8000520 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000912:	230f      	movs	r3, #15
 8000914:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000916:	237f      	movs	r3, #127	@ 0x7f
 8000918:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800091a:	f7ff fea7 	bl	800066c <LL_DBGMCU_GetRevisionID>
 800091e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000922:	b29b      	uxth	r3, r3
 8000924:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000926:	f7ff fe93 	bl	8000650 <LL_DBGMCU_GetDeviceID>
 800092a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	b29b      	uxth	r3, r3
 8000930:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4618      	mov	r0, r3
 8000938:	f006 fb20 	bl	8006f7c <SHCI_C2_Config>

    APP_BLE_Init();
 800093c:	f007 fa08 	bl	8007d50 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f008 f9b8 	bl	8008cb8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000948:	e007      	b.n	800095a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d103      	bne.n	800095a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
  return;
 8000958:	bf00      	nop
 800095a:	bf00      	nop
}
 800095c:	3728      	adds	r7, #40	@ 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000966:	f04f 30ff 	mov.w	r0, #4294967295
 800096a:	f008 f9d5 	bl	8008d18 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}

08000972 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000976:	bf00      	nop
}
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	f008 f9c3 	bl	8008d18 <UTIL_SEQ_Run>
  return;
 8000992:	bf00      	nop
}
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2010      	movs	r0, #16
 80009a6:	f008 fad5 	bl	8008f54 <UTIL_SEQ_SetTask>
  return;
 80009aa:	bf00      	nop
}
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80009ba:	2002      	movs	r0, #2
 80009bc:	f008 fb36 	bl	800902c <UTIL_SEQ_SetEvt>
  return;
 80009c0:	bf00      	nop
}
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f008 fb4b 	bl	800906c <UTIL_SEQ_WaitEvt>
  return;
 80009d6:	bf00      	nop
}
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <LL_EXTI_EnableIT_0_31>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <LL_EXTI_EnableIT_0_31+0x24>)
 80009ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80009ee:	4905      	ldr	r1, [pc, #20]	@ (8000a04 <LL_EXTI_EnableIT_0_31+0x24>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58000800 	.word	0x58000800

08000a08 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4904      	ldr	r1, [pc, #16]	@ (8000a28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	600b      	str	r3, [r1, #0]

}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	58000800 	.word	0x58000800

08000a2c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a42:	e005      	b.n	8000a50 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d1f5      	bne.n	8000a44 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a58:	683b      	ldr	r3, [r7, #0]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40002800 	.word	0x40002800

08000a6c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	491d      	ldr	r1, [pc, #116]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3315      	adds	r3, #21
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d009      	beq.n	8000aaa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	4916      	ldr	r1, [pc, #88]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	4911      	ldr	r1, [pc, #68]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3315      	adds	r3, #21
 8000aba:	7bfa      	ldrb	r2, [r7, #15]
 8000abc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	490c      	ldr	r1, [pc, #48]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79ba      	ldrb	r2, [r7, #6]
 8000ad0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	4907      	ldr	r1, [pc, #28]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	701a      	strb	r2, [r3, #0]

  return;
 8000ae6:	bf00      	nop
}
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000130 	.word	0x20000130

08000af8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <LinkTimerBefore+0xb8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d032      	beq.n	8000b7a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	4927      	ldr	r1, [pc, #156]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3314      	adds	r3, #20
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	4922      	ldr	r1, [pc, #136]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3315      	adds	r3, #21
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	491d      	ldr	r1, [pc, #116]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3315      	adds	r3, #21
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	4918      	ldr	r1, [pc, #96]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3314      	adds	r3, #20
 8000b60:	7bfa      	ldrb	r2, [r7, #15]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	4913      	ldr	r1, [pc, #76]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3314      	adds	r3, #20
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b78:	e014      	b.n	8000ba4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	440b      	add	r3, r1
 8000b88:	3315      	adds	r3, #21
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8e:	79ba      	ldrb	r2, [r7, #6]
 8000b90:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3314      	adds	r3, #20
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	701a      	strb	r2, [r3, #0]
  return;
 8000ba2:	bf00      	nop
}
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200001c0 	.word	0x200001c0
 8000bb4:	20000130 	.word	0x20000130

08000bb8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cfc <linkTimer+0x144>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d118      	bne.n	8000bfe <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <linkTimer+0x144>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d00 <linkTimer+0x148>)
 8000bd4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bd6:	4a49      	ldr	r2, [pc, #292]	@ (8000cfc <linkTimer+0x144>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	4949      	ldr	r1, [pc, #292]	@ (8000d04 <linkTimer+0x14c>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	3315      	adds	r3, #21
 8000bec:	2206      	movs	r2, #6
 8000bee:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bf0:	4b45      	ldr	r3, [pc, #276]	@ (8000d08 <linkTimer+0x150>)
 8000bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	81fb      	strh	r3, [r7, #14]
 8000bfc:	e078      	b.n	8000cf0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bfe:	f000 f909 	bl	8000e14 <ReturnTimeElapsed>
 8000c02:	4603      	mov	r3, r0
 8000c04:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	493e      	ldr	r1, [pc, #248]	@ (8000d04 <linkTimer+0x14c>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	3308      	adds	r3, #8
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	4419      	add	r1, r3
 8000c1e:	4839      	ldr	r0, [pc, #228]	@ (8000d04 <linkTimer+0x14c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4403      	add	r3, r0
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	4934      	ldr	r1, [pc, #208]	@ (8000d04 <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c42:	4b2e      	ldr	r3, [pc, #184]	@ (8000cfc <linkTimer+0x144>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d04 <linkTimer+0x14c>)
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	440b      	add	r3, r1
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	3308      	adds	r3, #8
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d337      	bcc.n	8000cd0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <linkTimer+0x144>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c66:	7b7a      	ldrb	r2, [r7, #13]
 8000c68:	4926      	ldr	r1, [pc, #152]	@ (8000d04 <linkTimer+0x14c>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	3315      	adds	r3, #21
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c7a:	e013      	b.n	8000ca4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c7c:	7b7a      	ldrb	r2, [r7, #13]
 8000c7e:	4921      	ldr	r1, [pc, #132]	@ (8000d04 <linkTimer+0x14c>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	3315      	adds	r3, #21
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c90:	7b7a      	ldrb	r2, [r7, #13]
 8000c92:	491c      	ldr	r1, [pc, #112]	@ (8000d04 <linkTimer+0x14c>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3315      	adds	r3, #21
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca4:	7b3b      	ldrb	r3, [r7, #12]
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d00b      	beq.n	8000cc2 <linkTimer+0x10a>
 8000caa:	7b3a      	ldrb	r2, [r7, #12]
 8000cac:	4915      	ldr	r1, [pc, #84]	@ (8000d04 <linkTimer+0x14c>)
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3308      	adds	r3, #8
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d2dc      	bcs.n	8000c7c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cc2:	7b7a      	ldrb	r2, [r7, #13]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fecf 	bl	8000a6c <LinkTimerAfter>
 8000cce:	e00f      	b.n	8000cf0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <linkTimer+0x144>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff0c 	bl	8000af8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <linkTimer+0x144>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <linkTimer+0x148>)
 8000ce8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cea:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <linkTimer+0x144>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001c0 	.word	0x200001c0
 8000d00:	200001c1 	.word	0x200001c1
 8000d04:	20000130 	.word	0x20000130
 8000d08:	200001c4 	.word	0x200001c4

08000d0c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d1c:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	79fa      	ldrb	r2, [r7, #7]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d111      	bne.n	8000d4c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <UnlinkTimer+0xfc>)
 8000d30:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	4935      	ldr	r1, [pc, #212]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3315      	adds	r3, #21
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b2f      	ldr	r3, [pc, #188]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e03e      	b.n	8000dca <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	492f      	ldr	r1, [pc, #188]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	3314      	adds	r3, #20
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	492a      	ldr	r1, [pc, #168]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3315      	adds	r3, #21
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d74:	79f9      	ldrb	r1, [r7, #7]
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	4824      	ldr	r0, [pc, #144]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	440b      	add	r3, r1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4403      	add	r3, r0
 8000d84:	3315      	adds	r3, #21
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2d8      	uxtb	r0, r3
 8000d8a:	4920      	ldr	r1, [pc, #128]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	4602      	mov	r2, r0
 8000d9a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d013      	beq.n	8000dca <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000da2:	79f9      	ldrb	r1, [r7, #7]
 8000da4:	7bba      	ldrb	r2, [r7, #14]
 8000da6:	4819      	ldr	r0, [pc, #100]	@ (8000e0c <UnlinkTimer+0x100>)
 8000da8:	460b      	mov	r3, r1
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	440b      	add	r3, r1
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4403      	add	r3, r0
 8000db2:	3314      	adds	r3, #20
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2d8      	uxtb	r0, r3
 8000db8:	4914      	ldr	r1, [pc, #80]	@ (8000e0c <UnlinkTimer+0x100>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3314      	adds	r3, #20
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	490f      	ldr	r1, [pc, #60]	@ (8000e0c <UnlinkTimer+0x100>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	330c      	adds	r3, #12
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	d107      	bne.n	8000df8 <UnlinkTimer+0xec>
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <UnlinkTimer+0x104>)
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
}
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200001c0 	.word	0x200001c0
 8000e08:	200001c1 	.word	0x200001c1
 8000e0c:	20000130 	.word	0x20000130
 8000e10:	200001c4 	.word	0x200001c4

08000e14 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e22:	d026      	beq.n	8000e72 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e24:	f7ff fe02 	bl	8000a2c <ReadRtcSsrValue>
 8000e28:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d805      	bhi.n	8000e40 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	e00a      	b.n	8000e56 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <ReturnTimeElapsed+0x74>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <ReturnTimeElapsed+0x78>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <ReturnTimeElapsed+0x7c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	40d3      	lsrs	r3, r2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	b29b      	uxth	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001c4 	.word	0x200001c4
 8000e88:	200001cc 	.word	0x200001cc
 8000e8c:	200001ca 	.word	0x200001ca
 8000e90:	200001c9 	.word	0x200001c9

08000e94 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d108      	bne.n	8000eb6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ea4:	f7ff fdc2 	bl	8000a2c <ReadRtcSsrValue>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a21      	ldr	r2, [pc, #132]	@ (8000f30 <RestartWakeupCounter+0x9c>)
 8000eac:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f001 fbd3 	bl	800265a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000eb4:	e039      	b.n	8000f2a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d803      	bhi.n	8000ec4 <RestartWakeupCounter+0x30>
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <RestartWakeupCounter+0xa0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000eca:	bf00      	nop
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000eea:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <RestartWakeupCounter+0xa8>)
 8000eee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ef2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f001 fbbe 	bl	8002676 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <RestartWakeupCounter+0xac>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	490e      	ldr	r1, [pc, #56]	@ (8000f40 <RestartWakeupCounter+0xac>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f0a:	f7ff fd8f 	bl	8000a2c <ReadRtcSsrValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <RestartWakeupCounter+0x9c>)
 8000f12:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f22:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f24:	f3af 8000 	nop.w
  return ;
 8000f28:	bf00      	nop
}
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001c4 	.word	0x200001c4
 8000f34:	200001c9 	.word	0x200001c9
 8000f38:	2000020c 	.word	0x2000020c
 8000f3c:	58000800 	.word	0x58000800
 8000f40:	40002800 	.word	0x40002800

08000f44 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f4a:	4b45      	ldr	r3, [pc, #276]	@ (8001060 <RescheduleTimerList+0x11c>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f56:	d107      	bne.n	8000f68 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f58:	bf00      	nop
 8000f5a:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f8      	bne.n	8000f5a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f68:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f76:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f78:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <RescheduleTimerList+0x124>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	493a      	ldr	r1, [pc, #232]	@ (800106c <RescheduleTimerList+0x128>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f92:	f7ff ff3f 	bl	8000e14 <ReturnTimeElapsed>
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d205      	bcs.n	8000fae <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e04d      	b.n	800104a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	4a30      	ldr	r2, [pc, #192]	@ (8001074 <RescheduleTimerList+0x130>)
 8000fb2:	8812      	ldrh	r2, [r2, #0]
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d906      	bls.n	8000fce <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <RescheduleTimerList+0x130>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e03d      	b.n	800104a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fde:	e034      	b.n	800104a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4922      	ldr	r1, [pc, #136]	@ (800106c <RescheduleTimerList+0x128>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	3308      	adds	r3, #8
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d20a      	bcs.n	800100e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	491c      	ldr	r1, [pc, #112]	@ (800106c <RescheduleTimerList+0x128>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	3308      	adds	r3, #8
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e013      	b.n	8001036 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	4916      	ldr	r1, [pc, #88]	@ (800106c <RescheduleTimerList+0x128>)
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3308      	adds	r3, #8
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	1ac9      	subs	r1, r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	@ (800106c <RescheduleTimerList+0x128>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4403      	add	r3, r0
 8001032:	3308      	adds	r3, #8
 8001034:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	490c      	ldr	r1, [pc, #48]	@ (800106c <RescheduleTimerList+0x128>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3315      	adds	r3, #21
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b06      	cmp	r3, #6
 800104e:	d1c7      	bne.n	8000fe0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff1e 	bl	8000e94 <RestartWakeupCounter>

  return ;
 8001058:	bf00      	nop
}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40002800 	.word	0x40002800
 8001064:	2000020c 	.word	0x2000020c
 8001068:	200001c0 	.word	0x200001c0
 800106c:	20000130 	.word	0x20000130
 8001070:	200001c8 	.word	0x200001c8
 8001074:	200001ce 	.word	0x200001ce

08001078 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800107e:	f3ef 8310 	mrs	r3, PRIMASK
 8001082:	617b      	str	r3, [r7, #20]
  return(result);
 8001084:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800108c:	4b59      	ldr	r3, [pc, #356]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22ca      	movs	r2, #202	@ 0xca
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
 8001094:	4b57      	ldr	r3, [pc, #348]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2253      	movs	r2, #83	@ 0x53
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800109c:	4b55      	ldr	r3, [pc, #340]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010aa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010ac:	4b52      	ldr	r3, [pc, #328]	@ (80011f8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010b8:	4950      	ldr	r1, [pc, #320]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	330c      	adds	r3, #12
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d16e      	bne.n	80011ac <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010d2:	494a      	ldr	r1, [pc, #296]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010e6:	4945      	ldr	r1, [pc, #276]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	3310      	adds	r3, #16
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010f8:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d04c      	beq.n	800119c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001102:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001106:	493d      	ldr	r1, [pc, #244]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	330d      	adds	r3, #13
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d124      	bne.n	8001166 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800111c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001120:	2101      	movs	r1, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fdf2 	bl	8000d0c <UnlinkTimer>
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f383 8810 	msr	PRIMASK, r3
}
 8001132:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001134:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001138:	4930      	ldr	r1, [pc, #192]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	3304      	adds	r3, #4
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f9b8 	bl	80014c4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	22ca      	movs	r2, #202	@ 0xca
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
 800115c:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2253      	movs	r2, #83	@ 0x53
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
 8001164:	e012      	b.n	800118c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f383 8810 	msr	PRIMASK, r3
}
 8001170:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001172:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f920 	bl	80013bc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800117c:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	22ca      	movs	r2, #202	@ 0xca
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	@ 0x53
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800118c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	4619      	mov	r1, r3
 8001194:	69b8      	ldr	r0, [r7, #24]
 8001196:	f000 fa1b 	bl	80015d0 <HW_TS_RTC_Int_AppNot>
 800119a:	e022      	b.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800119c:	f7ff fed2 	bl	8000f44 <RescheduleTimerList>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f383 8810 	msr	PRIMASK, r3
}
 80011aa:	e01a      	b.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011ac:	bf00      	nop
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f8      	beq.n	80011ae <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80011cc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f383 8810 	msr	PRIMASK, r3
}
 80011e0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80011ea:	bf00      	nop
}
 80011ec:	3728      	adds	r7, #40	@ 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000020c 	.word	0x2000020c
 80011f8:	200001c0 	.word	0x200001c0
 80011fc:	20000130 	.word	0x20000130
 8001200:	200001c8 	.word	0x200001c8
 8001204:	58000800 	.word	0x58000800

08001208 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001214:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <HW_TS_Init+0x188>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	22ca      	movs	r2, #202	@ 0xca
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24
 800121c:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <HW_TS_Init+0x188>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2253      	movs	r2, #83	@ 0x53
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001224:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <HW_TS_Init+0x18c>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a5a      	ldr	r2, [pc, #360]	@ (8001394 <HW_TS_Init+0x18c>)
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001230:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <HW_TS_Init+0x18c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f1c3 0304 	rsb	r3, r3, #4
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <HW_TS_Init+0x190>)
 8001244:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001246:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <HW_TS_Init+0x18c>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800124e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001252:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	fa92 f2a2 	rbit	r2, r2
 800125a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	2a00      	cmp	r2, #0
 8001264:	d101      	bne.n	800126a <HW_TS_Init+0x62>
  {
    return 32U;
 8001266:	2220      	movs	r2, #32
 8001268:	e003      	b.n	8001272 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	40d3      	lsrs	r3, r2
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b48      	ldr	r3, [pc, #288]	@ (800139c <HW_TS_Init+0x194>)
 800127c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800127e:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <HW_TS_Init+0x18c>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	b29b      	uxth	r3, r3
 8001284:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001288:	b29b      	uxth	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b44      	ldr	r3, [pc, #272]	@ (80013a0 <HW_TS_Init+0x198>)
 8001290:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HW_TS_Init+0x198>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	4a40      	ldr	r2, [pc, #256]	@ (800139c <HW_TS_Init+0x194>)
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80012a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001398 <HW_TS_Init+0x190>)
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	40d3      	lsrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d904      	bls.n	80012c0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <HW_TS_Init+0x19c>)
 80012b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	e003      	b.n	80012c8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HW_TS_Init+0x19c>)
 80012c6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80012cc:	f7ff fb9c 	bl	8000a08 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012d0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80012d4:	f7ff fb84 	bl	80009e0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d13d      	bne.n	800135a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012de:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <HW_TS_Init+0x1a0>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012e4:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <HW_TS_Init+0x1a4>)
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ea:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	77fb      	strb	r3, [r7, #31]
 80012f0:	e00c      	b.n	800130c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012f2:	7ffa      	ldrb	r2, [r7, #31]
 80012f4:	492e      	ldr	r1, [pc, #184]	@ (80013b0 <HW_TS_Init+0x1a8>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	330c      	adds	r3, #12
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	3301      	adds	r3, #1
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d9ef      	bls.n	80012f2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001312:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <HW_TS_Init+0x1ac>)
 8001314:	2206      	movs	r2, #6
 8001316:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HW_TS_Init+0x188>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <HW_TS_Init+0x188>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001326:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HW_TS_Init+0x188>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HW_TS_Init+0x188>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001338:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <HW_TS_Init+0x1b0>)
 800133c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001340:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001342:	2003      	movs	r0, #3
 8001344:	f001 f997 	bl	8002676 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HW_TS_Init+0x188>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <HW_TS_Init+0x188>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e009      	b.n	800136e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HW_TS_Init+0x188>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001368:	2003      	movs	r0, #3
 800136a:	f001 f976 	bl	800265a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <HW_TS_Init+0x188>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	22ff      	movs	r2, #255	@ 0xff
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001376:	2200      	movs	r2, #0
 8001378:	2103      	movs	r1, #3
 800137a:	2003      	movs	r0, #3
 800137c:	f001 f92b 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001380:	2003      	movs	r0, #3
 8001382:	f001 f942 	bl	800260a <HAL_NVIC_EnableIRQ>

  return;
 8001386:	bf00      	nop
}
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000020c 	.word	0x2000020c
 8001394:	40002800 	.word	0x40002800
 8001398:	200001c9 	.word	0x200001c9
 800139c:	200001ca 	.word	0x200001ca
 80013a0:	200001cc 	.word	0x200001cc
 80013a4:	200001ce 	.word	0x200001ce
 80013a8:	200001c8 	.word	0x200001c8
 80013ac:	200001c4 	.word	0x200001c4
 80013b0:	20000130 	.word	0x20000130
 80013b4:	200001c0 	.word	0x200001c0
 80013b8:	58000800 	.word	0x58000800

080013bc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013c6:	f3ef 8310 	mrs	r3, PRIMASK
 80013ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80013cc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013d4:	2003      	movs	r0, #3
 80013d6:	f001 f926 	bl	8002626 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013da:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <HW_TS_Stop+0xf0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	22ca      	movs	r2, #202	@ 0xca
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80013e2:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <HW_TS_Stop+0xf0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2253      	movs	r2, #83	@ 0x53
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4930      	ldr	r1, [pc, #192]	@ (80014b0 <HW_TS_Stop+0xf4>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	330c      	adds	r3, #12
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d142      	bne.n	8001488 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc80 	bl	8000d0c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <HW_TS_Stop+0xf8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001412:	7cfb      	ldrb	r3, [r7, #19]
 8001414:	2b06      	cmp	r3, #6
 8001416:	d12f      	bne.n	8001478 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HW_TS_Stop+0xfc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001424:	d107      	bne.n	8001436 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001426:	bf00      	nop
 8001428:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HW_TS_Stop+0xf0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f8      	bne.n	8001428 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HW_TS_Stop+0xf0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001444:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001446:	bf00      	nop
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HW_TS_Stop+0xf0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f8      	beq.n	8001448 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001466:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <HW_TS_Stop+0x100>)
 800146a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800146e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001470:	2003      	movs	r0, #3
 8001472:	f001 f900 	bl	8002676 <HAL_NVIC_ClearPendingIRQ>
 8001476:	e007      	b.n	8001488 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HW_TS_Stop+0x104>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	7cfa      	ldrb	r2, [r7, #19]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001484:	f7ff fd5e 	bl	8000f44 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HW_TS_Stop+0xf0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	22ff      	movs	r2, #255	@ 0xff
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001490:	2003      	movs	r0, #3
 8001492:	f001 f8ba 	bl	800260a <HAL_NVIC_EnableIRQ>
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f383 8810 	msr	PRIMASK, r3
}
 80014a0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014a2:	bf00      	nop
}
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000020c 	.word	0x2000020c
 80014b0:	20000130 	.word	0x20000130
 80014b4:	200001c0 	.word	0x200001c0
 80014b8:	40002800 	.word	0x40002800
 80014bc:	58000800 	.word	0x58000800
 80014c0:	200001c1 	.word	0x200001c1

080014c4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	493b      	ldr	r1, [pc, #236]	@ (80015c0 <HW_TS_Start+0xfc>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	330c      	adds	r3, #12
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d103      	bne.n	80014f0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff66 	bl	80013bc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014f0:	f3ef 8310 	mrs	r3, PRIMASK
 80014f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80014f6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014fa:	b672      	cpsid	i
}
 80014fc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014fe:	2003      	movs	r0, #3
 8001500:	f001 f891 	bl	8002626 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001504:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <HW_TS_Start+0x100>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	22ca      	movs	r2, #202	@ 0xca
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HW_TS_Start+0x100>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2253      	movs	r2, #83	@ 0x53
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	492a      	ldr	r1, [pc, #168]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	330c      	adds	r3, #12
 8001524:	2202      	movs	r2, #2
 8001526:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	4925      	ldr	r1, [pc, #148]	@ (80015c0 <HW_TS_Start+0xfc>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	3308      	adds	r3, #8
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	4920      	ldr	r1, [pc, #128]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3304      	adds	r3, #4
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fb30 	bl	8000bb8 <linkTimer>
 8001558:	4603      	mov	r3, r0
 800155a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HW_TS_Start+0x104>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HW_TS_Start+0x108>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	7c7a      	ldrb	r2, [r7, #17]
 800156a:	429a      	cmp	r2, r3
 800156c:	d002      	beq.n	8001574 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800156e:	f7ff fce9 	bl	8000f44 <RescheduleTimerList>
 8001572:	e013      	b.n	800159c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	4912      	ldr	r1, [pc, #72]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3308      	adds	r3, #8
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	8a7b      	ldrh	r3, [r7, #18]
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	1ac9      	subs	r1, r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <HW_TS_Start+0xfc>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4403      	add	r3, r0
 8001598:	3308      	adds	r3, #8
 800159a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HW_TS_Start+0x100>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	22ff      	movs	r2, #255	@ 0xff
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015a4:	2003      	movs	r0, #3
 80015a6:	f001 f830 	bl	800260a <HAL_NVIC_EnableIRQ>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	f383 8810 	msr	PRIMASK, r3
}
 80015b4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015b6:	bf00      	nop
}
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000130 	.word	0x20000130
 80015c4:	2000020c 	.word	0x2000020c
 80015c8:	200001c0 	.word	0x200001c0
 80015cc:	200001c1 	.word	0x200001c1

080015d0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	460b      	mov	r3, r1
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4798      	blx	r3

  return;
 80015e2:	bf00      	nop
}
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <LL_RCC_LSE_SetDriveCapability>:
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fa:	f023 0218 	bic.w	r2, r3, #24
 80015fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4313      	orrs	r3, r2
 8001606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) //function used to print() in usart
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d102      	bne.n	800165c <__io_putchar+0x14>
    __io_putchar('\r');
 8001656:	200d      	movs	r0, #13
 8001658:	f7ff fff6 	bl	8001648 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	2201      	movs	r2, #1
 8001664:	4803      	ldr	r0, [pc, #12]	@ (8001674 <__io_putchar+0x2c>)
 8001666:	f003 fc1d 	bl	8004ea4 <HAL_UART_Transmit>

  return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000027c 	.word	0x2000027c

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167e:	f000 fde9 	bl	8002254 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001682:	f7ff f831 	bl	80006e8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 f82f 	bl	80016e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800168a:	f000 f881 	bl	8001790 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800168e:	f000 f89f 	bl	80017d0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001692:	f000 f8b1 	bl	80017f8 <MX_RF_Init>
  MX_GPIO_Init();
 8001696:	f000 f987 	bl	80019a8 <MX_GPIO_Init>
  MX_RTC_Init();
 800169a:	f000 f8b5 	bl	8001808 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800169e:	f000 f937 	bl	8001910 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80016a2:	f000 f8e1 	bl	8001868 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80016a6:	f7ff f82d 	bl	8000704 <MX_APPE_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 fcea 	bl	8002084 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f000 fce7 	bl	8002084 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f000 fce4 	bl	8002084 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80016bc:	2101      	movs	r1, #1
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 fd1a 	bl	80020f8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80016c4:	2101      	movs	r1, #1
 80016c6:	2001      	movs	r0, #1
 80016c8:	f000 fd16 	bl	80020f8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80016cc:	2101      	movs	r1, #1
 80016ce:	2002      	movs	r0, #2
 80016d0:	f000 fd12 	bl	80020f8 <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_time = 0;  // Przechowuje czas ostatniego wysłania danych
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  printf("Starting");
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <main+0x6c>)
 80016da:	f007 fdf9 	bl	80092d0 <iprintf>
//  HAL_TIM_Base_Start_IT(&htim1);
  while (1)
  {

    /* USER CODE END WHILE */
    MX_APPE_Process();
 80016de:	f7ff f940 	bl	8000962 <MX_APPE_Process>
 80016e2:	e7fc      	b.n	80016de <main+0x66>
 80016e4:	0800a074 	.word	0x0800a074

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b098      	sub	sp, #96	@ 0x60
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	2244      	movs	r2, #68	@ 0x44
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fe47 	bl	800938a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800170e:	f001 fa61 	bl	8002bd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff ff69 	bl	80015ea <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001718:	2327      	movs	r3, #39	@ 0x27
 800171a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001730:	2340      	movs	r3, #64	@ 0x40
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001738:	23a0      	movs	r3, #160	@ 0xa0
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fdad 	bl	80032a4 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001750:	f000 f972 	bl	8001a38 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001754:	236f      	movs	r3, #111	@ 0x6f
 8001756:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001770:	463b      	mov	r3, r7
 8001772:	2101      	movs	r1, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f002 f8cb 	bl	8003910 <HAL_RCC_ClockConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001780:	f000 f95a 	bl	8001a38 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001784:	f002 fd8b 	bl	800429e <HAL_RCCEx_EnableMSIPLLMode>
}
 8001788:	bf00      	nop
 800178a:	3760      	adds	r7, #96	@ 0x60
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	@ 0x30
 8001794:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2230      	movs	r2, #48	@ 0x30
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f007 fdf4 	bl	800938a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80017a2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80017a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80017b2:	2310      	movs	r3, #16
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 fc7a 	bl	80040b2 <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80017c4:	f000 f938 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */


  /* USER CODE END Smps */
}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	@ 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <MX_IPCC_Init+0x20>)
 80017d6:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <MX_IPCC_Init+0x24>)
 80017d8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_IPCC_Init+0x20>)
 80017dc:	f001 f974 	bl	8002ac8 <HAL_IPCC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80017e6:	f000 f927 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200001d0 	.word	0x200001d0
 80017f4:	58000c00 	.word	0x58000c00

080017f8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_RTC_Init+0x58>)
 800180e:	4a15      	ldr	r2, [pc, #84]	@ (8001864 <MX_RTC_Init+0x5c>)
 8001810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_RTC_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_RTC_Init+0x58>)
 800181a:	220f      	movs	r2, #15
 800181c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_RTC_Init+0x58>)
 8001820:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001824:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_RTC_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_RTC_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <MX_RTC_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001838:	4809      	ldr	r0, [pc, #36]	@ (8001860 <MX_RTC_Init+0x58>)
 800183a:	f002 fd37 	bl	80042ac <HAL_RTC_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001844:	f000 f8f8 	bl	8001a38 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_RTC_Init+0x58>)
 800184e:	f002 fe2d 	bl	80044ac <HAL_RTCEx_SetWakeUpTimer_IT>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001858:	f000 f8ee 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000020c 	.word	0x2000020c
 8001864:	40002800 	.word	0x40002800

08001868 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <MX_TIM1_Init+0xa0>)
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <MX_TIM1_Init+0xa4>)
 800188a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <MX_TIM1_Init+0xa0>)
 800188e:	223f      	movs	r2, #63	@ 0x3f
 8001890:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <MX_TIM1_Init+0xa0>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <MX_TIM1_Init+0xa0>)
 800189a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800189e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b2:	4815      	ldr	r0, [pc, #84]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018b4:	f002 feb6 	bl	8004624 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018be:	f000 f8bb 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	480e      	ldr	r0, [pc, #56]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018d0:	f003 f806 	bl	80048e0 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018da:	f000 f8ad 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018f0:	f003 f9ea 	bl	8004cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018fa:	f000 f89d 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000230 	.word	0x20000230
 800190c:	40012c00 	.word	0x40012c00

08001910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001916:	4a23      	ldr	r2, [pc, #140]	@ (80019a4 <MX_USART1_UART_Init+0x94>)
 8001918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800191c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001946:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001952:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001958:	4811      	ldr	r0, [pc, #68]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800195a:	f003 fa53 	bl	8004e04 <HAL_UART_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001964:	f000 f868 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001968:	2100      	movs	r1, #0
 800196a:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800196c:	f003 ffa8 	bl	80058c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001976:	f000 f85f 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	4808      	ldr	r0, [pc, #32]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800197e:	f003 ffdd 	bl	800593c <HAL_UARTEx_SetRxFifoThreshold>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001988:	f000 f856 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800198e:	f003 ff5e 	bl	800584e <HAL_UARTEx_DisableFifoMode>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001998:	f000 f84e 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000027c 	.word	0x2000027c
 80019a4:	40013800 	.word	0x40013800

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	2004      	movs	r0, #4
 80019ae:	f7ff fe32 	bl	8001616 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff fe2f 	bl	8001616 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7ff fe2c 	bl	8001616 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <BSP_PB_Callback>:
//    {
//    	UTIL_SEQ_SetTask(1 << CFG_TASK_TIMER_SECOND_ID, CFG_SCH_PRIO_0);
//    }
//}
void BSP_PB_Callback(Button_TypeDef Button)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_SW1)
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10b      	bne.n	80019ec <BSP_PB_Callback+0x28>
    {
        // Obsługuje przycisk SW1
    	if(payload.button_1_state != 1)
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <BSP_PB_Callback+0x70>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d003      	beq.n	80019e4 <BSP_PB_Callback+0x20>
        	payload.button_1_state = 1;  // Ustawienie stanu przycisku SW1
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <BSP_PB_Callback+0x70>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
        	payload.button_3_state = 1; // Ustawienie stanu przycisku SW2
    	else
    		payload.button_3_state = 0;  // Ustawienie stanu przycisku SW1
        //Custom_Mycharnotify_Update_Char();  // Wyślij dane
    }
}
 80019e2:	e020      	b.n	8001a26 <BSP_PB_Callback+0x62>
    		payload.button_1_state = 0;  // Ustawienie stanu przycisku SW1
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <BSP_PB_Callback+0x70>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
}
 80019ea:	e01c      	b.n	8001a26 <BSP_PB_Callback+0x62>
    else if (Button == BUTTON_SW2)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10b      	bne.n	8001a0a <BSP_PB_Callback+0x46>
    	if(payload.button_2_state != 1)
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <BSP_PB_Callback+0x70>)
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d003      	beq.n	8001a02 <BSP_PB_Callback+0x3e>
        	payload.button_2_state = 1;  // Ustawienie stanu przycisku SW2
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <BSP_PB_Callback+0x70>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	705a      	strb	r2, [r3, #1]
}
 8001a00:	e011      	b.n	8001a26 <BSP_PB_Callback+0x62>
    		payload.button_2_state = 0;  // Ustawienie stanu przycisku SW1
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <BSP_PB_Callback+0x70>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	705a      	strb	r2, [r3, #1]
}
 8001a08:	e00d      	b.n	8001a26 <BSP_PB_Callback+0x62>
    else if (Button == BUTTON_SW3)
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d10a      	bne.n	8001a26 <BSP_PB_Callback+0x62>
    	if(payload.button_3_state != 1)
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <BSP_PB_Callback+0x70>)
 8001a12:	789b      	ldrb	r3, [r3, #2]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d003      	beq.n	8001a20 <BSP_PB_Callback+0x5c>
        	payload.button_3_state = 1; // Ustawienie stanu przycisku SW2
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <BSP_PB_Callback+0x70>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	709a      	strb	r2, [r3, #2]
}
 8001a1e:	e002      	b.n	8001a26 <BSP_PB_Callback+0x62>
    		payload.button_3_state = 0;  // Ustawienie stanu przycisku SW1
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <BSP_PB_Callback+0x70>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	709a      	strb	r2, [r3, #2]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000434 	.word	0x20000434

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_AHB2_GRP1_EnableClock>:
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001aa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001abc:	68fb      	ldr	r3, [r7, #12]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b20:	68fb      	ldr	r3, [r7, #12]
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001b32:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001b36:	f7ff ffaf 	bl	8001a98 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	202e      	movs	r0, #46	@ 0x2e
 8001b40:	f000 fd49 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001b44:	202e      	movs	r0, #46	@ 0x2e
 8001b46:	f000 fd60 	bl	800260a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <HAL_IPCC_MspInit+0x44>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d113      	bne.n	8001b8a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001b62:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001b66:	f7ff ff97 	bl	8001a98 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	202c      	movs	r0, #44	@ 0x2c
 8001b70:	f000 fd31 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001b74:	202c      	movs	r0, #44	@ 0x2c
 8001b76:	f000 fd48 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	202d      	movs	r0, #45	@ 0x2d
 8001b80:	f000 fd29 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001b84:	202d      	movs	r0, #45	@ 0x2d
 8001b86:	f000 fd40 	bl	800260a <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	58000c00 	.word	0x58000c00

08001b98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08e      	sub	sp, #56	@ 0x38
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	2230      	movs	r2, #48	@ 0x30
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f007 fbee 	bl	800938a <memset>
  if(hrtc->Instance==RTC)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <HAL_RTC_MspInit+0x64>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d11d      	bne.n	8001bf4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bbc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 fa72 	bl	80040b2 <HAL_RCCEx_PeriphCLKConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001bd4:	f7ff ff30 	bl	8001a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bd8:	f7ff ff34 	bl	8001a44 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bdc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001be0:	f7ff ff73 	bl	8001aca <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 fcf4 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f000 fd0b 	bl	800260a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3738      	adds	r7, #56	@ 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40002800 	.word	0x40002800

08001c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <HAL_TIM_Base_MspInit+0x64>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d123      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c12:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c16:	f7ff ff71 	bl	8001afc <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2018      	movs	r0, #24
 8001c20:	f000 fcd9 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001c24:	2018      	movs	r0, #24
 8001c26:	f000 fcf0 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2019      	movs	r0, #25
 8001c30:	f000 fcd1 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c34:	2019      	movs	r0, #25
 8001c36:	f000 fce8 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	201a      	movs	r0, #26
 8001c40:	f000 fcc9 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001c44:	201a      	movs	r0, #26
 8001c46:	f000 fce0 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	201b      	movs	r0, #27
 8001c50:	f000 fcc1 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c54:	201b      	movs	r0, #27
 8001c56:	f000 fcd8 	bl	800260a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40012c00 	.word	0x40012c00

08001c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b094      	sub	sp, #80	@ 0x50
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	2230      	movs	r2, #48	@ 0x30
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f007 fb7e 	bl	800938a <memset>
  if(huart->Instance==USART1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_UART_MspInit+0x88>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d126      	bne.n	8001ce6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 fa04 	bl	80040b2 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cb0:	f7ff fec2 	bl	8001a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001cb8:	f7ff ff20 	bl	8001afc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff fed2 	bl	8001a66 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce2:	f000 fd33 	bl	800274c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3750      	adds	r7, #80	@ 0x50
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40013800 	.word	0x40013800

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <NMI_Handler+0x4>

08001cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <BusFault_Handler+0x4>

08001d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <UsageFault_Handler+0x4>

08001d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4a:	f000 fadd 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d56:	f7ff f98f 	bl	8001078 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW1);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 fa4e 	bl	8002204 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW2);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f000 fa47 	bl	8002204 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW3);
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f000 fa40 	bl	8002204 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <TIM1_BRK_IRQHandler+0x10>)
 8001d8e:	f002 fca0 	bl	80046d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000230 	.word	0x20000230

08001d9c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <TIM1_UP_IRQHandler+0x10>)
 8001da2:	f002 fc96 	bl	80046d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000230 	.word	0x20000230

08001db0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Communication Interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001db6:	f002 fc8c 	bl	80046d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000230 	.word	0x20000230

08001dc4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <TIM1_CC_IRQHandler+0x10>)
 8001dca:	f002 fc82 	bl	80046d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000230 	.word	0x20000230

08001dd8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001ddc:	f006 fe1c 	bl	8008a18 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001de8:	f006 fe4c 	bl	8008a84 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001df4:	f000 fe44 	bl	8002a80 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00a      	b.n	8001e24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4601      	mov	r1, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf0      	blt.n	8001e0e <_read+0x12>
  }

  return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e009      	b.n	8001e5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbf9 	bl	8001648 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf1      	blt.n	8001e48 <_write+0x12>
  }
  return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_close>:

int _close(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e96:	605a      	str	r2, [r3, #4]
  return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	@ (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f007 fa8e 	bl	8009428 <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20003000 	.word	0x20003000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	20000310 	.word	0x20000310
 8001f40:	20000838 	.word	0x20000838

08001f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001f48:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <SystemInit+0x90>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <SystemInit+0x90>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001f70:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f7c:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <SystemInit+0x94>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f8e:	f023 0305 	bic.w	r3, r3, #5
 8001f92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fae:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <SystemInit+0x98>)
 8001fb0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	faf6fefb 	.word	0xfaf6fefb
 8001fdc:	22041000 	.word	0x22041000

08001fe0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001fe0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe4:	3304      	adds	r3, #4

08001fe6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001fea:	d3f9      	bcc.n	8001fe0 <CopyDataInit>
  bx lr
 8001fec:	4770      	bx	lr

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001fee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ff0:	3004      	adds	r0, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ff2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>
  bx lr
 8001ff6:	4770      	bx	lr

08001ff8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ff8:	480c      	ldr	r0, [pc, #48]	@ (800202c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ffa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ffc:	f7ff ffa2 	bl	8001f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002000:	480b      	ldr	r0, [pc, #44]	@ (8002030 <LoopForever+0x6>)
 8002002:	490c      	ldr	r1, [pc, #48]	@ (8002034 <LoopForever+0xa>)
 8002004:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <LoopForever+0xe>)
 8002006:	2300      	movs	r3, #0
 8002008:	f7ff ffed 	bl	8001fe6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800200c:	480b      	ldr	r0, [pc, #44]	@ (800203c <LoopForever+0x12>)
 800200e:	490c      	ldr	r1, [pc, #48]	@ (8002040 <LoopForever+0x16>)
 8002010:	4a0c      	ldr	r2, [pc, #48]	@ (8002044 <LoopForever+0x1a>)
 8002012:	2300      	movs	r3, #0
 8002014:	f7ff ffe7 	bl	8001fe6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002018:	480b      	ldr	r0, [pc, #44]	@ (8002048 <LoopForever+0x1e>)
 800201a:	490c      	ldr	r1, [pc, #48]	@ (800204c <LoopForever+0x22>)
 800201c:	2300      	movs	r3, #0
 800201e:	f7ff ffe8 	bl	8001ff2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002022:	f007 fa07 	bl	8009434 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002026:	f7ff fb27 	bl	8001678 <main>

0800202a <LoopForever>:

LoopForever:
  b LoopForever
 800202a:	e7fe      	b.n	800202a <LoopForever>
  ldr   r0, =_estack
 800202c:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002030:	20000008 	.word	0x20000008
 8002034:	200000c8 	.word	0x200000c8
 8002038:	0800a398 	.word	0x0800a398
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800203c:	200301e4 	.word	0x200301e4
 8002040:	20030a67 	.word	0x20030a67
 8002044:	0800a49e 	.word	0x0800a49e
  INIT_BSS _sbss, _ebss
 8002048:	20000114 	.word	0x20000114
 800204c:	20000834 	.word	0x20000834

08002050 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC1_IRQHandler>

08002052 <LL_AHB2_GRP1_EnableClock>:
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800205e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002060:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4313      	orrs	r3, r2
 8002068:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800206e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4013      	ands	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800209e:	2002      	movs	r0, #2
 80020a0:	f7ff ffd7 	bl	8002052 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <BSP_LED_Init+0x6c>)
 80020a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ac:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b6:	2302      	movs	r3, #2
 80020b8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <BSP_LED_Init+0x70>)
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	f107 020c 	add.w	r2, r7, #12
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fb3f 	bl	800274c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <BSP_LED_Init+0x70>)
 80020d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <BSP_LED_Init+0x6c>)
 80020da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020de:	2200      	movs	r2, #0
 80020e0:	4619      	mov	r1, r3
 80020e2:	f000 fc9b 	bl	8002a1c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	0800a2e4 	.word	0x0800a2e4
 80020f4:	20000018 	.word	0x20000018

080020f8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	460a      	mov	r2, r1
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	4613      	mov	r3, r2
 8002106:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <BSP_PB_Init+0x2e>
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ff97 	bl	8002052 <LL_AHB2_GRP1_EnableClock>
 8002124:	e00c      	b.n	8002140 <BSP_PB_Init+0x48>
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d103      	bne.n	8002134 <BSP_PB_Init+0x3c>
 800212c:	2010      	movs	r0, #16
 800212e:	f7ff ff90 	bl	8002052 <LL_AHB2_GRP1_EnableClock>
 8002132:	e005      	b.n	8002140 <BSP_PB_Init+0x48>
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d102      	bne.n	8002140 <BSP_PB_Init+0x48>
 800213a:	2001      	movs	r0, #1
 800213c:	f7ff ff89 	bl	8002052 <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	4a29      	ldr	r2, [pc, #164]	@ (80021e8 <BSP_PB_Init+0xf0>)
 8002144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002148:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800214a:	2301      	movs	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800214e:	2302      	movs	r3, #2
 8002150:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10c      	bne.n	8002172 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <BSP_PB_Init+0xf4>)
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	f107 020c 	add.w	r2, r7, #12
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f000 faee 	bl	800274c <HAL_GPIO_Init>
 8002170:	e035      	b.n	80021de <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002172:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002176:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	4a1c      	ldr	r2, [pc, #112]	@ (80021ec <BSP_PB_Init+0xf4>)
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	f107 020c 	add.w	r2, r7, #12
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fae0 	bl	800274c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4a17      	ldr	r2, [pc, #92]	@ (80021f0 <BSP_PB_Init+0xf8>)
 8002192:	441a      	add	r2, r3
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	4917      	ldr	r1, [pc, #92]	@ (80021f4 <BSP_PB_Init+0xfc>)
 8002198:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f000 fa91 	bl	80026c6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <BSP_PB_Init+0xf8>)
 80021aa:	1898      	adds	r0, r3, r2
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <BSP_PB_Init+0x100>)
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	461a      	mov	r2, r3
 80021b6:	2100      	movs	r1, #0
 80021b8:	f000 fa6b 	bl	8002692 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4a0f      	ldr	r2, [pc, #60]	@ (80021fc <BSP_PB_Init+0x104>)
 80021c0:	56d0      	ldrsb	r0, [r2, r3]
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002200 <BSP_PB_Init+0x108>)
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	f000 fa02 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4a09      	ldr	r2, [pc, #36]	@ (80021fc <BSP_PB_Init+0x104>)
 80021d6:	56d3      	ldrsb	r3, [r2, r3]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fa16 	bl	800260a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	0800a2ec 	.word	0x0800a2ec
 80021ec:	20000024 	.word	0x20000024
 80021f0:	20000314 	.word	0x20000314
 80021f4:	0800a2f8 	.word	0x0800a2f8
 80021f8:	20000030 	.word	0x20000030
 80021fc:	0800a2f4 	.word	0x0800a2f4
 8002200:	2000003c 	.word	0x2000003c

08002204 <BSP_PB_IRQHandler>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <BSP_PB_IRQHandler+0x20>)
 8002214:	4413      	add	r3, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fa69 	bl	80026ee <HAL_EXTI_IRQHandler>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000314 	.word	0x20000314

08002228 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff fbc9 	bl	80019c4 <BSP_PB_Callback>
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}

08002236 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff fbc2 	bl	80019c4 <BSP_PB_Callback>
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8002248:	2002      	movs	r0, #2
 800224a:	f7ff fbbb 	bl	80019c4 <BSP_PB_Callback>
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800225e:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <HAL_Init+0x3c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a0b      	ldr	r2, [pc, #44]	@ (8002290 <HAL_Init+0x3c>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002268:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226a:	2003      	movs	r0, #3
 800226c:	f000 f9a8 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002270:	2000      	movs	r0, #0
 8002272:	f000 f80f 	bl	8002294 <HAL_InitTick>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	e001      	b.n	8002286 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002282:	f7ff fc54 	bl	8001b2e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002286:	79fb      	ldrb	r3, [r7, #7]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	58004000 	.word	0x58004000

08002294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_InitTick+0x6c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d024      	beq.n	80022f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022a8:	f001 fcde 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_InitTick+0x6c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f9be 	bl	8002642 <HAL_SYSTICK_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10f      	bne.n	80022ec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	d809      	bhi.n	80022e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d2:	2200      	movs	r2, #0
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	f04f 30ff 	mov.w	r0, #4294967295
 80022da:	f000 f97c 	bl	80025d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022de:	4a09      	ldr	r2, [pc, #36]	@ (8002304 <HAL_InitTick+0x70>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e007      	b.n	80022f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e004      	b.n	80022f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000004c 	.word	0x2000004c
 8002304:	20000048 	.word	0x20000048

08002308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000004c 	.word	0x2000004c
 800232c:	2000032c 	.word	0x2000032c

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	2000032c 	.word	0x2000032c

08002348 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_GetTickPrio+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000048 	.word	0x20000048

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	@ (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db12      	blt.n	8002438 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	490a      	ldr	r1, [pc, #40]	@ (8002444 <__NVIC_DisableIRQ+0x44>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	3320      	adds	r3, #32
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800242c:	f3bf 8f4f 	dsb	sy
}
 8002430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002432:	f3bf 8f6f 	isb	sy
}
 8002436:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db0c      	blt.n	8002474 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4907      	ldr	r1, [pc, #28]	@ (8002480 <__NVIC_SetPendingIRQ+0x38>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	3340      	adds	r3, #64	@ 0x40
 8002470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0c      	blt.n	80024b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4907      	ldr	r1, [pc, #28]	@ (80024bc <__NVIC_ClearPendingIRQ+0x38>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	3360      	adds	r3, #96	@ 0x60
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	@ (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	@ (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800258c:	d301      	bcc.n	8002592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <SysTick_Config+0x40>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259a:	210f      	movs	r1, #15
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ff8e 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <SysTick_Config+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <SysTick_Config+0x40>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fec9 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff fee0 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff90 	bl	8002514 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5f 	bl	80024c0 <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fed3 	bl	80023c4 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fee3 	bl	8002400 <__NVIC_DisableIRQ>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff96 	bl	800257c <SysTick_Config>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff feed 	bl	8002448 <__NVIC_SetPendingIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fefd 	bl	8002484 <__NVIC_ClearPendingIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002692:	b480      	push	{r7}
 8002694:	b087      	sub	sp, #28
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	460b      	mov	r3, r1
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	605a      	str	r2, [r3, #4]
      break;
 80026b0:	e002      	b.n	80026b8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
      break;
 80026b6:	bf00      	nop
  }

  return status;
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e003      	b.n	80026e2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0c1b      	lsrs	r3, r3, #16
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2201      	movs	r2, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 800271a:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800271e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4798      	blx	r3
    }
  }
}
 8002744:	bf00      	nop
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275a:	e146      	b.n	80029ea <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8138 	beq.w	80029e4 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d005      	beq.n	800278c <HAL_GPIO_Init+0x40>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c2:	2201      	movs	r2, #1
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d017      	beq.n	800282a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d123      	bne.n	800287e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	6939      	ldr	r1, [r7, #16]
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8092 	beq.w	80029e4 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80028c0:	4a51      	ldr	r2, [pc, #324]	@ (8002a08 <HAL_GPIO_Init+0x2bc>)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028ea:	d013      	beq.n	8002914 <HAL_GPIO_Init+0x1c8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a47      	ldr	r2, [pc, #284]	@ (8002a0c <HAL_GPIO_Init+0x2c0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00d      	beq.n	8002910 <HAL_GPIO_Init+0x1c4>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a46      	ldr	r2, [pc, #280]	@ (8002a10 <HAL_GPIO_Init+0x2c4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x1c0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a45      	ldr	r2, [pc, #276]	@ (8002a14 <HAL_GPIO_Init+0x2c8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_GPIO_Init+0x1bc>
 8002904:	2304      	movs	r3, #4
 8002906:	e006      	b.n	8002916 <HAL_GPIO_Init+0x1ca>
 8002908:	2307      	movs	r3, #7
 800290a:	e004      	b.n	8002916 <HAL_GPIO_Init+0x1ca>
 800290c:	2302      	movs	r3, #2
 800290e:	e002      	b.n	8002916 <HAL_GPIO_Init+0x1ca>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_GPIO_Init+0x1ca>
 8002914:	2300      	movs	r3, #0
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	f002 0203 	and.w	r2, r2, #3
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	4093      	lsls	r3, r2
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002926:	4938      	ldr	r1, [pc, #224]	@ (8002a08 <HAL_GPIO_Init+0x2bc>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002934:	4b38      	ldr	r3, [pc, #224]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002958:	4a2f      	ldr	r2, [pc, #188]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800295e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002982:	4a25      	ldr	r2, [pc, #148]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002988:	4b23      	ldr	r3, [pc, #140]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 800298a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80029b6:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002a18 <HAL_GPIO_Init+0x2cc>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f47f aeb1 	bne.w	800275c <HAL_GPIO_Init+0x10>
  }
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	48000400 	.word	0x48000400
 8002a10:	48000800 	.word	0x48000800
 8002a14:	48001000 	.word	0x48001000
 8002a18:	58000800 	.word	0x58000800

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a38:	e002      	b.n	8002a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4013      	ands	r3, r2
 8002a64:	041a      	lsls	r2, r3, #16
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43d9      	mvns	r1, r3
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_HSEM_IRQHandler+0x30>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <HAL_HSEM_IRQHandler+0x30>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	4906      	ldr	r1, [pc, #24]	@ (8002ab0 <HAL_HSEM_IRQHandler+0x30>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002a9a:	4a05      	ldr	r2, [pc, #20]	@ (8002ab0 <HAL_HSEM_IRQHandler+0x30>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f807 	bl	8002ab4 <HAL_HSEM_FreeCallback>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	58001500 	.word	0x58001500

08002ab4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01e      	beq.n	8002b18 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002ada:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <HAL_IPCC_Init+0x60>)
 8002adc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff f830 	bl	8001b50 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002af0:	68b8      	ldr	r0, [r7, #8]
 8002af2:	f000 f85b 	bl	8002bac <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f82c 	bl	8002b60 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002b16:	e001      	b.n	8002b1c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	58000c00 	.word	0x58000c00

08002b2c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e00f      	b.n	8002b8e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba4 <IPCC_SetDefaultCallbacks+0x44>)
 8002b78:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3306      	adds	r3, #6
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <IPCC_SetDefaultCallbacks+0x48>)
 8002b86:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d9ec      	bls.n	8002b6e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	08002b2d 	.word	0x08002b2d
 8002ba8:	08002b47 	.word	0x08002b47

08002bac <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002bc0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223f      	movs	r2, #63	@ 0x3f
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	58000400 	.word	0x58000400

08002bf4 <LL_PWR_EnableSRAM2Retention>:
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c02:	6093      	str	r3, [r2, #8]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	58000400 	.word	0x58000400

08002c14 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002c18:	f7ff ffec 	bl	8002bf4 <LL_PWR_EnableSRAM2Retention>
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c32:	d101      	bne.n	8002c38 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_HSE_Enable>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_HSE_Disable>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_HSE_IsReady>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c92:	d101      	bne.n	8002c98 <LL_RCC_HSE_IsReady+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_RCC_HSE_IsReady+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RCC_HSI_Enable>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_HSI_Disable>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_HSI_IsReady>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf2:	d101      	bne.n	8002cf8 <LL_RCC_HSI_IsReady+0x18>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <LL_RCC_HSI_IsReady+0x1a>
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_LSE_Enable>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_RCC_LSE_Disable>:
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_LSE_EnableBypass>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_LSE_DisableBypass>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_RCC_LSE_IsReady>:
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d101      	bne.n	8002dce <LL_RCC_LSE_IsReady+0x18>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <LL_RCC_LSE_IsReady+0x1a>
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_RCC_LSI1_Enable>:
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_RCC_LSI1_Disable>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_RCC_LSI1_IsReady>:
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d101      	bne.n	8002e36 <LL_RCC_LSI1_IsReady+0x18>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <LL_RCC_LSI1_IsReady+0x1a>
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_RCC_LSI2_Enable>:
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_RCC_LSI2_Disable>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_RCC_LSI2_IsReady>:
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d101      	bne.n	8002e9e <LL_RCC_LSI2_IsReady+0x18>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <LL_RCC_LSI2_IsReady+0x1a>
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_RCC_LSI2_SetTrimming>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_RCC_MSI_Enable>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_RCC_MSI_Disable>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6013      	str	r3, [r2, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_RCC_MSI_IsReady>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d101      	bne.n	8002f2a <LL_RCC_MSI_IsReady+0x16>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <LL_RCC_MSI_IsReady+0x18>
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_RCC_MSI_SetRange>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_RCC_MSI_GetRange>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f6e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2bb0      	cmp	r3, #176	@ 0xb0
 8002f74:	d901      	bls.n	8002f7a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002f76:	23b0      	movs	r3, #176	@ 0xb0
 8002f78:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002f7a:	687b      	ldr	r3, [r7, #4]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_SetSysClkSource>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 0203 	bic.w	r2, r3, #3
 8002fc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_GetSysClkSource>:
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_RCC_SetAHBPrescaler>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003004:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_C2_RCC_SetAHBPrescaler>:
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003026:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800302a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_SetAHB4Prescaler>:
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003052:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003056:	f023 020f 	bic.w	r2, r3, #15
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_RCC_SetAPB1Prescaler>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003086:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_RCC_SetAPB2Prescaler>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80030a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_RCC_GetAHBPrescaler>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_RCC_GetAHB4Prescaler>:
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_RCC_GetAPB1Prescaler>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_RCC_GetAPB2Prescaler>:
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003154:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003172:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003176:	d101      	bne.n	800317c <LL_RCC_PLL_IsReady+0x18>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <LL_RCC_PLL_IsReady+0x1a>
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0303 	and.w	r3, r3, #3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fc:	d101      	bne.n	8003202 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003216:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003222:	d101      	bne.n	8003228 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800323c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003248:	d101      	bne.n	800324e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800326c:	d101      	bne.n	8003272 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800328c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003290:	d101      	bne.n	8003296 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b08d      	sub	sp, #52	@ 0x34
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e324      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 808d 	beq.w	80033de <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c4:	f7ff fe89 	bl	8002fda <LL_RCC_GetSysClkSource>
 80032c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ca:	f7ff ff82 	bl	80031d2 <LL_RCC_PLL_GetMainSource>
 80032ce:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x3e>
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d147      	bne.n	800336c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d144      	bne.n	800336c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e308      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80032f2:	f7ff fe34 	bl	8002f5e <LL_RCC_MSI_GetRange>
 80032f6:	4603      	mov	r3, r0
 80032f8:	429c      	cmp	r4, r3
 80032fa:	d914      	bls.n	8003326 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fcf1 	bl	8003ce8 <RCC_SetFlashLatencyFromMSIRange>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e2f7      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fe0e 	bl	8002f36 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fe32 	bl	8002f88 <LL_RCC_MSI_SetCalibTrimming>
 8003324:	e013      	b.n	800334e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fe03 	bl	8002f36 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fe27 	bl	8002f88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fcd2 	bl	8003ce8 <RCC_SetFlashLatencyFromMSIRange>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e2d8      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800334e:	f000 fc8b 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003352:	4603      	mov	r3, r0
 8003354:	4aa4      	ldr	r2, [pc, #656]	@ (80035e8 <HAL_RCC_OscConfig+0x344>)
 8003356:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003358:	4ba4      	ldr	r3, [pc, #656]	@ (80035ec <HAL_RCC_OscConfig+0x348>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe ff99 	bl	8002294 <HAL_InitTick>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d039      	beq.n	80033dc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e2c9      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01e      	beq.n	80033b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003374:	f7ff fdb0 	bl	8002ed8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003378:	f7fe ffda 	bl	8002330 <HAL_GetTick>
 800337c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003380:	f7fe ffd6 	bl	8002330 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e2b6      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003392:	f7ff fdbf 	bl	8002f14 <LL_RCC_MSI_IsReady>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f1      	beq.n	8003380 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fdc8 	bl	8002f36 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fdec 	bl	8002f88 <LL_RCC_MSI_SetCalibTrimming>
 80033b0:	e015      	b.n	80033de <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033b2:	f7ff fda0 	bl	8002ef6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033b6:	f7fe ffbb 	bl	8002330 <HAL_GetTick>
 80033ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033be:	f7fe ffb7 	bl	8002330 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e297      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80033d0:	f7ff fda0 	bl	8002f14 <LL_RCC_MSI_IsReady>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f1      	bne.n	80033be <HAL_RCC_OscConfig+0x11a>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033dc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d047      	beq.n	800347a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ea:	f7ff fdf6 	bl	8002fda <LL_RCC_GetSysClkSource>
 80033ee:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f0:	f7ff feef 	bl	80031d2 <LL_RCC_PLL_GetMainSource>
 80033f4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_OscConfig+0x164>
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d108      	bne.n	8003414 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d134      	bne.n	800347a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e275      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341c:	d102      	bne.n	8003424 <HAL_RCC_OscConfig+0x180>
 800341e:	f7ff fc11 	bl	8002c44 <LL_RCC_HSE_Enable>
 8003422:	e001      	b.n	8003428 <HAL_RCC_OscConfig+0x184>
 8003424:	f7ff fc1d 	bl	8002c62 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d012      	beq.n	8003456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe ff7e 	bl	8002330 <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe ff7a 	bl	8002330 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e25a      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800344a:	f7ff fc19 	bl	8002c80 <LL_RCC_HSE_IsReady>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f1      	beq.n	8003438 <HAL_RCC_OscConfig+0x194>
 8003454:	e011      	b.n	800347a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fe ff6b 	bl	8002330 <HAL_GetTick>
 800345a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345e:	f7fe ff67 	bl	8002330 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	@ 0x64
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e247      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003470:	f7ff fc06 	bl	8002c80 <LL_RCC_HSE_IsReady>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f1      	bne.n	800345e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04c      	beq.n	8003520 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003486:	f7ff fda8 	bl	8002fda <LL_RCC_GetSysClkSource>
 800348a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348c:	f7ff fea1 	bl	80031d2 <LL_RCC_PLL_GetMainSource>
 8003490:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_OscConfig+0x200>
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d10e      	bne.n	80034bc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d10b      	bne.n	80034bc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e227      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fc25 	bl	8002d04 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034ba:	e031      	b.n	8003520 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d019      	beq.n	80034f8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	f7ff fbee 	bl	8002ca4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe ff32 	bl	8002330 <HAL_GetTick>
 80034cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fe ff2e 	bl	8002330 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e20e      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80034e2:	f7ff fbfd 	bl	8002ce0 <LL_RCC_HSI_IsReady>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f1      	beq.n	80034d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fc07 	bl	8002d04 <LL_RCC_HSI_SetCalibTrimming>
 80034f6:	e013      	b.n	8003520 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f8:	f7ff fbe3 	bl	8002cc2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe ff18 	bl	8002330 <HAL_GetTick>
 8003500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe ff14 	bl	8002330 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e1f4      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003516:	f7ff fbe3 	bl	8002ce0 <LL_RCC_HSI_IsReady>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f1      	bne.n	8003504 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a3 	beq.w	8003680 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d076      	beq.n	8003630 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d046      	beq.n	80035dc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800354e:	f7ff fc66 	bl	8002e1e <LL_RCC_LSI1_IsReady>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d113      	bne.n	8003580 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003558:	f7ff fc3f 	bl	8002dda <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800355c:	f7fe fee8 	bl	8002330 <HAL_GetTick>
 8003560:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003564:	f7fe fee4 	bl	8002330 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1c4      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003576:	f7ff fc52 	bl	8002e1e <LL_RCC_LSI1_IsReady>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f1      	beq.n	8003564 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003580:	f7ff fc5f 	bl	8002e42 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fed4 	bl	8002330 <HAL_GetTick>
 8003588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800358c:	f7fe fed0 	bl	8002330 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b03      	cmp	r3, #3
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1b0      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800359e:	f7ff fc72 	bl	8002e86 <LL_RCC_LSI2_IsReady>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f1      	beq.n	800358c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fc7c 	bl	8002eaa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80035b2:	f7ff fc23 	bl	8002dfc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fe febb 	bl	8002330 <HAL_GetTick>
 80035ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035be:	f7fe feb7 	bl	8002330 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e197      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80035d0:	f7ff fc25 	bl	8002e1e <LL_RCC_LSI1_IsReady>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f1      	bne.n	80035be <HAL_RCC_OscConfig+0x31a>
 80035da:	e051      	b.n	8003680 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80035dc:	f7ff fbfd 	bl	8002dda <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fea6 	bl	8002330 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80035e6:	e00c      	b.n	8003602 <HAL_RCC_OscConfig+0x35e>
 80035e8:	20000014 	.word	0x20000014
 80035ec:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035f0:	f7fe fe9e 	bl	8002330 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e17e      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003602:	f7ff fc0c 	bl	8002e1e <LL_RCC_LSI1_IsReady>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f1      	beq.n	80035f0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800360c:	f7ff fc2a 	bl	8002e64 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003612:	f7fe fe8d 	bl	8002330 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e16d      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003624:	f7ff fc2f 	bl	8002e86 <LL_RCC_LSI2_IsReady>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f1      	bne.n	8003612 <HAL_RCC_OscConfig+0x36e>
 800362e:	e027      	b.n	8003680 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003630:	f7ff fc18 	bl	8002e64 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe fe7c 	bl	8002330 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800363c:	f7fe fe78 	bl	8002330 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b03      	cmp	r3, #3
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e158      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800364e:	f7ff fc1a 	bl	8002e86 <LL_RCC_LSI2_IsReady>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f1      	bne.n	800363c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003658:	f7ff fbd0 	bl	8002dfc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe fe68 	bl	8002330 <HAL_GetTick>
 8003660:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003664:	f7fe fe64 	bl	8002330 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e144      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003676:	f7ff fbd2 	bl	8002e1e <LL_RCC_LSI1_IsReady>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f1      	bne.n	8003664 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05b      	beq.n	8003744 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368c:	4b9e      	ldr	r3, [pc, #632]	@ (8003908 <HAL_RCC_OscConfig+0x664>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d114      	bne.n	80036c2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003698:	f7ff fa9c 	bl	8002bd4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369c:	f7fe fe48 	bl	8002330 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a4:	f7fe fe44 	bl	8002330 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e124      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b6:	4b94      	ldr	r3, [pc, #592]	@ (8003908 <HAL_RCC_OscConfig+0x664>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HAL_RCC_OscConfig+0x42c>
 80036ca:	f7ff fb30 	bl	8002d2e <LL_RCC_LSE_Enable>
 80036ce:	e00c      	b.n	80036ea <HAL_RCC_OscConfig+0x446>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d104      	bne.n	80036e2 <HAL_RCC_OscConfig+0x43e>
 80036d8:	f7ff fb4b 	bl	8002d72 <LL_RCC_LSE_EnableBypass>
 80036dc:	f7ff fb27 	bl	8002d2e <LL_RCC_LSE_Enable>
 80036e0:	e003      	b.n	80036ea <HAL_RCC_OscConfig+0x446>
 80036e2:	f7ff fb35 	bl	8002d50 <LL_RCC_LSE_Disable>
 80036e6:	f7ff fb55 	bl	8002d94 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d014      	beq.n	800371c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f2:	f7fe fe1d 	bl	8002330 <HAL_GetTick>
 80036f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fe fe19 	bl	8002330 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e0f7      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003710:	f7ff fb51 	bl	8002db6 <LL_RCC_LSE_IsReady>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ef      	beq.n	80036fa <HAL_RCC_OscConfig+0x456>
 800371a:	e013      	b.n	8003744 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fe08 	bl	8002330 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe fe04 	bl	8002330 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0e2      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800373a:	f7ff fb3c 	bl	8002db6 <LL_RCC_LSE_IsReady>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ef      	bne.n	8003724 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80d8 	beq.w	80038fe <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374e:	f7ff fc44 	bl	8002fda <LL_RCC_GetSysClkSource>
 8003752:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	2b02      	cmp	r3, #2
 8003762:	f040 80a6 	bne.w	80038b2 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0203 	and.w	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	429a      	cmp	r2, r3
 8003772:	d123      	bne.n	80037bc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d11c      	bne.n	80037bc <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d114      	bne.n	80037bc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d10d      	bne.n	80037bc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d106      	bne.n	80037bc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d054      	beq.n	8003866 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	d04f      	beq.n	8003862 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037c2:	f7ff fcc0 	bl	8003146 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037c6:	f7fe fdb3 	bl	8002330 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe fdaf 	bl	8002330 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e08f      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ef      	bne.n	80037ce <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	4b45      	ldr	r3, [pc, #276]	@ (800390c <HAL_RCC_OscConfig+0x668>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003806:	0212      	lsls	r2, r2, #8
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800381a:	430a      	orrs	r2, r1
 800381c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003820:	4313      	orrs	r3, r2
 8003822:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003824:	f7ff fc80 	bl	8003128 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003836:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003838:	f7fe fd7a 	bl	8002330 <HAL_GetTick>
 800383c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fd76 	bl	8002330 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e056      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003860:	e04d      	b.n	80038fe <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e04c      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d144      	bne.n	80038fe <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003874:	f7ff fc58 	bl	8003128 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003886:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003888:	f7fe fd52 	bl	8002330 <HAL_GetTick>
 800388c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe fd4e 	bl	8002330 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e02e      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ef      	beq.n	8003890 <HAL_RCC_OscConfig+0x5ec>
 80038b0:	e025      	b.n	80038fe <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b8:	f7ff fc45 	bl	8003146 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe fd38 	bl	8002330 <HAL_GetTick>
 80038c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe fd34 	bl	8002330 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ef      	bne.n	80038c4 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80038e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60d3      	str	r3, [r2, #12]
 80038f8:	e001      	b.n	80038fe <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3734      	adds	r7, #52	@ 0x34
 8003904:	46bd      	mov	sp, r7
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	58000400 	.word	0x58000400
 800390c:	11c1808c 	.word	0x11c1808c

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e12d      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <HAL_RCC_ClockConfig+0x278>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d91b      	bls.n	800396a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b95      	ldr	r3, [pc, #596]	@ (8003b88 <HAL_RCC_ClockConfig+0x278>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	4993      	ldr	r1, [pc, #588]	@ (8003b88 <HAL_RCC_ClockConfig+0x278>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003942:	f7fe fcf5 	bl	8002330 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003948:	e008      	b.n	800395c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800394a:	f7fe fcf1 	bl	8002330 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e111      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395c:	4b8a      	ldr	r3, [pc, #552]	@ (8003b88 <HAL_RCC_ClockConfig+0x278>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d1ef      	bne.n	800394a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fb39 	bl	8002ff2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003980:	f7fe fcd6 	bl	8002330 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003988:	f7fe fcd2 	bl	8002330 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0f2      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800399a:	f7ff fc26 	bl	80031ea <LL_RCC_IsActiveFlag_HPRE>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f1      	beq.n	8003988 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d016      	beq.n	80039de <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fb30 	bl	800301a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039ba:	f7fe fcb9 	bl	8002330 <HAL_GetTick>
 80039be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039c2:	f7fe fcb5 	bl	8002330 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0d5      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80039d4:	f7ff fc1b 	bl	800320e <LL_RCC_IsActiveFlag_C2HPRE>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f1      	beq.n	80039c2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fb29 	bl	8003046 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039f4:	f7fe fc9c 	bl	8002330 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039fc:	f7fe fc98 	bl	8002330 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0b8      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a0e:	f7ff fc11 	bl	8003234 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f1      	beq.n	80039fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d016      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fb23 	bl	8003074 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a2e:	f7fe fc7f 	bl	8002330 <HAL_GetTick>
 8003a32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a36:	f7fe fc7b 	bl	8002330 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e09b      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a48:	f7ff fc07 	bl	800325a <LL_RCC_IsActiveFlag_PPRE1>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f1      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d017      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fb19 	bl	800309c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a6a:	f7fe fc61 	bl	8002330 <HAL_GetTick>
 8003a6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a72:	f7fe fc5d 	bl	8002330 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e07d      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003a84:	f7ff fbfb 	bl	800327e <LL_RCC_IsActiveFlag_PPRE2>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f1      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d043      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003aa2:	f7ff f8ed 	bl	8002c80 <LL_RCC_HSE_IsReady>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11e      	bne.n	8003aea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e067      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003ab8:	f7ff fb54 	bl	8003164 <LL_RCC_PLL_IsReady>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d113      	bne.n	8003aea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e05c      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003ace:	f7ff fa21 	bl	8002f14 <LL_RCC_MSI_IsReady>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d108      	bne.n	8003aea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e051      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003adc:	f7ff f900 	bl	8002ce0 <LL_RCC_HSI_IsReady>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e04a      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fa5f 	bl	8002fb2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fe fc1c 	bl	8002330 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afc:	f7fe fc18 	bl	8002330 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e036      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	f7ff fa62 	bl	8002fda <LL_RCC_GetSysClkSource>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d1ec      	bne.n	8003afc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b22:	4b19      	ldr	r3, [pc, #100]	@ (8003b88 <HAL_RCC_ClockConfig+0x278>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d21b      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b30:	4b15      	ldr	r3, [pc, #84]	@ (8003b88 <HAL_RCC_ClockConfig+0x278>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 0207 	bic.w	r2, r3, #7
 8003b38:	4913      	ldr	r1, [pc, #76]	@ (8003b88 <HAL_RCC_ClockConfig+0x278>)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b40:	f7fe fbf6 	bl	8002330 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b48:	f7fe fbf2 	bl	8002330 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e012      	b.n	8003b80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCC_ClockConfig+0x278>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d1ef      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b68:	f000 f87e 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4a07      	ldr	r2, [pc, #28]	@ (8003b8c <HAL_RCC_ClockConfig+0x27c>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003b72:	f7fe fbe9 	bl	8002348 <HAL_GetTickPrio>
 8003b76:	4603      	mov	r3, r0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fb8b 	bl	8002294 <HAL_InitTick>
 8003b7e:	4603      	mov	r3, r0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	58004000 	.word	0x58004000
 8003b8c:	20000014 	.word	0x20000014

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b96:	f7ff fa20 	bl	8002fda <LL_RCC_GetSysClkSource>
 8003b9a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ba2:	f7ff f9dc 	bl	8002f5e <LL_RCC_MSI_GetRange>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	4a2b      	ldr	r2, [pc, #172]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e04b      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d102      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bbe:	4b28      	ldr	r3, [pc, #160]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e045      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d10a      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003bca:	f7ff f829 	bl	8002c20 <LL_RCC_HSE_IsEnabledDiv2>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003bd4:	4b22      	ldr	r3, [pc, #136]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e03a      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003bda:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e037      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003be0:	f7ff faf7 	bl	80031d2 <LL_RCC_PLL_GetMainSource>
 8003be4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d003      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x64>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x6a>
 8003bf2:	e00d      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bf6:	60bb      	str	r3, [r7, #8]
        break;
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003bfa:	f7ff f811 	bl	8002c20 <LL_RCC_HSE_IsEnabledDiv2>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003c04:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c06:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003c08:	e00d      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003c0a:	4b16      	ldr	r3, [pc, #88]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c0c:	60bb      	str	r3, [r7, #8]
        break;
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c10:	f7ff f9a5 	bl	8002f5e <LL_RCC_MSI_GetRange>
 8003c14:	4603      	mov	r3, r0
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	60bb      	str	r3, [r7, #8]
        break;
 8003c24:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003c26:	f7ff faaf 	bl	8003188 <LL_RCC_PLL_GetN>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	fb03 f402 	mul.w	r4, r3, r2
 8003c32:	f7ff fac2 	bl	80031ba <LL_RCC_PLL_GetDivider>
 8003c36:	4603      	mov	r3, r0
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003c40:	f7ff faaf 	bl	80031a2 <LL_RCC_PLL_GetR>
 8003c44:	4603      	mov	r3, r0
 8003c46:	0f5b      	lsrs	r3, r3, #29
 8003c48:	3301      	adds	r3, #1
 8003c4a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003c50:	68fb      	ldr	r3, [r7, #12]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd90      	pop	{r4, r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	0800a2a4 	.word	0x0800a2a4
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	01e84800 	.word	0x01e84800

08003c68 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b598      	push	{r3, r4, r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003c6c:	f7ff ff90 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003c70:	4604      	mov	r4, r0
 8003c72:	f7ff fa27 	bl	80030c4 <LL_RCC_GetAHBPrescaler>
 8003c76:	4603      	mov	r3, r0
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	4a03      	ldr	r2, [pc, #12]	@ (8003c8c <HAL_RCC_GetHCLKFreq+0x24>)
 8003c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c84:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd98      	pop	{r3, r4, r7, pc}
 8003c8c:	0800a244 	.word	0x0800a244

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b598      	push	{r3, r4, r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003c94:	f7ff ffe8 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c98:	4604      	mov	r4, r0
 8003c9a:	f7ff fa2d 	bl	80030f8 <LL_RCC_GetAPB1Prescaler>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	4a04      	ldr	r2, [pc, #16]	@ (8003cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd98      	pop	{r3, r4, r7, pc}
 8003cb8:	0800a284 	.word	0x0800a284

08003cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cbc:	b598      	push	{r3, r4, r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003cc0:	f7ff ffd2 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	f7ff fa23 	bl	8003110 <LL_RCC_GetAPB2Prescaler>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	0adb      	lsrs	r3, r3, #11
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd98      	pop	{r3, r4, r7, pc}
 8003ce4:	0800a284 	.word	0x0800a284

08003ce8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2bb0      	cmp	r3, #176	@ 0xb0
 8003cf4:	d903      	bls.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003cf6:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e007      	b.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	4a10      	ldr	r2, [pc, #64]	@ (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003d0e:	f7ff f9e5 	bl	80030dc <LL_RCC_GetAHB4Prescaler>
 8003d12:	4603      	mov	r3, r0
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	0c9b      	lsrs	r3, r3, #18
 8003d32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f80c 	bl	8003d54 <RCC_SetFlashLatency>
 8003d3c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	0800a2a4 	.word	0x0800a2a4
 8003d4c:	0800a244 	.word	0x0800a244
 8003d50:	431bde83 	.word	0x431bde83

08003d54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b08f      	sub	sp, #60	@ 0x3c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003d5e:	4b24      	ldr	r3, [pc, #144]	@ (8003df0 <RCC_SetFlashLatency+0x9c>)
 8003d60:	f107 041c 	add.w	r4, r7, #28
 8003d64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003d6a:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <RCC_SetFlashLatency+0xa0>)
 8003d6c:	f107 040c 	add.w	r4, r7, #12
 8003d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003d76:	2300      	movs	r3, #0
 8003d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7e:	e013      	b.n	8003da8 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	3338      	adds	r3, #56	@ 0x38
 8003d86:	443b      	add	r3, r7
 8003d88:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d807      	bhi.n	8003da2 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	3338      	adds	r3, #56	@ 0x38
 8003d98:	443b      	add	r3, r7
 8003d9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003d9e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8003da0:	e005      	b.n	8003dae <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	3301      	adds	r3, #1
 8003da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d9e8      	bls.n	8003d80 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003dae:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <RCC_SetFlashLatency+0xa4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4910      	ldr	r1, [pc, #64]	@ (8003df8 <RCC_SetFlashLatency+0xa4>)
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003dbe:	f7fe fab7 	bl	8002330 <HAL_GetTick>
 8003dc2:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003dc4:	e008      	b.n	8003dd8 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003dc6:	f7fe fab3 	bl	8002330 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e007      	b.n	8003de8 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003dd8:	4b07      	ldr	r3, [pc, #28]	@ (8003df8 <RCC_SetFlashLatency+0xa4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d1ef      	bne.n	8003dc6 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	373c      	adds	r7, #60	@ 0x3c
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd90      	pop	{r4, r7, pc}
 8003df0:	0800a080 	.word	0x0800a080
 8003df4:	0800a090 	.word	0x0800a090
 8003df8:	58004000 	.word	0x58004000

08003dfc <LL_RCC_LSE_IsEnabled>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <LL_RCC_LSE_IsEnabled+0x18>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <LL_RCC_LSE_IsEnabled+0x1a>
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_RCC_LSE_IsReady>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d101      	bne.n	8003e38 <LL_RCC_LSE_IsReady+0x18>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <LL_RCC_LSE_IsReady+0x1a>
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_MSI_EnablePLLMode>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6013      	str	r3, [r2, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_RCC_SetRFWKPClockSource>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e72:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <LL_RCC_SetSMPSClockSource>:
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	f023 0203 	bic.w	r2, r3, #3
 8003ea0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_RCC_SetSMPSPrescaler>:
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <LL_RCC_SetUSARTClockSource>:
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_RCC_SetLPUARTClockSource>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_RCC_SetI2CClockSource>:
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f42:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	401a      	ands	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_SetLPTIMClockSource>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	43db      	mvns	r3, r3
 8003f88:	401a      	ands	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <LL_RCC_SetRNGClockSource>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003fb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_RCC_SetCLK48ClockSource>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_RCC_SetADCClockSource>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004010:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_SetRTCClockSource>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800403c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_RCC_GetRTCClockSource>:
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_RCC_ForceBackupDomainReset>:
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800407e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b088      	sub	sp, #32
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80040ba:	2300      	movs	r3, #0
 80040bc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040be:	2300      	movs	r3, #0
 80040c0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d046      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80040ce:	f7ff ffc1 	bl	8004054 <LL_RCC_GetRTCClockSource>
 80040d2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d03c      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040de:	f7fe fd79 	bl	8002bd4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff9b 	bl	8004028 <LL_RCC_SetRTCClockSource>
 80040f2:	e02e      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040fe:	f7ff ffb6 	bl	800406e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004102:	f7ff ffc5 	bl	8004090 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800411e:	f7ff fe6d 	bl	8003dfc <LL_RCC_LSE_IsEnabled>
 8004122:	4603      	mov	r3, r0
 8004124:	2b01      	cmp	r3, #1
 8004126:	d114      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004128:	f7fe f902 	bl	8002330 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800412e:	e00b      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe f8fe 	bl	8002330 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d902      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	77fb      	strb	r3, [r7, #31]
              break;
 8004146:	e004      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004148:	f7ff fe6a 	bl	8003e20 <LL_RCC_LSE_IsReady>
 800414c:	4603      	mov	r3, r0
 800414e:	2b01      	cmp	r3, #1
 8004150:	d1ee      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004152:	7ffb      	ldrb	r3, [r7, #31]
 8004154:	77bb      	strb	r3, [r7, #30]
 8004156:	e001      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004158:	7ffb      	ldrb	r3, [r7, #31]
 800415a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff feb6 	bl	8003ede <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fec1 	bl	8003f0a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fee9 	bl	8003f70 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fede 	bl	8003f70 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff feb6 	bl	8003f36 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041de:	d008      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041e8:	d003      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fed4 	bl	8003fa4 <LL_RCC_SetRNGClockSource>
 80041fc:	e00a      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	2000      	movs	r0, #0
 800420a:	f7ff fecb 	bl	8003fa4 <LL_RCC_SetRNGClockSource>
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff fede 	bl	8003fd0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800421c:	d107      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800422c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004236:	2b00      	cmp	r3, #0
 8004238:	d011      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fedc 	bl	8003ffc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800424c:	d107      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800425c:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fdf7 	bl	8003e62 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fe16 	bl	8003eb6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fdfd 	bl	8003e8e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004294:	7fbb      	ldrb	r3, [r7, #30]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80042a2:	f7ff fdcf 	bl	8003e44 <LL_RCC_MSI_EnablePLLMode>
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e09f      	b.n	80043fe <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fc60 	bl	8001b98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80042e0:	4b49      	ldr	r3, [pc, #292]	@ (8004408 <HAL_RTC_Init+0x15c>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d07e      	beq.n	80043ea <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	22ca      	movs	r2, #202	@ 0xca
 80042f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2253      	movs	r2, #83	@ 0x53
 80042fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8ab 	bl	8004458 <RTC_EnterInitMode>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	22ff      	movs	r2, #255	@ 0xff
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2204      	movs	r2, #4
 8004314:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e067      	b.n	80043ee <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800432c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004330:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68d2      	ldr	r2, [r2, #12]
 8004358:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6919      	ldr	r1, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	041a      	lsls	r2, r3, #16
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800437c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0202 	bic.w	r2, r2, #2
 800438c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d113      	bne.n	80043dc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f829 	bl	800440c <HAL_RTC_WaitForSynchro>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	22ff      	movs	r2, #255	@ 0xff
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2204      	movs	r2, #4
 80043cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e010      	b.n	80043fe <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	22ff      	movs	r2, #255	@ 0xff
 80043e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e001      	b.n	80043ee <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d103      	bne.n	80043fc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40002800 	.word	0x40002800

0800440c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004422:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004424:	f7fd ff84 	bl	8002330 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800442a:	e009      	b.n	8004440 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800442c:	f7fd ff80 	bl	8002330 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800443a:	d901      	bls.n	8004440 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e007      	b.n	8004450 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ee      	beq.n	800442c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d119      	bne.n	80044a2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f04f 32ff 	mov.w	r2, #4294967295
 8004476:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004478:	f7fd ff5a 	bl	8002330 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800447e:	e009      	b.n	8004494 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004480:	f7fd ff56 	bl	8002330 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800448e:	d901      	bls.n	8004494 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e007      	b.n	80044a4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0ee      	beq.n	8004480 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e0a8      	b.n	8004618 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	22ca      	movs	r2, #202	@ 0xca
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2253      	movs	r2, #83	@ 0x53
 80044e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80044f4:	f7fd ff1c 	bl	8002330 <HAL_GetTick>
 80044f8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80044fa:	e015      	b.n	8004528 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044fc:	f7fd ff18 	bl	8002330 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800450a:	d90d      	bls.n	8004528 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	22ff      	movs	r2, #255	@ 0xff
 8004512:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2203      	movs	r2, #3
 8004518:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e077      	b.n	8004618 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e2      	bne.n	80044fc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004544:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004556:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004558:	f7fd feea 	bl	8002330 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800455e:	e015      	b.n	800458c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004560:	f7fd fee6 	bl	8002330 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800456e:	d90d      	bls.n	800458c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	22ff      	movs	r2, #255	@ 0xff
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2203      	movs	r2, #3
 800457c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e045      	b.n	8004618 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0e2      	beq.n	8004560 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0207 	bic.w	r2, r2, #7
 80045b0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6899      	ldr	r1, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80045c2:	4b17      	ldr	r3, [pc, #92]	@ (8004620 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c8:	4a15      	ldr	r2, [pc, #84]	@ (8004620 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80045d2:	4b13      	ldr	r3, [pc, #76]	@ (8004620 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80045d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ec:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045fc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	22ff      	movs	r2, #255	@ 0xff
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	58000800 	.word	0x58000800

08004624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e049      	b.n	80046ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd fad8 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f000 fa38 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01b      	beq.n	8004736 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0202 	mvn.w	r2, #2
 8004706:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f9bc 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 8004722:	e005      	b.n	8004730 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f9ae 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9bf 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01b      	beq.n	8004782 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f06f 0204 	mvn.w	r2, #4
 8004752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f996 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 800476e:	e005      	b.n	800477c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f988 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f999 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01b      	beq.n	80047ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f06f 0208 	mvn.w	r2, #8
 800479e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2204      	movs	r2, #4
 80047a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f970 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 80047ba:	e005      	b.n	80047c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f962 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f973 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d020      	beq.n	800481a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01b      	beq.n	800481a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f06f 0210 	mvn.w	r2, #16
 80047ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2208      	movs	r2, #8
 80047f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f94a 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 8004806:	e005      	b.n	8004814 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f93c 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f94d 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00c      	beq.n	800483e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f06f 0201 	mvn.w	r2, #1
 8004836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f91a 	bl	8004a72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa98 	bl	8004d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00c      	beq.n	8004890 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa90 	bl	8004db0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f907 	bl	8004ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0220 	mvn.w	r2, #32
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa58 	bl	8004d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIM_ConfigClockSource+0x1c>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0b6      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x18a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800491a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800491e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004938:	d03e      	beq.n	80049b8 <HAL_TIM_ConfigClockSource+0xd8>
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800493e:	f200 8087 	bhi.w	8004a50 <HAL_TIM_ConfigClockSource+0x170>
 8004942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004946:	f000 8086 	beq.w	8004a56 <HAL_TIM_ConfigClockSource+0x176>
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800494e:	d87f      	bhi.n	8004a50 <HAL_TIM_ConfigClockSource+0x170>
 8004950:	2b70      	cmp	r3, #112	@ 0x70
 8004952:	d01a      	beq.n	800498a <HAL_TIM_ConfigClockSource+0xaa>
 8004954:	2b70      	cmp	r3, #112	@ 0x70
 8004956:	d87b      	bhi.n	8004a50 <HAL_TIM_ConfigClockSource+0x170>
 8004958:	2b60      	cmp	r3, #96	@ 0x60
 800495a:	d050      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x11e>
 800495c:	2b60      	cmp	r3, #96	@ 0x60
 800495e:	d877      	bhi.n	8004a50 <HAL_TIM_ConfigClockSource+0x170>
 8004960:	2b50      	cmp	r3, #80	@ 0x50
 8004962:	d03c      	beq.n	80049de <HAL_TIM_ConfigClockSource+0xfe>
 8004964:	2b50      	cmp	r3, #80	@ 0x50
 8004966:	d873      	bhi.n	8004a50 <HAL_TIM_ConfigClockSource+0x170>
 8004968:	2b40      	cmp	r3, #64	@ 0x40
 800496a:	d058      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x13e>
 800496c:	2b40      	cmp	r3, #64	@ 0x40
 800496e:	d86f      	bhi.n	8004a50 <HAL_TIM_ConfigClockSource+0x170>
 8004970:	2b30      	cmp	r3, #48	@ 0x30
 8004972:	d064      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x15e>
 8004974:	2b30      	cmp	r3, #48	@ 0x30
 8004976:	d86b      	bhi.n	8004a50 <HAL_TIM_ConfigClockSource+0x170>
 8004978:	2b20      	cmp	r3, #32
 800497a:	d060      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x15e>
 800497c:	2b20      	cmp	r3, #32
 800497e:	d867      	bhi.n	8004a50 <HAL_TIM_ConfigClockSource+0x170>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d05c      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x15e>
 8004984:	2b10      	cmp	r3, #16
 8004986:	d05a      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x15e>
 8004988:	e062      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800499a:	f000 f975 	bl	8004c88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	609a      	str	r2, [r3, #8]
      break;
 80049b6:	e04f      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049c8:	f000 f95e 	bl	8004c88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049da:	609a      	str	r2, [r3, #8]
      break;
 80049dc:	e03c      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	461a      	mov	r2, r3
 80049ec:	f000 f8d0 	bl	8004b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2150      	movs	r1, #80	@ 0x50
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f929 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 80049fc:	e02c      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f000 f8ef 	bl	8004bee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2160      	movs	r1, #96	@ 0x60
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f919 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 8004a1c:	e01c      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f000 f8b0 	bl	8004b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2140      	movs	r1, #64	@ 0x40
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f909 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 8004a3c:	e00c      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f000 f900 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 8004a4e:	e003      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      break;
 8004a54:	e000      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a28      	ldr	r2, [pc, #160]	@ (8004b8c <TIM_Base_SetConfig+0xb4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0x20>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af6:	d108      	bne.n	8004b0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b8c <TIM_Base_SetConfig+0xb4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_Base_SetConfig+0x42>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b18:	d108      	bne.n	8004b2c <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a0e      	ldr	r2, [pc, #56]	@ (8004b8c <TIM_Base_SetConfig+0xb4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d103      	bne.n	8004b60 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d105      	bne.n	8004b7e <TIM_Base_SetConfig+0xa6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f023 0201 	bic.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	611a      	str	r2, [r3, #16]
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40012c00 	.word	0x40012c00

08004b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f023 0201 	bic.w	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f023 030a 	bic.w	r3, r3, #10
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f023 0210 	bic.w	r2, r3, #16
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	031b      	lsls	r3, r3, #12
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f043 0307 	orr.w	r3, r3, #7
 8004c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e04a      	b.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a12      	ldr	r2, [pc, #72]	@ (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d48:	d10c      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40012c00 	.word	0x40012c00

08004d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <LL_RCC_GetUSARTClockSource>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4013      	ands	r3, r2
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <LL_RCC_GetLPUARTClockSource>:
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4013      	ands	r3, r2
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e042      	b.n	8004e9c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fc ff1d 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2224      	movs	r2, #36	@ 0x24
 8004e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fade 	bl	8005410 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f8b3 	bl	8004fc0 <UART_SetConfig>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e01b      	b.n	8004e9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fb5d 	bl	8005554 <UART_CheckIdleState>
 8004e9a:	4603      	mov	r3, r0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	@ 0x28
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d17b      	bne.n	8004fb6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_UART_Transmit+0x26>
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e074      	b.n	8004fb8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2221      	movs	r2, #33	@ 0x21
 8004eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ede:	f7fd fa27 	bl	8002330 <HAL_GetTick>
 8004ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	88fa      	ldrh	r2, [r7, #6]
 8004ee8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efc:	d108      	bne.n	8004f10 <HAL_UART_Transmit+0x6c>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d104      	bne.n	8004f10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	e003      	b.n	8004f18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f18:	e030      	b.n	8004f7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2180      	movs	r1, #128	@ 0x80
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fbbf 	bl	80056a8 <UART_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e03d      	b.n	8004fb8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	3302      	adds	r3, #2
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	e007      	b.n	8004f6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1c8      	bne.n	8004f1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2140      	movs	r1, #64	@ 0x40
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fb88 	bl	80056a8 <UART_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e006      	b.n	8004fb8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e000      	b.n	8004fb8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
  }
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc4:	b08c      	sub	sp, #48	@ 0x30
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4baf      	ldr	r3, [pc, #700]	@ (80052ac <UART_SetConfig+0x2ec>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4aa4      	ldr	r2, [pc, #656]	@ (80052b0 <UART_SetConfig+0x2f0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005028:	4313      	orrs	r3, r2
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005036:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005040:	430b      	orrs	r3, r1
 8005042:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	f023 010f 	bic.w	r1, r3, #15
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a95      	ldr	r2, [pc, #596]	@ (80052b4 <UART_SetConfig+0x2f4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d125      	bne.n	80050b0 <UART_SetConfig+0xf0>
 8005064:	2003      	movs	r0, #3
 8005066:	f7ff fead 	bl	8004dc4 <LL_RCC_GetUSARTClockSource>
 800506a:	4603      	mov	r3, r0
 800506c:	2b03      	cmp	r3, #3
 800506e:	d81b      	bhi.n	80050a8 <UART_SetConfig+0xe8>
 8005070:	a201      	add	r2, pc, #4	@ (adr r2, 8005078 <UART_SetConfig+0xb8>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	08005099 	.word	0x08005099
 8005080:	08005091 	.word	0x08005091
 8005084:	080050a1 	.word	0x080050a1
 8005088:	2301      	movs	r3, #1
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508e:	e042      	b.n	8005116 <UART_SetConfig+0x156>
 8005090:	2302      	movs	r3, #2
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005096:	e03e      	b.n	8005116 <UART_SetConfig+0x156>
 8005098:	2304      	movs	r3, #4
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509e:	e03a      	b.n	8005116 <UART_SetConfig+0x156>
 80050a0:	2308      	movs	r3, #8
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a6:	e036      	b.n	8005116 <UART_SetConfig+0x156>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ae:	e032      	b.n	8005116 <UART_SetConfig+0x156>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a7e      	ldr	r2, [pc, #504]	@ (80052b0 <UART_SetConfig+0x2f0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d12a      	bne.n	8005110 <UART_SetConfig+0x150>
 80050ba:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80050be:	f7ff fe91 	bl	8004de4 <LL_RCC_GetLPUARTClockSource>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050c8:	d01a      	beq.n	8005100 <UART_SetConfig+0x140>
 80050ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050ce:	d81b      	bhi.n	8005108 <UART_SetConfig+0x148>
 80050d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050d4:	d00c      	beq.n	80050f0 <UART_SetConfig+0x130>
 80050d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050da:	d815      	bhi.n	8005108 <UART_SetConfig+0x148>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <UART_SetConfig+0x128>
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e4:	d008      	beq.n	80050f8 <UART_SetConfig+0x138>
 80050e6:	e00f      	b.n	8005108 <UART_SetConfig+0x148>
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ee:	e012      	b.n	8005116 <UART_SetConfig+0x156>
 80050f0:	2302      	movs	r3, #2
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f6:	e00e      	b.n	8005116 <UART_SetConfig+0x156>
 80050f8:	2304      	movs	r3, #4
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fe:	e00a      	b.n	8005116 <UART_SetConfig+0x156>
 8005100:	2308      	movs	r3, #8
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005106:	e006      	b.n	8005116 <UART_SetConfig+0x156>
 8005108:	2310      	movs	r3, #16
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510e:	e002      	b.n	8005116 <UART_SetConfig+0x156>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a65      	ldr	r2, [pc, #404]	@ (80052b0 <UART_SetConfig+0x2f0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	f040 8097 	bne.w	8005250 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005122:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005126:	2b08      	cmp	r3, #8
 8005128:	d823      	bhi.n	8005172 <UART_SetConfig+0x1b2>
 800512a:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <UART_SetConfig+0x170>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005155 	.word	0x08005155
 8005134:	08005173 	.word	0x08005173
 8005138:	0800515d 	.word	0x0800515d
 800513c:	08005173 	.word	0x08005173
 8005140:	08005163 	.word	0x08005163
 8005144:	08005173 	.word	0x08005173
 8005148:	08005173 	.word	0x08005173
 800514c:	08005173 	.word	0x08005173
 8005150:	0800516b 	.word	0x0800516b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7fe fd9c 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8005158:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800515a:	e010      	b.n	800517e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800515c:	4b56      	ldr	r3, [pc, #344]	@ (80052b8 <UART_SetConfig+0x2f8>)
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005160:	e00d      	b.n	800517e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005162:	f7fe fd15 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005166:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005168:	e009      	b.n	800517e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005170:	e005      	b.n	800517e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800517c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 812b 	beq.w	80053dc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	4a4c      	ldr	r2, [pc, #304]	@ (80052bc <UART_SetConfig+0x2fc>)
 800518c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005190:	461a      	mov	r2, r3
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	fbb3 f3f2 	udiv	r3, r3, r2
 8005198:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4413      	add	r3, r2
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d305      	bcc.n	80051b6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d903      	bls.n	80051be <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051bc:	e10e      	b.n	80053dc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	2200      	movs	r2, #0
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	60fa      	str	r2, [r7, #12]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	4a3c      	ldr	r2, [pc, #240]	@ (80052bc <UART_SetConfig+0x2fc>)
 80051cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2200      	movs	r2, #0
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051e0:	f7fb f826 	bl	8000230 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4610      	mov	r0, r2
 80051ea:	4619      	mov	r1, r3
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	020b      	lsls	r3, r1, #8
 80051f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051fa:	0202      	lsls	r2, r0, #8
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	6849      	ldr	r1, [r1, #4]
 8005200:	0849      	lsrs	r1, r1, #1
 8005202:	2000      	movs	r0, #0
 8005204:	460c      	mov	r4, r1
 8005206:	4605      	mov	r5, r0
 8005208:	eb12 0804 	adds.w	r8, r2, r4
 800520c:	eb43 0905 	adc.w	r9, r3, r5
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	469a      	mov	sl, r3
 8005218:	4693      	mov	fp, r2
 800521a:	4652      	mov	r2, sl
 800521c:	465b      	mov	r3, fp
 800521e:	4640      	mov	r0, r8
 8005220:	4649      	mov	r1, r9
 8005222:	f7fb f805 	bl	8000230 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4613      	mov	r3, r2
 800522c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005234:	d308      	bcc.n	8005248 <UART_SetConfig+0x288>
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800523c:	d204      	bcs.n	8005248 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	e0c9      	b.n	80053dc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800524e:	e0c5      	b.n	80053dc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005258:	d16d      	bne.n	8005336 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800525a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800525e:	3b01      	subs	r3, #1
 8005260:	2b07      	cmp	r3, #7
 8005262:	d82d      	bhi.n	80052c0 <UART_SetConfig+0x300>
 8005264:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <UART_SetConfig+0x2ac>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	0800528d 	.word	0x0800528d
 8005270:	08005295 	.word	0x08005295
 8005274:	080052c1 	.word	0x080052c1
 8005278:	0800529b 	.word	0x0800529b
 800527c:	080052c1 	.word	0x080052c1
 8005280:	080052c1 	.word	0x080052c1
 8005284:	080052c1 	.word	0x080052c1
 8005288:	080052a3 	.word	0x080052a3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800528c:	f7fe fd16 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 8005290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005292:	e01b      	b.n	80052cc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005294:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <UART_SetConfig+0x2f8>)
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005298:	e018      	b.n	80052cc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529a:	f7fe fc79 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 800529e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052a0:	e014      	b.n	80052cc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052a8:	e010      	b.n	80052cc <UART_SetConfig+0x30c>
 80052aa:	bf00      	nop
 80052ac:	cfff69f3 	.word	0xcfff69f3
 80052b0:	40008000 	.word	0x40008000
 80052b4:	40013800 	.word	0x40013800
 80052b8:	00f42400 	.word	0x00f42400
 80052bc:	0800a304 	.word	0x0800a304
      default:
        pclk = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8084 	beq.w	80053dc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005408 <UART_SetConfig+0x448>)
 80052da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052de:	461a      	mov	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052e6:	005a      	lsls	r2, r3, #1
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	441a      	add	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	2b0f      	cmp	r3, #15
 80052fe:	d916      	bls.n	800532e <UART_SetConfig+0x36e>
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005306:	d212      	bcs.n	800532e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f023 030f 	bic.w	r3, r3, #15
 8005310:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	b29b      	uxth	r3, r3
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	b29a      	uxth	r2, r3
 800531e:	8bfb      	ldrh	r3, [r7, #30]
 8005320:	4313      	orrs	r3, r2
 8005322:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	8bfa      	ldrh	r2, [r7, #30]
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	e056      	b.n	80053dc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005334:	e052      	b.n	80053dc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005336:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800533a:	3b01      	subs	r3, #1
 800533c:	2b07      	cmp	r3, #7
 800533e:	d822      	bhi.n	8005386 <UART_SetConfig+0x3c6>
 8005340:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <UART_SetConfig+0x388>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	08005369 	.word	0x08005369
 800534c:	08005371 	.word	0x08005371
 8005350:	08005387 	.word	0x08005387
 8005354:	08005377 	.word	0x08005377
 8005358:	08005387 	.word	0x08005387
 800535c:	08005387 	.word	0x08005387
 8005360:	08005387 	.word	0x08005387
 8005364:	0800537f 	.word	0x0800537f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005368:	f7fe fca8 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 800536c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800536e:	e010      	b.n	8005392 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005370:	4b26      	ldr	r3, [pc, #152]	@ (800540c <UART_SetConfig+0x44c>)
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005374:	e00d      	b.n	8005392 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005376:	f7fe fc0b 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 800537a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800537c:	e009      	b.n	8005392 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005384:	e005      	b.n	8005392 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005390:	bf00      	nop
    }

    if (pclk != 0U)
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	d021      	beq.n	80053dc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	4a1a      	ldr	r2, [pc, #104]	@ (8005408 <UART_SetConfig+0x448>)
 800539e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a2:	461a      	mov	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	441a      	add	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	d909      	bls.n	80053d6 <UART_SetConfig+0x416>
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c8:	d205      	bcs.n	80053d6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60da      	str	r2, [r3, #12]
 80053d4:	e002      	b.n	80053dc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2201      	movs	r2, #1
 80053e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2200      	movs	r2, #0
 80053f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2200      	movs	r2, #0
 80053f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3730      	adds	r7, #48	@ 0x30
 8005400:	46bd      	mov	sp, r7
 8005402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005406:	bf00      	nop
 8005408:	0800a304 	.word	0x0800a304
 800540c:	00f42400 	.word	0x00f42400

08005410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01a      	beq.n	8005526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800550e:	d10a      	bne.n	8005526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	605a      	str	r2, [r3, #4]
  }
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b098      	sub	sp, #96	@ 0x60
 8005558:	af02      	add	r7, sp, #8
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005564:	f7fc fee4 	bl	8002330 <HAL_GetTick>
 8005568:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b08      	cmp	r3, #8
 8005576:	d12f      	bne.n	80055d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005578:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005580:	2200      	movs	r2, #0
 8005582:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f88e 	bl	80056a8 <UART_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d022      	beq.n	80055d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e6      	bne.n	8005592 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e063      	b.n	80056a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d149      	bne.n	800567a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ee:	2200      	movs	r2, #0
 80055f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f857 	bl	80056a8 <UART_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d03c      	beq.n	800567a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	623b      	str	r3, [r7, #32]
   return(result);
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800561e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005620:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e6      	bne.n	8005600 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3308      	adds	r3, #8
 8005638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	60fb      	str	r3, [r7, #12]
   return(result);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005652:	61fa      	str	r2, [r7, #28]
 8005654:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	69b9      	ldr	r1, [r7, #24]
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	617b      	str	r3, [r7, #20]
   return(result);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e012      	b.n	80056a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3758      	adds	r7, #88	@ 0x58
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b8:	e04f      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d04b      	beq.n	800575a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c2:	f7fc fe35 	bl	8002330 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e04e      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d037      	beq.n	800575a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b80      	cmp	r3, #128	@ 0x80
 80056ee:	d034      	beq.n	800575a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b40      	cmp	r3, #64	@ 0x40
 80056f4:	d031      	beq.n	800575a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d110      	bne.n	8005726 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2208      	movs	r2, #8
 800570a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f838 	bl	8005782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2208      	movs	r2, #8
 8005716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e029      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005734:	d111      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800573e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f81e 	bl	8005782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e00f      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4013      	ands	r3, r2
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	429a      	cmp	r2, r3
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	429a      	cmp	r2, r3
 8005776:	d0a0      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005782:	b480      	push	{r7}
 8005784:	b095      	sub	sp, #84	@ 0x54
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800579e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e6      	bne.n	800578a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3308      	adds	r3, #8
 80057c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e3      	bne.n	80057bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d118      	bne.n	800582e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	60bb      	str	r3, [r7, #8]
   return(result);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f023 0310 	bic.w	r3, r3, #16
 8005810:	647b      	str	r3, [r7, #68]	@ 0x44
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6979      	ldr	r1, [r7, #20]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	613b      	str	r3, [r7, #16]
   return(result);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e6      	bne.n	80057fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005842:	bf00      	nop
 8005844:	3754      	adds	r7, #84	@ 0x54
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_UARTEx_DisableFifoMode+0x16>
 8005860:	2302      	movs	r3, #2
 8005862:	e027      	b.n	80058b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2224      	movs	r2, #36	@ 0x24
 8005870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005892:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e02d      	b.n	8005934 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2224      	movs	r2, #36	@ 0x24
 80058e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f84f 	bl	80059b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e02d      	b.n	80059b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	@ 0x24
 8005960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f811 	bl	80059b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d108      	bne.n	80059da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059d8:	e031      	b.n	8005a3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059da:	2308      	movs	r3, #8
 80059dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059de:	2308      	movs	r3, #8
 80059e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	0e5b      	lsrs	r3, r3, #25
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	0f5b      	lsrs	r3, r3, #29
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	7b3a      	ldrb	r2, [r7, #12]
 8005a06:	4911      	ldr	r1, [pc, #68]	@ (8005a4c <UARTEx_SetNbDataToProcess+0x94>)
 8005a08:	5c8a      	ldrb	r2, [r1, r2]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a0e:	7b3a      	ldrb	r2, [r7, #12]
 8005a10:	490f      	ldr	r1, [pc, #60]	@ (8005a50 <UARTEx_SetNbDataToProcess+0x98>)
 8005a12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	7b7a      	ldrb	r2, [r7, #13]
 8005a24:	4909      	ldr	r1, [pc, #36]	@ (8005a4c <UARTEx_SetNbDataToProcess+0x94>)
 8005a26:	5c8a      	ldrb	r2, [r1, r2]
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a2c:	7b7a      	ldrb	r2, [r7, #13]
 8005a2e:	4908      	ldr	r1, [pc, #32]	@ (8005a50 <UARTEx_SetNbDataToProcess+0x98>)
 8005a30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	0800a31c 	.word	0x0800a31c
 8005a50:	0800a324 	.word	0x0800a324

08005a54 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a5e:	f107 0308 	add.w	r3, r7, #8
 8005a62:	2218      	movs	r2, #24
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 f92d 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a6c:	233f      	movs	r3, #63	@ 0x3f
 8005a6e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005a70:	2381      	movs	r3, #129	@ 0x81
 8005a72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a7c:	f107 0308 	add.w	r3, r7, #8
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fba8 	bl	80071d8 <hci_send_req>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	da01      	bge.n	8005a92 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005a8e:	23ff      	movs	r3, #255	@ 0xff
 8005a90:	e000      	b.n	8005a94 <aci_gap_set_non_discoverable+0x40>
  return status;
 8005a92:	79fb      	ldrb	r3, [r7, #7]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005a9c:	b5b0      	push	{r4, r5, r7, lr}
 8005a9e:	b0ce      	sub	sp, #312	@ 0x138
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005aae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005aba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005abe:	4622      	mov	r2, r4
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005ac6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8005aca:	4602      	mov	r2, r0
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005ad2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005ada:	f107 0310 	add.w	r3, r7, #16
 8005ade:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005ae2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	f107 0210 	add.w	r2, r7, #16
 8005aec:	4413      	add	r3, r2
 8005aee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005af2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005af6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005afa:	4413      	add	r3, r2
 8005afc:	3309      	adds	r3, #9
 8005afe:	f107 0210 	add.w	r2, r7, #16
 8005b02:	4413      	add	r3, r2
 8005b04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005b08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005b0c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005b1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005b1e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005b22:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b2e:	3301      	adds	r3, #1
 8005b30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005b34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005b38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005b3c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005b40:	8812      	ldrh	r2, [r2, #0]
 8005b42:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b4a:	3302      	adds	r3, #2
 8005b4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005b50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005b54:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005b58:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005b5c:	8812      	ldrh	r2, [r2, #0]
 8005b5e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b66:	3302      	adds	r3, #2
 8005b68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005b70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005b74:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005b78:	7812      	ldrb	r2, [r2, #0]
 8005b7a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b80:	3301      	adds	r3, #1
 8005b82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005b8a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005b8e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005b90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005b9e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005ba2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005ba4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005bae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005bb8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f872 	bl	8006ca6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005bc2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005bc6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005bca:	4413      	add	r3, r2
 8005bcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005bd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005bd4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005bd8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bde:	3301      	adds	r3, #1
 8005be0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005be4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005be8:	3301      	adds	r3, #1
 8005bea:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005bee:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 f857 	bl	8006ca6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005bf8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005bfc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005c00:	4413      	add	r3, r2
 8005c02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c0a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005c0e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c14:	3302      	adds	r3, #2
 8005c16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c1e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005c22:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c28:	3302      	adds	r3, #2
 8005c2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c32:	2218      	movs	r2, #24
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f845 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c3c:	233f      	movs	r3, #63	@ 0x3f
 8005c3e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005c42:	2383      	movs	r3, #131	@ 0x83
 8005c44:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005c48:	f107 0310 	add.w	r3, r7, #16
 8005c4c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005c58:	f107 030f 	add.w	r3, r7, #15
 8005c5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fab3 	bl	80071d8 <hci_send_req>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	da01      	bge.n	8005c7c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005c78:	23ff      	movs	r3, #255	@ 0xff
 8005c7a:	e004      	b.n	8005c86 <aci_gap_set_discoverable+0x1ea>
  return status;
 8005c7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c84:	781b      	ldrb	r3, [r3, #0]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bdb0      	pop	{r4, r5, r7, pc}

08005c90 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b0cc      	sub	sp, #304	@ 0x130
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4602      	mov	r2, r0
 8005c98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c9c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005ca0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005ca2:	f107 0310 	add.w	r3, r7, #16
 8005ca6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005caa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cc0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005cc4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cda:	2218      	movs	r2, #24
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fff1 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005ce4:	233f      	movs	r3, #63	@ 0x3f
 8005ce6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8005cea:	2385      	movs	r3, #133	@ 0x85
 8005cec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005cf0:	f107 0310 	add.w	r3, r7, #16
 8005cf4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cfc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005d00:	f107 030f 	add.w	r3, r7, #15
 8005d04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 fa5f 	bl	80071d8 <hci_send_req>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da01      	bge.n	8005d24 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005d20:	23ff      	movs	r3, #255	@ 0xff
 8005d22:	e004      	b.n	8005d2e <aci_gap_set_io_capability+0x9e>
  return status;
 8005d24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d28:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d2c:	781b      	ldrb	r3, [r3, #0]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005d38:	b5b0      	push	{r4, r5, r7, lr}
 8005d3a:	b0cc      	sub	sp, #304	@ 0x130
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4605      	mov	r5, r0
 8005d40:	460c      	mov	r4, r1
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d4a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005d4e:	462a      	mov	r2, r5
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d56:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d62:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005d66:	4602      	mov	r2, r0
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005d72:	460a      	mov	r2, r1
 8005d74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005d76:	f107 0310 	add.w	r3, r7, #16
 8005d7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005d7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d82:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d94:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d98:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005da4:	3301      	adds	r3, #1
 8005da6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005dae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005db2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005dba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8005dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005dc8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005dcc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005dd0:	7812      	ldrb	r2, [r2, #0]
 8005dd2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005de2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005de6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005df2:	3301      	adds	r3, #1
 8005df4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005dfc:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005e00:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005e02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e06:	3301      	adds	r3, #1
 8005e08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e10:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005e14:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e24:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005e28:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e2e:	3301      	adds	r3, #1
 8005e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e38:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005e3c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e44:	3304      	adds	r3, #4
 8005e46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e4e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005e52:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005e54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e58:	3301      	adds	r3, #1
 8005e5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e62:	2218      	movs	r2, #24
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 ff2d 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e6c:	233f      	movs	r3, #63	@ 0x3f
 8005e6e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005e72:	2386      	movs	r3, #134	@ 0x86
 8005e74:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e78:	f107 0310 	add.w	r3, r7, #16
 8005e7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005e88:	f107 030f 	add.w	r3, r7, #15
 8005e8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 f99b 	bl	80071d8 <hci_send_req>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	da01      	bge.n	8005eac <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005ea8:	23ff      	movs	r3, #255	@ 0xff
 8005eaa:	e004      	b.n	8005eb6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005eac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eb0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005eb4:	781b      	ldrb	r3, [r3, #0]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bdb0      	pop	{r4, r5, r7, pc}

08005ec0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b0cc      	sub	sp, #304	@ 0x130
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005ed0:	6019      	str	r1, [r3, #0]
 8005ed2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ed6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005eda:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005edc:	f107 0310 	add.w	r3, r7, #16
 8005ee0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005ee4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ee8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005efa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005efe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005f02:	8812      	ldrh	r2, [r2, #0]
 8005f04:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f14:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f18:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f26:	3304      	adds	r3, #4
 8005f28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f30:	2218      	movs	r2, #24
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fec6 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f3a:	233f      	movs	r3, #63	@ 0x3f
 8005f3c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005f40:	2388      	movs	r3, #136	@ 0x88
 8005f42:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005f46:	f107 0310 	add.w	r3, r7, #16
 8005f4a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005f4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005f56:	f107 030f 	add.w	r3, r7, #15
 8005f5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 f934 	bl	80071d8 <hci_send_req>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da01      	bge.n	8005f7a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005f76:	23ff      	movs	r3, #255	@ 0xff
 8005f78:	e004      	b.n	8005f84 <aci_gap_pass_key_resp+0xc4>
  return status;
 8005f7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f7e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005f82:	781b      	ldrb	r3, [r3, #0]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005f8e:	b590      	push	{r4, r7, lr}
 8005f90:	b0cd      	sub	sp, #308	@ 0x134
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	4604      	mov	r4, r0
 8005f96:	4608      	mov	r0, r1
 8005f98:	4611      	mov	r1, r2
 8005f9a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f9e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fa8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005fac:	4622      	mov	r2, r4
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fb4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005fb8:	4602      	mov	r2, r0
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fc0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005fc4:	460a      	mov	r2, r1
 8005fc6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005fc8:	f107 0310 	add.w	r3, r7, #16
 8005fcc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005fd0:	f107 0308 	add.w	r3, r7, #8
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fe74 	bl	8006cc6 <Osal_MemSet>
  int index_input = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005fe8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005fec:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006002:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006006:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800600e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006012:	3301      	adds	r3, #1
 8006014:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800601c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006020:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006024:	7812      	ldrb	r2, [r2, #0]
 8006026:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006028:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800602c:	3301      	adds	r3, #1
 800602e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006032:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006036:	2218      	movs	r2, #24
 8006038:	2100      	movs	r1, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fe43 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006040:	233f      	movs	r3, #63	@ 0x3f
 8006042:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8006046:	238a      	movs	r3, #138	@ 0x8a
 8006048:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800604c:	f107 0310 	add.w	r3, r7, #16
 8006050:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006054:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006058:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800605c:	f107 0308 	add.w	r3, r7, #8
 8006060:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006064:	2307      	movs	r3, #7
 8006066:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800606a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f001 f8b1 	bl	80071d8 <hci_send_req>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	da01      	bge.n	8006080 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800607c:	23ff      	movs	r3, #255	@ 0xff
 800607e:	e02e      	b.n	80060de <aci_gap_init+0x150>
  if ( resp.Status )
 8006080:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006084:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <aci_gap_init+0x10c>
    return resp.Status;
 800608e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006092:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	e021      	b.n	80060de <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800609a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800609e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80060a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80060b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060b8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80060bc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80060c6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80060c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80060d0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80060da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd90      	pop	{r4, r7, pc}

080060e8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b0cc      	sub	sp, #304	@ 0x130
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4602      	mov	r2, r0
 80060f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80060f8:	6019      	str	r1, [r3, #0]
 80060fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060fe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006102:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006104:	f107 0310 	add.w	r3, r7, #16
 8006108:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800610c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006110:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800611e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006122:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006126:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800612e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006132:	3301      	adds	r3, #1
 8006134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006138:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800613c:	1c58      	adds	r0, r3, #1
 800613e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006142:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800614c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	f000 fda8 	bl	8006ca6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006156:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800615a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006164:	4413      	add	r3, r2
 8006166:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800616a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800616e:	2218      	movs	r2, #24
 8006170:	2100      	movs	r1, #0
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fda7 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006178:	233f      	movs	r3, #63	@ 0x3f
 800617a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800617e:	238e      	movs	r3, #142	@ 0x8e
 8006180:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006184:	f107 0310 	add.w	r3, r7, #16
 8006188:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800618c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006190:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006194:	f107 030f 	add.w	r3, r7, #15
 8006198:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800619c:	2301      	movs	r3, #1
 800619e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 f815 	bl	80071d8 <hci_send_req>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	da01      	bge.n	80061b8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80061b4:	23ff      	movs	r3, #255	@ 0xff
 80061b6:	e004      	b.n	80061c2 <aci_gap_update_adv_data+0xda>
  return status;
 80061b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80061c0:	781b      	ldrb	r3, [r3, #0]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061d6:	f107 0308 	add.w	r3, r7, #8
 80061da:	2218      	movs	r2, #24
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fd71 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80061e4:	233f      	movs	r3, #63	@ 0x3f
 80061e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80061e8:	2392      	movs	r3, #146	@ 0x92
 80061ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80061ec:	1dfb      	adds	r3, r7, #7
 80061ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80061f0:	2301      	movs	r3, #1
 80061f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061f4:	f107 0308 	add.w	r3, r7, #8
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 ffec 	bl	80071d8 <hci_send_req>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	da01      	bge.n	800620a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006206:	23ff      	movs	r3, #255	@ 0xff
 8006208:	e000      	b.n	800620c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800620a:	79fb      	ldrb	r3, [r7, #7]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b0cc      	sub	sp, #304	@ 0x130
 8006218:	af00      	add	r7, sp, #0
 800621a:	4602      	mov	r2, r0
 800621c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006220:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800622a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800622e:	460a      	mov	r2, r1
 8006230:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006232:	f107 0310 	add.w	r3, r7, #16
 8006236:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800623a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800623e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800624c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006250:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006254:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800625c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006260:	3302      	adds	r3, #2
 8006262:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800626a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800626e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006276:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800627a:	3301      	adds	r3, #1
 800627c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006280:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006284:	2218      	movs	r2, #24
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fd1c 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800628e:	233f      	movs	r3, #63	@ 0x3f
 8006290:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8006294:	23a5      	movs	r3, #165	@ 0xa5
 8006296:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800629a:	f107 0310 	add.w	r3, r7, #16
 800629e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80062a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80062aa:	f107 030f 	add.w	r3, r7, #15
 80062ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062bc:	2100      	movs	r1, #0
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 ff8a 	bl	80071d8 <hci_send_req>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	da01      	bge.n	80062ce <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80062ca:	23ff      	movs	r3, #255	@ 0xff
 80062cc:	e004      	b.n	80062d8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80062ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80062d6:	781b      	ldrb	r3, [r3, #0]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b088      	sub	sp, #32
 80062e6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062ec:	f107 0308 	add.w	r3, r7, #8
 80062f0:	2218      	movs	r2, #24
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fce6 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80062fa:	233f      	movs	r3, #63	@ 0x3f
 80062fc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80062fe:	f240 1301 	movw	r3, #257	@ 0x101
 8006302:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006304:	1dfb      	adds	r3, r7, #7
 8006306:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006308:	2301      	movs	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	2100      	movs	r1, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f000 ff60 	bl	80071d8 <hci_send_req>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	da01      	bge.n	8006322 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800631e:	23ff      	movs	r3, #255	@ 0xff
 8006320:	e000      	b.n	8006324 <aci_gatt_init+0x42>
  return status;
 8006322:	79fb      	ldrb	r3, [r7, #7]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800632c:	b590      	push	{r4, r7, lr}
 800632e:	b0cf      	sub	sp, #316	@ 0x13c
 8006330:	af00      	add	r7, sp, #0
 8006332:	4604      	mov	r4, r0
 8006334:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8006338:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800633c:	6001      	str	r1, [r0, #0]
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006346:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800634a:	4622      	mov	r2, r4
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006352:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006356:	4602      	mov	r2, r0
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800635e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006362:	460a      	mov	r2, r1
 8006364:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006366:	f107 0310 	add.w	r3, r7, #16
 800636a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800636e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006372:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d00a      	beq.n	8006392 <aci_gatt_add_service+0x66>
 800637c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006380:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d101      	bne.n	800638e <aci_gatt_add_service+0x62>
 800638a:	2311      	movs	r3, #17
 800638c:	e002      	b.n	8006394 <aci_gatt_add_service+0x68>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <aci_gatt_add_service+0x68>
 8006392:	2303      	movs	r3, #3
 8006394:	f107 0210 	add.w	r2, r7, #16
 8006398:	4413      	add	r3, r2
 800639a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800639e:	f107 030c 	add.w	r3, r7, #12
 80063a2:	2203      	movs	r2, #3
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fc8d 	bl	8006cc6 <Osal_MemSet>
  int index_input = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80063b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063b6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80063ba:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80063c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063c6:	3301      	adds	r3, #1
 80063c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80063cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063d0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d002      	beq.n	80063e0 <aci_gatt_add_service+0xb4>
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d004      	beq.n	80063e8 <aci_gatt_add_service+0xbc>
 80063de:	e007      	b.n	80063f0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80063e0:	2302      	movs	r3, #2
 80063e2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80063e6:	e005      	b.n	80063f4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80063e8:	2310      	movs	r3, #16
 80063ea:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80063ee:	e001      	b.n	80063f4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80063f0:	2397      	movs	r3, #151	@ 0x97
 80063f2:	e06c      	b.n	80064ce <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80063f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063f8:	1c58      	adds	r0, r3, #1
 80063fa:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80063fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006402:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006406:	6819      	ldr	r1, [r3, #0]
 8006408:	f000 fc4d 	bl	8006ca6 <Osal_MemCpy>
    index_input += size;
 800640c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8006410:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006414:	4413      	add	r3, r2
 8006416:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800641a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800641e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006422:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800642a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800642e:	3301      	adds	r3, #1
 8006430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006434:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006438:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800643c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006444:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006448:	3301      	adds	r3, #1
 800644a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800644e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006452:	2218      	movs	r2, #24
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fc35 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800645c:	233f      	movs	r3, #63	@ 0x3f
 800645e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8006462:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006466:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800646a:	f107 0310 	add.w	r3, r7, #16
 800646e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006472:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006476:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800647a:	f107 030c 	add.w	r3, r7, #12
 800647e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006482:	2303      	movs	r3, #3
 8006484:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fea2 	bl	80071d8 <hci_send_req>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	da01      	bge.n	800649e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800649a:	23ff      	movs	r3, #255	@ 0xff
 800649c:	e017      	b.n	80064ce <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800649e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80064ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	e00a      	b.n	80064ce <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80064b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80064ca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd90      	pop	{r4, r7, pc}

080064d8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b0d1      	sub	sp, #324	@ 0x144
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80064e6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80064ea:	600a      	str	r2, [r1, #0]
 80064ec:	4619      	mov	r1, r3
 80064ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064f2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80064f6:	4622      	mov	r2, r4
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064fe:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006502:	4602      	mov	r2, r0
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800650a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800650e:	460a      	mov	r2, r1
 8006510:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006512:	f107 0318 	add.w	r3, r7, #24
 8006516:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800651a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800651e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d00a      	beq.n	800653e <aci_gatt_add_char+0x66>
 8006528:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800652c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d101      	bne.n	800653a <aci_gatt_add_char+0x62>
 8006536:	2313      	movs	r3, #19
 8006538:	e002      	b.n	8006540 <aci_gatt_add_char+0x68>
 800653a:	2303      	movs	r3, #3
 800653c:	e000      	b.n	8006540 <aci_gatt_add_char+0x68>
 800653e:	2305      	movs	r3, #5
 8006540:	f107 0218 	add.w	r2, r7, #24
 8006544:	4413      	add	r3, r2
 8006546:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800654a:	f107 0314 	add.w	r3, r7, #20
 800654e:	2203      	movs	r2, #3
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fbb7 	bl	8006cc6 <Osal_MemSet>
  int index_input = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800655e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006562:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006566:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800656a:	8812      	ldrh	r2, [r2, #0]
 800656c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800656e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006572:	3302      	adds	r3, #2
 8006574:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006578:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800657c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006580:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006584:	7812      	ldrb	r2, [r2, #0]
 8006586:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006588:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800658c:	3301      	adds	r3, #1
 800658e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006592:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006596:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d002      	beq.n	80065a6 <aci_gatt_add_char+0xce>
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d004      	beq.n	80065ae <aci_gatt_add_char+0xd6>
 80065a4:	e007      	b.n	80065b6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80065a6:	2302      	movs	r3, #2
 80065a8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80065ac:	e005      	b.n	80065ba <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80065ae:	2310      	movs	r3, #16
 80065b0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80065b4:	e001      	b.n	80065ba <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80065b6:	2397      	movs	r3, #151	@ 0x97
 80065b8:	e091      	b.n	80066de <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80065ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80065be:	1cd8      	adds	r0, r3, #3
 80065c0:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80065c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80065c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80065cc:	6819      	ldr	r1, [r3, #0]
 80065ce:	f000 fb6a 	bl	8006ca6 <Osal_MemCpy>
    index_input += size;
 80065d2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80065d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80065da:	4413      	add	r3, r2
 80065dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80065e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80065e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80065e8:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80065ec:	8812      	ldrh	r2, [r2, #0]
 80065ee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80065f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80065f4:	3302      	adds	r3, #2
 80065f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80065fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80065fe:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006602:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006604:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006608:	3301      	adds	r3, #1
 800660a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800660e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006612:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006616:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006618:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800661c:	3301      	adds	r3, #1
 800661e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006622:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006626:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800662a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800662c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006630:	3301      	adds	r3, #1
 8006632:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006636:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800663a:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800663e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006640:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006644:	3301      	adds	r3, #1
 8006646:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800664a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800664e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8006652:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006654:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006658:	3301      	adds	r3, #1
 800665a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800665e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006662:	2218      	movs	r2, #24
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fb2d 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800666c:	233f      	movs	r3, #63	@ 0x3f
 800666e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8006672:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006676:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800667a:	f107 0318 	add.w	r3, r7, #24
 800667e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8006682:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006686:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8006692:	2303      	movs	r3, #3
 8006694:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006698:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fd9a 	bl	80071d8 <hci_send_req>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da01      	bge.n	80066ae <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80066aa:	23ff      	movs	r3, #255	@ 0xff
 80066ac:	e017      	b.n	80066de <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80066ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80066b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80066bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80066c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	e00a      	b.n	80066de <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80066c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80066cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80066d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80066da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd90      	pop	{r4, r7, pc}

080066e8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80066e8:	b5b0      	push	{r4, r5, r7, lr}
 80066ea:	b0cc      	sub	sp, #304	@ 0x130
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4605      	mov	r5, r0
 80066f0:	460c      	mov	r4, r1
 80066f2:	4610      	mov	r0, r2
 80066f4:	4619      	mov	r1, r3
 80066f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80066fe:	462a      	mov	r2, r5
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006706:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800670a:	4622      	mov	r2, r4
 800670c:	801a      	strh	r2, [r3, #0]
 800670e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006712:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006716:	4602      	mov	r2, r0
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800671e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006722:	460a      	mov	r2, r1
 8006724:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006726:	f107 0310 	add.w	r3, r7, #16
 800672a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800672e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006732:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8006740:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006744:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006748:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800674c:	8812      	ldrh	r2, [r2, #0]
 800674e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006750:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006754:	3302      	adds	r3, #2
 8006756:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800675e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006762:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006766:	8812      	ldrh	r2, [r2, #0]
 8006768:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800676a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800676e:	3302      	adds	r3, #2
 8006770:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8006774:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006778:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800677c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8006780:	7812      	ldrb	r2, [r2, #0]
 8006782:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006784:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006788:	3301      	adds	r3, #1
 800678a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800678e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006792:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006796:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800679a:	7812      	ldrb	r2, [r2, #0]
 800679c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800679e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067a2:	3301      	adds	r3, #1
 80067a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80067a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80067ac:	1d98      	adds	r0, r3, #6
 80067ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067b2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80067be:	f000 fa72 	bl	8006ca6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80067c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067c6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80067d0:	4413      	add	r3, r2
 80067d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067da:	2218      	movs	r2, #24
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fa71 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80067e4:	233f      	movs	r3, #63	@ 0x3f
 80067e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80067ea:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80067ee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80067f2:	f107 0310 	add.w	r3, r7, #16
 80067f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80067fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006802:	f107 030f 	add.w	r3, r7, #15
 8006806:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800680a:	2301      	movs	r3, #1
 800680c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006810:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fcde 	bl	80071d8 <hci_send_req>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	da01      	bge.n	8006826 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006822:	23ff      	movs	r3, #255	@ 0xff
 8006824:	e004      	b.n	8006830 <aci_gatt_update_char_value+0x148>
  return status;
 8006826:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800682a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800682e:	781b      	ldrb	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006836:	46bd      	mov	sp, r7
 8006838:	bdb0      	pop	{r4, r5, r7, pc}

0800683a <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b0cc      	sub	sp, #304	@ 0x130
 800683e:	af00      	add	r7, sp, #0
 8006840:	4602      	mov	r2, r0
 8006842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006846:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800684a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800684c:	f107 0310 	add.w	r3, r7, #16
 8006850:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006854:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006858:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800685c:	2200      	movs	r2, #0
 800685e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006866:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800686a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800686e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006872:	8812      	ldrh	r2, [r2, #0]
 8006874:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006876:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800687a:	3302      	adds	r3, #2
 800687c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006880:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006884:	2218      	movs	r2, #24
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fa1c 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800688e:	233f      	movs	r3, #63	@ 0x3f
 8006890:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8006894:	f240 1325 	movw	r3, #293	@ 0x125
 8006898:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800689c:	f107 0310 	add.w	r3, r7, #16
 80068a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80068a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80068ac:	f107 030f 	add.w	r3, r7, #15
 80068b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fc89 	bl	80071d8 <hci_send_req>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da01      	bge.n	80068d0 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80068cc:	23ff      	movs	r3, #255	@ 0xff
 80068ce:	e004      	b.n	80068da <aci_gatt_confirm_indication+0xa0>
  return status;
 80068d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80068d8:	781b      	ldrb	r3, [r3, #0]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b0cc      	sub	sp, #304	@ 0x130
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80068fc:	4602      	mov	r2, r0
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006904:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006908:	460a      	mov	r2, r1
 800690a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800690c:	f107 0310 	add.w	r3, r7, #16
 8006910:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006914:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006918:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006926:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800692a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800692e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006936:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800693a:	3301      	adds	r3, #1
 800693c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8006940:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006944:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006948:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800694c:	7812      	ldrb	r2, [r2, #0]
 800694e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006950:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006954:	3301      	adds	r3, #1
 8006956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800695a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800695e:	1c98      	adds	r0, r3, #2
 8006960:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006964:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800696e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	f000 f997 	bl	8006ca6 <Osal_MemCpy>
  index_input += Length;
 8006978:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800697c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006986:	4413      	add	r3, r2
 8006988:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800698c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006990:	2218      	movs	r2, #24
 8006992:	2100      	movs	r1, #0
 8006994:	4618      	mov	r0, r3
 8006996:	f000 f996 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800699a:	233f      	movs	r3, #63	@ 0x3f
 800699c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80069a0:	230c      	movs	r3, #12
 80069a2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80069a6:	f107 0310 	add.w	r3, r7, #16
 80069aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80069ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80069b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80069b6:	f107 030f 	add.w	r3, r7, #15
 80069ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80069c8:	2100      	movs	r1, #0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fc04 	bl	80071d8 <hci_send_req>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da01      	bge.n	80069da <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80069d6:	23ff      	movs	r3, #255	@ 0xff
 80069d8:	e004      	b.n	80069e4 <aci_hal_write_config_data+0x100>
  return status;
 80069da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80069e2:	781b      	ldrb	r3, [r3, #0]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b0cc      	sub	sp, #304	@ 0x130
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	4602      	mov	r2, r0
 80069f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a04:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006a08:	460a      	mov	r2, r1
 8006a0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006a0c:	f107 0310 	add.w	r3, r7, #16
 8006a10:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8006a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a2e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8006a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a48:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a54:	3301      	adds	r3, #1
 8006a56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a5e:	2218      	movs	r2, #24
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f92f 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a68:	233f      	movs	r3, #63	@ 0x3f
 8006a6a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8006a6e:	230f      	movs	r3, #15
 8006a70:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006a74:	f107 0310 	add.w	r3, r7, #16
 8006a78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006a84:	f107 030f 	add.w	r3, r7, #15
 8006a88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fb9d 	bl	80071d8 <hci_send_req>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da01      	bge.n	8006aa8 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006aa4:	23ff      	movs	r3, #255	@ 0xff
 8006aa6:	e004      	b.n	8006ab2 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8006aa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006aac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ab0:	781b      	ldrb	r3, [r3, #0]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b0cc      	sub	sp, #304	@ 0x130
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ac8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006acc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006ace:	f107 0310 	add.w	r3, r7, #16
 8006ad2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006ad6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ada:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006aec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006af0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006af4:	8812      	ldrh	r2, [r2, #0]
 8006af6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006afc:	3302      	adds	r3, #2
 8006afe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b06:	2218      	movs	r2, #24
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f8db 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b10:	233f      	movs	r3, #63	@ 0x3f
 8006b12:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8006b16:	2318      	movs	r3, #24
 8006b18:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006b1c:	f107 0310 	add.w	r3, r7, #16
 8006b20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006b2c:	f107 030f 	add.w	r3, r7, #15
 8006b30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b3e:	2100      	movs	r1, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fb49 	bl	80071d8 <hci_send_req>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	da01      	bge.n	8006b50 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006b4c:	23ff      	movs	r3, #255	@ 0xff
 8006b4e:	e004      	b.n	8006b5a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006b50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b54:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006b58:	781b      	ldrb	r3, [r3, #0]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b6e:	f107 0308 	add.w	r3, r7, #8
 8006b72:	2218      	movs	r2, #24
 8006b74:	2100      	movs	r1, #0
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f8a5 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x03;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006b80:	2303      	movs	r3, #3
 8006b82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b84:	1dfb      	adds	r3, r7, #7
 8006b86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b8c:	f107 0308 	add.w	r3, r7, #8
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fb20 	bl	80071d8 <hci_send_req>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da01      	bge.n	8006ba2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006b9e:	23ff      	movs	r3, #255	@ 0xff
 8006ba0:	e000      	b.n	8006ba4 <hci_reset+0x40>
  return status;
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b0cd      	sub	sp, #308	@ 0x134
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bbc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bc8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006bcc:	4602      	mov	r2, r0
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bd4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006bd8:	460a      	mov	r2, r1
 8006bda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006bdc:	f107 0310 	add.w	r3, r7, #16
 8006be0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006be4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006be8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006bfa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006bfe:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006c02:	7812      	ldrb	r2, [r2, #0]
 8006c04:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c14:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c18:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006c1c:	7812      	ldrb	r2, [r2, #0]
 8006c1e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c24:	3301      	adds	r3, #1
 8006c26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c2e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c32:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c3e:	3301      	adds	r3, #1
 8006c40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c48:	2218      	movs	r2, #24
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 f83a 	bl	8006cc6 <Osal_MemSet>
  rq.ogf = 0x08;
 8006c52:	2308      	movs	r3, #8
 8006c54:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8006c58:	2331      	movs	r3, #49	@ 0x31
 8006c5a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006c5e:	f107 0310 	add.w	r3, r7, #16
 8006c62:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006c6e:	f107 030f 	add.w	r3, r7, #15
 8006c72:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 faa8 	bl	80071d8 <hci_send_req>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	da01      	bge.n	8006c92 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006c8e:	23ff      	movs	r3, #255	@ 0xff
 8006c90:	e004      	b.n	8006c9c <hci_le_set_default_phy+0xf0>
  return status;
 8006c92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c96:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c9a:	781b      	ldrb	r3, [r3, #0]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd90      	pop	{r4, r7, pc}

08006ca6 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f002 fbe3 	bl	8009482 <memcpy>
 8006cbc:	4603      	mov	r3, r0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f002 fb57 	bl	800938a <memset>
 8006cdc:	4603      	mov	r3, r0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	af00      	add	r7, sp, #0
  return;
 8006cea:	bf00      	nop
}
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  return;
 8006cf8:	bf00      	nop
}
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006d02:	b480      	push	{r7}
 8006d04:	af00      	add	r7, sp, #0
  return;
 8006d06:	bf00      	nop
}
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  return;
 8006d14:	bf00      	nop
}
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006d1e:	b480      	push	{r7}
 8006d20:	af00      	add	r7, sp, #0
  return;
 8006d22:	bf00      	nop
}
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  return;
 8006d30:	bf00      	nop
}
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	af00      	add	r7, sp, #0
  return;
 8006d3e:	bf00      	nop
}
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  return;
 8006d4c:	bf00      	nop
}
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006d56:	b480      	push	{r7}
 8006d58:	af00      	add	r7, sp, #0
  return;
 8006d5a:	bf00      	nop
}
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  return;
 8006d68:	bf00      	nop
}
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006d72:	b480      	push	{r7}
 8006d74:	af00      	add	r7, sp, #0
  return;
 8006d76:	bf00      	nop
}
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  return;
 8006d84:	bf00      	nop
}
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006d8e:	b480      	push	{r7}
 8006d90:	af00      	add	r7, sp, #0
  return;
 8006d92:	bf00      	nop
}
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  return;
 8006da0:	bf00      	nop
}
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006daa:	b480      	push	{r7}
 8006dac:	af00      	add	r7, sp, #0
  return;
 8006dae:	bf00      	nop
}
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  return;
 8006dbc:	bf00      	nop
}
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	af00      	add	r7, sp, #0
  return;
 8006dca:	bf00      	nop
}
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <SVCCTL_Init+0x18>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006dde:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <SVCCTL_Init+0x1c>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006de4:	f000 f806 	bl	8006df4 <SVCCTL_SvcInit>

  return;
 8006de8:	bf00      	nop
}
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	200000c8 	.word	0x200000c8
 8006df0:	200000e8 	.word	0x200000e8

08006df4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  BAS_Init();
 8006df8:	f7ff ff75 	bl	8006ce6 <BAS_Init>

  BLS_Init();
 8006dfc:	f7ff ff7a 	bl	8006cf4 <BLS_Init>

  CRS_STM_Init();
 8006e00:	f7ff ff7f 	bl	8006d02 <CRS_STM_Init>

  DIS_Init();
 8006e04:	f7ff ff84 	bl	8006d10 <DIS_Init>

  EDS_STM_Init();
 8006e08:	f7ff ff89 	bl	8006d1e <EDS_STM_Init>

  HIDS_Init();
 8006e0c:	f7ff ff8e 	bl	8006d2c <HIDS_Init>

  HRS_Init();
 8006e10:	f7ff ff93 	bl	8006d3a <HRS_Init>

  HTS_Init();
 8006e14:	f7ff ff98 	bl	8006d48 <HTS_Init>

  IAS_Init();
 8006e18:	f7ff ff9d 	bl	8006d56 <IAS_Init>

  LLS_Init();
 8006e1c:	f7ff ffa2 	bl	8006d64 <LLS_Init>

  TPS_Init();
 8006e20:	f7ff ffa7 	bl	8006d72 <TPS_Init>

  MOTENV_STM_Init();
 8006e24:	f7ff ffac 	bl	8006d80 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006e28:	f7ff ffb1 	bl	8006d8e <P2PS_STM_Init>

  ZDD_STM_Init();
 8006e2c:	f7ff ffb6 	bl	8006d9c <ZDD_STM_Init>

  OTAS_STM_Init();
 8006e30:	f7ff ffbb 	bl	8006daa <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006e34:	f7ff ffc7 	bl	8006dc6 <BVOPUS_STM_Init>

  MESH_Init();
 8006e38:	f7ff ffbe 	bl	8006db8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006e3c:	f001 fbf8 	bl	8008630 <SVCCTL_InitCustomSvc>
  
  return;
 8006e40:	bf00      	nop
}
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006e4c:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <SVCCTL_RegisterSvcHandler+0x30>)
 8006e4e:	7f1b      	ldrb	r3, [r3, #28]
 8006e50:	4619      	mov	r1, r3
 8006e52:	4a08      	ldr	r2, [pc, #32]	@ (8006e74 <SVCCTL_RegisterSvcHandler+0x30>)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006e5a:	4b06      	ldr	r3, [pc, #24]	@ (8006e74 <SVCCTL_RegisterSvcHandler+0x30>)
 8006e5c:	7f1b      	ldrb	r3, [r3, #28]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	4b04      	ldr	r3, [pc, #16]	@ (8006e74 <SVCCTL_RegisterSvcHandler+0x30>)
 8006e64:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006e66:	bf00      	nop
}
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	200000c8 	.word	0x200000c8

08006e78 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3301      	adds	r3, #1
 8006e84:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2bff      	cmp	r3, #255	@ 0xff
 8006e90:	d125      	bne.n	8006ede <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3302      	adds	r3, #2
 8006e96:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ea2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ea6:	d118      	bne.n	8006eda <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	757b      	strb	r3, [r7, #21]
 8006eac:	e00d      	b.n	8006eca <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006eae:	7d7b      	ldrb	r3, [r7, #21]
 8006eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8006f1c <SVCCTL_UserEvtRx+0xa4>)
 8006eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006ec4:	7d7b      	ldrb	r3, [r7, #21]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	757b      	strb	r3, [r7, #21]
 8006eca:	4b14      	ldr	r3, [pc, #80]	@ (8006f1c <SVCCTL_UserEvtRx+0xa4>)
 8006ecc:	7f1b      	ldrb	r3, [r3, #28]
 8006ece:	7d7a      	ldrb	r2, [r7, #21]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d3ec      	bcc.n	8006eae <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006ed4:	e002      	b.n	8006edc <SVCCTL_UserEvtRx+0x64>
              break;
 8006ed6:	bf00      	nop
          break;
 8006ed8:	e000      	b.n	8006edc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006eda:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006edc:	e000      	b.n	8006ee0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006ede:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d00f      	beq.n	8006f06 <SVCCTL_UserEvtRx+0x8e>
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	dc10      	bgt.n	8006f0c <SVCCTL_UserEvtRx+0x94>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <SVCCTL_UserEvtRx+0x7c>
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d006      	beq.n	8006f00 <SVCCTL_UserEvtRx+0x88>
 8006ef2:	e00b      	b.n	8006f0c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 ff9b 	bl	8007e30 <SVCCTL_App_Notification>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75bb      	strb	r3, [r7, #22]
      break;
 8006efe:	e008      	b.n	8006f12 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006f00:	2301      	movs	r3, #1
 8006f02:	75bb      	strb	r3, [r7, #22]
      break;
 8006f04:	e005      	b.n	8006f12 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006f06:	2300      	movs	r3, #0
 8006f08:	75bb      	strb	r3, [r7, #22]
      break;
 8006f0a:	e002      	b.n	8006f12 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	75bb      	strb	r3, [r7, #22]
      break;
 8006f10:	bf00      	nop
  }

  return (return_status);
 8006f12:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	200000c8 	.word	0x200000c8

08006f20 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006f28:	f107 030c 	add.w	r3, r7, #12
 8006f2c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	212e      	movs	r1, #46	@ 0x2e
 8006f38:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006f3c:	f000 fae8 	bl	8007510 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	330b      	adds	r3, #11
 8006f44:	78db      	ldrb	r3, [r3, #3]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3720      	adds	r7, #32
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b088      	sub	sp, #32
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006f56:	f107 030c 	add.w	r3, r7, #12
 8006f5a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	210f      	movs	r1, #15
 8006f66:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006f6a:	f000 fad1 	bl	8007510 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	330b      	adds	r3, #11
 8006f72:	78db      	ldrb	r3, [r3, #3]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006f84:	f107 030c 	add.w	r3, r7, #12
 8006f88:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	2110      	movs	r1, #16
 8006f90:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006f94:	f000 fabc 	bl	8007510 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	330b      	adds	r3, #11
 8006f9c:	78db      	ldrb	r3, [r3, #3]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b08b      	sub	sp, #44	@ 0x2c
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80070fc <SHCI_GetWirelessFwInfo+0x154>)
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006fd8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006fe2:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a44      	ldr	r2, [pc, #272]	@ (8007100 <SHCI_GetWirelessFwInfo+0x158>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d10f      	bne.n	8007014 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e01a      	b.n	800704a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800701c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007020:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	0e1b      	lsrs	r3, r3, #24
 800704e:	b2da      	uxtb	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	0c1b      	lsrs	r3, r3, #16
 8007058:	b2da      	uxtb	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	0a1b      	lsrs	r3, r3, #8
 8007062:	b2da      	uxtb	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	091b      	lsrs	r3, r3, #4
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	b2da      	uxtb	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	b2da      	uxtb	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	0e1b      	lsrs	r3, r3, #24
 800708a:	b2da      	uxtb	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	0c1b      	lsrs	r3, r3, #16
 8007094:	b2da      	uxtb	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	0a1b      	lsrs	r3, r3, #8
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	0e1b      	lsrs	r3, r3, #24
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	0e1b      	lsrs	r3, r3, #24
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	0c1b      	lsrs	r3, r3, #16
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	372c      	adds	r7, #44	@ 0x2c
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	58004000 	.word	0x58004000
 8007100:	a94656b9 	.word	0xa94656b9

08007104 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4a08      	ldr	r2, [pc, #32]	@ (8007134 <hci_init+0x30>)
 8007114:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007116:	4a08      	ldr	r2, [pc, #32]	@ (8007138 <hci_init+0x34>)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800711c:	4806      	ldr	r0, [pc, #24]	@ (8007138 <hci_init+0x34>)
 800711e:	f000 f979 	bl	8007414 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 f8da 	bl	80072e0 <TlInit>

  return;
 800712c:	bf00      	nop
}
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000358 	.word	0x20000358
 8007138:	20000330 	.word	0x20000330

0800713c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007142:	4822      	ldr	r0, [pc, #136]	@ (80071cc <hci_user_evt_proc+0x90>)
 8007144:	f000 fd32 	bl	8007bac <LST_is_empty>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d12b      	bne.n	80071a6 <hci_user_evt_proc+0x6a>
 800714e:	4b20      	ldr	r3, [pc, #128]	@ (80071d0 <hci_user_evt_proc+0x94>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d027      	beq.n	80071a6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007156:	f107 030c 	add.w	r3, r7, #12
 800715a:	4619      	mov	r1, r3
 800715c:	481b      	ldr	r0, [pc, #108]	@ (80071cc <hci_user_evt_proc+0x90>)
 800715e:	f000 fdb4 	bl	8007cca <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007162:	4b1c      	ldr	r3, [pc, #112]	@ (80071d4 <hci_user_evt_proc+0x98>)
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800716e:	2301      	movs	r3, #1
 8007170:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007172:	4b18      	ldr	r3, [pc, #96]	@ (80071d4 <hci_user_evt_proc+0x98>)
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	1d3a      	adds	r2, r7, #4
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800717c:	793a      	ldrb	r2, [r7, #4]
 800717e:	4b14      	ldr	r3, [pc, #80]	@ (80071d0 <hci_user_evt_proc+0x94>)
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	e002      	b.n	800718a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007184:	4b12      	ldr	r3, [pc, #72]	@ (80071d0 <hci_user_evt_proc+0x94>)
 8007186:	2201      	movs	r2, #1
 8007188:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800718a:	4b11      	ldr	r3, [pc, #68]	@ (80071d0 <hci_user_evt_proc+0x94>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4618      	mov	r0, r3
 8007196:	f000 fc0d 	bl	80079b4 <TL_MM_EvtDone>
 800719a:	e004      	b.n	80071a6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4619      	mov	r1, r3
 80071a0:	480a      	ldr	r0, [pc, #40]	@ (80071cc <hci_user_evt_proc+0x90>)
 80071a2:	f000 fd25 	bl	8007bf0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80071a6:	4809      	ldr	r0, [pc, #36]	@ (80071cc <hci_user_evt_proc+0x90>)
 80071a8:	f000 fd00 	bl	8007bac <LST_is_empty>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <hci_user_evt_proc+0x86>
 80071b2:	4b07      	ldr	r3, [pc, #28]	@ (80071d0 <hci_user_evt_proc+0x94>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80071ba:	4804      	ldr	r0, [pc, #16]	@ (80071cc <hci_user_evt_proc+0x90>)
 80071bc:	f001 f86c 	bl	8008298 <hci_notify_asynch_evt>
  }


  return;
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
}
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200000f0 	.word	0x200000f0
 80071d0:	200000fc 	.word	0x200000fc
 80071d4:	20000330 	.word	0x20000330

080071d8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80071e4:	2000      	movs	r0, #0
 80071e6:	f000 f8d1 	bl	800738c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80071ea:	2300      	movs	r3, #0
 80071ec:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	885b      	ldrh	r3, [r3, #2]
 80071f2:	b21b      	sxth	r3, r3
 80071f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f8:	b21a      	sxth	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	029b      	lsls	r3, r3, #10
 8007200:	b21b      	sxth	r3, r3
 8007202:	4313      	orrs	r3, r2
 8007204:	b21b      	sxth	r3, r3
 8007206:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007208:	4b33      	ldr	r3, [pc, #204]	@ (80072d8 <hci_send_req+0x100>)
 800720a:	2201      	movs	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	b2d9      	uxtb	r1, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	8bbb      	ldrh	r3, [r7, #28]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f890 	bl	8007340 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007220:	e04e      	b.n	80072c0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007222:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007226:	f001 f84e 	bl	80082c6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800722a:	e043      	b.n	80072b4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	4619      	mov	r1, r3
 8007232:	482a      	ldr	r0, [pc, #168]	@ (80072dc <hci_send_req+0x104>)
 8007234:	f000 fd49 	bl	8007cca <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	7a5b      	ldrb	r3, [r3, #9]
 800723c:	2b0f      	cmp	r3, #15
 800723e:	d114      	bne.n	800726a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	330b      	adds	r3, #11
 8007244:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	885b      	ldrh	r3, [r3, #2]
 800724a:	b29b      	uxth	r3, r3
 800724c:	8bba      	ldrh	r2, [r7, #28]
 800724e:	429a      	cmp	r2, r3
 8007250:	d104      	bne.n	800725c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	7812      	ldrb	r2, [r2, #0]
 800725a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d027      	beq.n	80072b4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007264:	2301      	movs	r3, #1
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e024      	b.n	80072b4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	330b      	adds	r3, #11
 800726e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007276:	b29b      	uxth	r3, r3
 8007278:	8bba      	ldrh	r2, [r7, #28]
 800727a:	429a      	cmp	r2, r3
 800727c:	d114      	bne.n	80072a8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	7a9b      	ldrb	r3, [r3, #10]
 8007282:	3b03      	subs	r3, #3
 8007284:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	429a      	cmp	r2, r3
 800728e:	bfa8      	it	ge
 8007290:	461a      	movge	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6918      	ldr	r0, [r3, #16]
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	1cd9      	adds	r1, r3, #3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f002 f8ed 	bl	8009482 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80072b0:	2301      	movs	r3, #1
 80072b2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80072b4:	4809      	ldr	r0, [pc, #36]	@ (80072dc <hci_send_req+0x104>)
 80072b6:	f000 fc79 	bl	8007bac <LST_is_empty>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0b5      	beq.n	800722c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80072c0:	7ffb      	ldrb	r3, [r7, #31]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0ad      	beq.n	8007222 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80072c6:	2001      	movs	r0, #1
 80072c8:	f000 f860 	bl	800738c <NotifyCmdStatus>

  return 0;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3720      	adds	r7, #32
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	2000035c 	.word	0x2000035c
 80072dc:	20000350 	.word	0x20000350

080072e0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80072e8:	480f      	ldr	r0, [pc, #60]	@ (8007328 <TlInit+0x48>)
 80072ea:	f000 fc4f 	bl	8007b8c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80072ee:	4a0f      	ldr	r2, [pc, #60]	@ (800732c <TlInit+0x4c>)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80072f4:	480e      	ldr	r0, [pc, #56]	@ (8007330 <TlInit+0x50>)
 80072f6:	f000 fc49 	bl	8007b8c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80072fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007334 <TlInit+0x54>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007300:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <TlInit+0x58>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800730c:	4b0b      	ldr	r3, [pc, #44]	@ (800733c <TlInit+0x5c>)
 800730e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007310:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <TlInit+0x58>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f107 0208 	add.w	r2, r7, #8
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
  }

  return;
 800731c:	bf00      	nop
 800731e:	bf00      	nop
}
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000350 	.word	0x20000350
 800732c:	200000f8 	.word	0x200000f8
 8007330:	200000f0 	.word	0x200000f0
 8007334:	200000fc 	.word	0x200000fc
 8007338:	20000330 	.word	0x20000330
 800733c:	080073cd 	.word	0x080073cd

08007340 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	603a      	str	r2, [r7, #0]
 800734a:	80fb      	strh	r3, [r7, #6]
 800734c:	460b      	mov	r3, r1
 800734e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007350:	4b0c      	ldr	r3, [pc, #48]	@ (8007384 <SendCmd+0x44>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	88fa      	ldrh	r2, [r7, #6]
 8007356:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800735a:	4b0a      	ldr	r3, [pc, #40]	@ (8007384 <SendCmd+0x44>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	797a      	ldrb	r2, [r7, #5]
 8007360:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007362:	4b08      	ldr	r3, [pc, #32]	@ (8007384 <SendCmd+0x44>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	330c      	adds	r3, #12
 8007368:	797a      	ldrb	r2, [r7, #5]
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f002 f888 	bl	8009482 <memcpy>

  hciContext.io.Send(0,0);
 8007372:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <SendCmd+0x48>)
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	2100      	movs	r1, #0
 8007378:	2000      	movs	r0, #0
 800737a:	4798      	blx	r3

  return;
 800737c:	bf00      	nop
}
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	200000f8 	.word	0x200000f8
 8007388:	20000330 	.word	0x20000330

0800738c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d108      	bne.n	80073ae <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800739c:	4b0a      	ldr	r3, [pc, #40]	@ (80073c8 <NotifyCmdStatus+0x3c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00d      	beq.n	80073c0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80073a4:	4b08      	ldr	r3, [pc, #32]	@ (80073c8 <NotifyCmdStatus+0x3c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2000      	movs	r0, #0
 80073aa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80073ac:	e008      	b.n	80073c0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80073ae:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <NotifyCmdStatus+0x3c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80073b6:	4b04      	ldr	r3, [pc, #16]	@ (80073c8 <NotifyCmdStatus+0x3c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2001      	movs	r0, #1
 80073bc:	4798      	blx	r3
  return;
 80073be:	bf00      	nop
 80073c0:	bf00      	nop
}
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000358 	.word	0x20000358

080073cc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	7a5b      	ldrb	r3, [r3, #9]
 80073d8:	2b0f      	cmp	r3, #15
 80073da:	d003      	beq.n	80073e4 <TlEvtReceived+0x18>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7a5b      	ldrb	r3, [r3, #9]
 80073e0:	2b0e      	cmp	r3, #14
 80073e2:	d107      	bne.n	80073f4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4809      	ldr	r0, [pc, #36]	@ (800740c <TlEvtReceived+0x40>)
 80073e8:	f000 fc28 	bl	8007c3c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80073ec:	2000      	movs	r0, #0
 80073ee:	f000 ff5f 	bl	80082b0 <hci_cmd_resp_release>
 80073f2:	e006      	b.n	8007402 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4806      	ldr	r0, [pc, #24]	@ (8007410 <TlEvtReceived+0x44>)
 80073f8:	f000 fc20 	bl	8007c3c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80073fc:	4804      	ldr	r0, [pc, #16]	@ (8007410 <TlEvtReceived+0x44>)
 80073fe:	f000 ff4b 	bl	8008298 <hci_notify_asynch_evt>
  }

  return;
 8007402:	bf00      	nop
}
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000350 	.word	0x20000350
 8007410:	200000f0 	.word	0x200000f0

08007414 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a05      	ldr	r2, [pc, #20]	@ (8007434 <hci_register_io_bus+0x20>)
 8007420:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a04      	ldr	r2, [pc, #16]	@ (8007438 <hci_register_io_bus+0x24>)
 8007426:	611a      	str	r2, [r3, #16]

  return;
 8007428:	bf00      	nop
}
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	0800772d 	.word	0x0800772d
 8007438:	08007795 	.word	0x08007795

0800743c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	4a08      	ldr	r2, [pc, #32]	@ (800746c <shci_init+0x30>)
 800744c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800744e:	4a08      	ldr	r2, [pc, #32]	@ (8007470 <shci_init+0x34>)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007454:	4806      	ldr	r0, [pc, #24]	@ (8007470 <shci_init+0x34>)
 8007456:	f000 f915 	bl	8007684 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f898 	bl	8007594 <TlInit>

  return;
 8007464:	bf00      	nop
}
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000380 	.word	0x20000380
 8007470:	20000360 	.word	0x20000360

08007474 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800747a:	4822      	ldr	r0, [pc, #136]	@ (8007504 <shci_user_evt_proc+0x90>)
 800747c:	f000 fb96 	bl	8007bac <LST_is_empty>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d12b      	bne.n	80074de <shci_user_evt_proc+0x6a>
 8007486:	4b20      	ldr	r3, [pc, #128]	@ (8007508 <shci_user_evt_proc+0x94>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d027      	beq.n	80074de <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800748e:	f107 030c 	add.w	r3, r7, #12
 8007492:	4619      	mov	r1, r3
 8007494:	481b      	ldr	r0, [pc, #108]	@ (8007504 <shci_user_evt_proc+0x90>)
 8007496:	f000 fc18 	bl	8007cca <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800749a:	4b1c      	ldr	r3, [pc, #112]	@ (800750c <shci_user_evt_proc+0x98>)
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80074a6:	2301      	movs	r3, #1
 80074a8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80074aa:	4b18      	ldr	r3, [pc, #96]	@ (800750c <shci_user_evt_proc+0x98>)
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	1d3a      	adds	r2, r7, #4
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80074b4:	793a      	ldrb	r2, [r7, #4]
 80074b6:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <shci_user_evt_proc+0x94>)
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	e002      	b.n	80074c2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80074bc:	4b12      	ldr	r3, [pc, #72]	@ (8007508 <shci_user_evt_proc+0x94>)
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80074c2:	4b11      	ldr	r3, [pc, #68]	@ (8007508 <shci_user_evt_proc+0x94>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fa71 	bl	80079b4 <TL_MM_EvtDone>
 80074d2:	e004      	b.n	80074de <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4619      	mov	r1, r3
 80074d8:	480a      	ldr	r0, [pc, #40]	@ (8007504 <shci_user_evt_proc+0x90>)
 80074da:	f000 fb89 	bl	8007bf0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80074de:	4809      	ldr	r0, [pc, #36]	@ (8007504 <shci_user_evt_proc+0x90>)
 80074e0:	f000 fb64 	bl	8007bac <LST_is_empty>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <shci_user_evt_proc+0x86>
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <shci_user_evt_proc+0x94>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80074f2:	4804      	ldr	r0, [pc, #16]	@ (8007504 <shci_user_evt_proc+0x90>)
 80074f4:	f7f9 fa51 	bl	800099a <shci_notify_asynch_evt>
  }


  return;
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
}
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000100 	.word	0x20000100
 8007508:	20000110 	.word	0x20000110
 800750c:	20000360 	.word	0x20000360

08007510 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60ba      	str	r2, [r7, #8]
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	4603      	mov	r3, r0
 800751c:	81fb      	strh	r3, [r7, #14]
 800751e:	460b      	mov	r3, r1
 8007520:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007522:	2000      	movs	r0, #0
 8007524:	f000 f868 	bl	80075f8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007528:	4b17      	ldr	r3, [pc, #92]	@ (8007588 <shci_send+0x78>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	89fa      	ldrh	r2, [r7, #14]
 800752e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007532:	4b15      	ldr	r3, [pc, #84]	@ (8007588 <shci_send+0x78>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	7b7a      	ldrb	r2, [r7, #13]
 8007538:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800753a:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <shci_send+0x78>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	7b7a      	ldrb	r2, [r7, #13]
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	4618      	mov	r0, r3
 8007546:	f001 ff9c 	bl	8009482 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800754a:	4b10      	ldr	r3, [pc, #64]	@ (800758c <shci_send+0x7c>)
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8007550:	4b0f      	ldr	r3, [pc, #60]	@ (8007590 <shci_send+0x80>)
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2100      	movs	r1, #0
 8007556:	2000      	movs	r0, #0
 8007558:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800755a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800755e:	f7f9 fa33 	bl	80009c8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f103 0008 	add.w	r0, r3, #8
 8007568:	4b07      	ldr	r3, [pc, #28]	@ (8007588 <shci_send+0x78>)
 800756a:	6819      	ldr	r1, [r3, #0]
 800756c:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <shci_send+0x78>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	789b      	ldrb	r3, [r3, #2]
 8007572:	3303      	adds	r3, #3
 8007574:	461a      	mov	r2, r3
 8007576:	f001 ff84 	bl	8009482 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800757a:	2001      	movs	r0, #1
 800757c:	f000 f83c 	bl	80075f8 <Cmd_SetStatus>

  return;
 8007580:	bf00      	nop
}
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	2000010c 	.word	0x2000010c
 800758c:	20000384 	.word	0x20000384
 8007590:	20000360 	.word	0x20000360

08007594 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800759c:	4a10      	ldr	r2, [pc, #64]	@ (80075e0 <TlInit+0x4c>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80075a2:	4810      	ldr	r0, [pc, #64]	@ (80075e4 <TlInit+0x50>)
 80075a4:	f000 faf2 	bl	8007b8c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80075a8:	2001      	movs	r0, #1
 80075aa:	f000 f825 	bl	80075f8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <TlInit+0x54>)
 80075b0:	2201      	movs	r2, #1
 80075b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80075b4:	4b0d      	ldr	r3, [pc, #52]	@ (80075ec <TlInit+0x58>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00c      	beq.n	80075d6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80075c0:	4b0b      	ldr	r3, [pc, #44]	@ (80075f0 <TlInit+0x5c>)
 80075c2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80075c4:	4b0b      	ldr	r3, [pc, #44]	@ (80075f4 <TlInit+0x60>)
 80075c6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80075c8:	4b08      	ldr	r3, [pc, #32]	@ (80075ec <TlInit+0x58>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f107 020c 	add.w	r2, r7, #12
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
  }

  return;
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
}
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	2000010c 	.word	0x2000010c
 80075e4:	20000100 	.word	0x20000100
 80075e8:	20000110 	.word	0x20000110
 80075ec:	20000360 	.word	0x20000360
 80075f0:	08007649 	.word	0x08007649
 80075f4:	08007661 	.word	0x08007661

080075f8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10b      	bne.n	8007620 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007608:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <Cmd_SetStatus+0x48>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007610:	4b0b      	ldr	r3, [pc, #44]	@ (8007640 <Cmd_SetStatus+0x48>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2000      	movs	r0, #0
 8007616:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007618:	4b0a      	ldr	r3, [pc, #40]	@ (8007644 <Cmd_SetStatus+0x4c>)
 800761a:	2200      	movs	r2, #0
 800761c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800761e:	e00b      	b.n	8007638 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007620:	4b08      	ldr	r3, [pc, #32]	@ (8007644 <Cmd_SetStatus+0x4c>)
 8007622:	2201      	movs	r2, #1
 8007624:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007626:	4b06      	ldr	r3, [pc, #24]	@ (8007640 <Cmd_SetStatus+0x48>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800762e:	4b04      	ldr	r3, [pc, #16]	@ (8007640 <Cmd_SetStatus+0x48>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2001      	movs	r0, #1
 8007634:	4798      	blx	r3
  return;
 8007636:	bf00      	nop
 8007638:	bf00      	nop
}
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000380 	.word	0x20000380
 8007644:	20000108 	.word	0x20000108

08007648 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007650:	2000      	movs	r0, #0
 8007652:	f7f9 f9ae 	bl	80009b2 <shci_cmd_resp_release>

  return;
 8007656:	bf00      	nop
}
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	4805      	ldr	r0, [pc, #20]	@ (8007680 <TlUserEvtReceived+0x20>)
 800766c:	f000 fae6 	bl	8007c3c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007670:	4803      	ldr	r0, [pc, #12]	@ (8007680 <TlUserEvtReceived+0x20>)
 8007672:	f7f9 f992 	bl	800099a <shci_notify_asynch_evt>

  return;
 8007676:	bf00      	nop
}
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000100 	.word	0x20000100

08007684 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a05      	ldr	r2, [pc, #20]	@ (80076a4 <shci_register_io_bus+0x20>)
 8007690:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a04      	ldr	r2, [pc, #16]	@ (80076a8 <shci_register_io_bus+0x24>)
 8007696:	611a      	str	r2, [r3, #16]

  return;
 8007698:	bf00      	nop
}
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	08007841 	.word	0x08007841
 80076a8:	08007895 	.word	0x08007895

080076ac <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80076b0:	f001 fa1e 	bl	8008af0 <HW_IPCC_Enable>

  return;
 80076b4:	bf00      	nop
}
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <TL_Init>:


void TL_Init( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80076bc:	4b10      	ldr	r3, [pc, #64]	@ (8007700 <TL_Init+0x48>)
 80076be:	4a11      	ldr	r2, [pc, #68]	@ (8007704 <TL_Init+0x4c>)
 80076c0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80076c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007700 <TL_Init+0x48>)
 80076c4:	4a10      	ldr	r2, [pc, #64]	@ (8007708 <TL_Init+0x50>)
 80076c6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80076c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <TL_Init+0x48>)
 80076ca:	4a10      	ldr	r2, [pc, #64]	@ (800770c <TL_Init+0x54>)
 80076cc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80076ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <TL_Init+0x48>)
 80076d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007710 <TL_Init+0x58>)
 80076d2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80076d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007700 <TL_Init+0x48>)
 80076d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007714 <TL_Init+0x5c>)
 80076d8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80076da:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <TL_Init+0x48>)
 80076dc:	4a0e      	ldr	r2, [pc, #56]	@ (8007718 <TL_Init+0x60>)
 80076de:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80076e0:	4b07      	ldr	r3, [pc, #28]	@ (8007700 <TL_Init+0x48>)
 80076e2:	4a0e      	ldr	r2, [pc, #56]	@ (800771c <TL_Init+0x64>)
 80076e4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80076e6:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <TL_Init+0x48>)
 80076e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007720 <TL_Init+0x68>)
 80076ea:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80076ec:	4b04      	ldr	r3, [pc, #16]	@ (8007700 <TL_Init+0x48>)
 80076ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007724 <TL_Init+0x6c>)
 80076f0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80076f2:	4b03      	ldr	r3, [pc, #12]	@ (8007700 <TL_Init+0x48>)
 80076f4:	4a0c      	ldr	r2, [pc, #48]	@ (8007728 <TL_Init+0x70>)
 80076f6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80076f8:	f001 fa0e 	bl	8008b18 <HW_IPCC_Init>

  return;
 80076fc:	bf00      	nop
}
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20030000 	.word	0x20030000
 8007704:	20030028 	.word	0x20030028
 8007708:	20030048 	.word	0x20030048
 800770c:	20030058 	.word	0x20030058
 8007710:	20030068 	.word	0x20030068
 8007714:	20030070 	.word	0x20030070
 8007718:	20030078 	.word	0x20030078
 800771c:	20030080 	.word	0x20030080
 8007720:	2003009c 	.word	0x2003009c
 8007724:	200300a0 	.word	0x200300a0
 8007728:	200300ac 	.word	0x200300ac

0800772c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007738:	4811      	ldr	r0, [pc, #68]	@ (8007780 <TL_BLE_Init+0x54>)
 800773a:	f000 fa27 	bl	8007b8c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800773e:	4b11      	ldr	r3, [pc, #68]	@ (8007784 <TL_BLE_Init+0x58>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4a0c      	ldr	r2, [pc, #48]	@ (8007788 <TL_BLE_Init+0x5c>)
 8007758:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a08      	ldr	r2, [pc, #32]	@ (8007780 <TL_BLE_Init+0x54>)
 800775e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007760:	f001 f9f0 	bl	8008b44 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a08      	ldr	r2, [pc, #32]	@ (800778c <TL_BLE_Init+0x60>)
 800776a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	4a07      	ldr	r2, [pc, #28]	@ (8007790 <TL_BLE_Init+0x64>)
 8007772:	6013      	str	r3, [r2, #0]

  return 0;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	200300c8 	.word	0x200300c8
 8007784:	20030000 	.word	0x20030000
 8007788:	20030a58 	.word	0x20030a58
 800778c:	20000390 	.word	0x20000390
 8007790:	20000394 	.word	0x20000394

08007794 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80077a0:	4b09      	ldr	r3, [pc, #36]	@ (80077c8 <TL_BLE_SendCmd+0x34>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2201      	movs	r2, #1
 80077a8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80077aa:	4b07      	ldr	r3, [pc, #28]	@ (80077c8 <TL_BLE_SendCmd+0x34>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4619      	mov	r1, r3
 80077b2:	2001      	movs	r0, #1
 80077b4:	f000 f96c 	bl	8007a90 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80077b8:	f001 f9ce 	bl	8008b58 <HW_IPCC_BLE_SendCmd>

  return 0;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20030000 	.word	0x20030000

080077cc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80077d2:	e01c      	b.n	800780e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	4812      	ldr	r0, [pc, #72]	@ (8007824 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80077da:	f000 fa76 	bl	8007cca <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7a5b      	ldrb	r3, [r3, #9]
 80077e2:	2b0f      	cmp	r3, #15
 80077e4:	d003      	beq.n	80077ee <HW_IPCC_BLE_RxEvtNot+0x22>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7a5b      	ldrb	r3, [r3, #9]
 80077ea:	2b0e      	cmp	r3, #14
 80077ec:	d105      	bne.n	80077fa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4619      	mov	r1, r3
 80077f2:	2002      	movs	r0, #2
 80077f4:	f000 f94c 	bl	8007a90 <OutputDbgTrace>
 80077f8:	e004      	b.n	8007804 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4619      	mov	r1, r3
 80077fe:	2003      	movs	r0, #3
 8007800:	f000 f946 	bl	8007a90 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007804:	4b08      	ldr	r3, [pc, #32]	@ (8007828 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4610      	mov	r0, r2
 800780c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800780e:	4805      	ldr	r0, [pc, #20]	@ (8007824 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007810:	f000 f9cc 	bl	8007bac <LST_is_empty>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0dc      	beq.n	80077d4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800781a:	bf00      	nop
}
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200300c8 	.word	0x200300c8
 8007828:	20000390 	.word	0x20000390

0800782c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007830:	4b02      	ldr	r3, [pc, #8]	@ (800783c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4798      	blx	r3

  return;
 8007836:	bf00      	nop
}
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000394 	.word	0x20000394

08007840 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800784c:	480d      	ldr	r0, [pc, #52]	@ (8007884 <TL_SYS_Init+0x44>)
 800784e:	f000 f99d 	bl	8007b8c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007852:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <TL_SYS_Init+0x48>)
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4a08      	ldr	r2, [pc, #32]	@ (8007884 <TL_SYS_Init+0x44>)
 8007864:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007866:	f001 f999 	bl	8008b9c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a07      	ldr	r2, [pc, #28]	@ (800788c <TL_SYS_Init+0x4c>)
 8007870:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	4a06      	ldr	r2, [pc, #24]	@ (8007890 <TL_SYS_Init+0x50>)
 8007878:	6013      	str	r3, [r2, #0]

  return 0;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	200300d0 	.word	0x200300d0
 8007888:	20030000 	.word	0x20030000
 800788c:	20000398 	.word	0x20000398
 8007890:	2000039c 	.word	0x2000039c

08007894 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80078a0:	4b09      	ldr	r3, [pc, #36]	@ (80078c8 <TL_SYS_SendCmd+0x34>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2210      	movs	r2, #16
 80078a8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80078aa:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <TL_SYS_SendCmd+0x34>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4619      	mov	r1, r3
 80078b2:	2004      	movs	r0, #4
 80078b4:	f000 f8ec 	bl	8007a90 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80078b8:	f001 f97a 	bl	8008bb0 <HW_IPCC_SYS_SendCmd>

  return 0;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20030000 	.word	0x20030000

080078cc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80078d0:	4b07      	ldr	r3, [pc, #28]	@ (80078f0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	2005      	movs	r0, #5
 80078da:	f000 f8d9 	bl	8007a90 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80078de:	4b05      	ldr	r3, [pc, #20]	@ (80078f4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a03      	ldr	r2, [pc, #12]	@ (80078f0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80078e4:	68d2      	ldr	r2, [r2, #12]
 80078e6:	6812      	ldr	r2, [r2, #0]
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3

  return;
 80078ec:	bf00      	nop
}
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20030000 	.word	0x20030000
 80078f4:	20000398 	.word	0x20000398

080078f8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80078fe:	e00e      	b.n	800791e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007900:	1d3b      	adds	r3, r7, #4
 8007902:	4619      	mov	r1, r3
 8007904:	480b      	ldr	r0, [pc, #44]	@ (8007934 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007906:	f000 f9e0 	bl	8007cca <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4619      	mov	r1, r3
 800790e:	2006      	movs	r0, #6
 8007910:	f000 f8be 	bl	8007a90 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007914:	4b08      	ldr	r3, [pc, #32]	@ (8007938 <HW_IPCC_SYS_EvtNot+0x40>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	4610      	mov	r0, r2
 800791c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800791e:	4805      	ldr	r0, [pc, #20]	@ (8007934 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007920:	f000 f944 	bl	8007bac <LST_is_empty>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0ea      	beq.n	8007900 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800792a:	bf00      	nop
}
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200300d0 	.word	0x200300d0
 8007938:	2000039c 	.word	0x2000039c

0800793c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007944:	4817      	ldr	r0, [pc, #92]	@ (80079a4 <TL_MM_Init+0x68>)
 8007946:	f000 f921 	bl	8007b8c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800794a:	4817      	ldr	r0, [pc, #92]	@ (80079a8 <TL_MM_Init+0x6c>)
 800794c:	f000 f91e 	bl	8007b8c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007950:	4b16      	ldr	r3, [pc, #88]	@ (80079ac <TL_MM_Init+0x70>)
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	4a16      	ldr	r2, [pc, #88]	@ (80079b0 <TL_MM_Init+0x74>)
 8007956:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007958:	4b15      	ldr	r3, [pc, #84]	@ (80079b0 <TL_MM_Init+0x74>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6892      	ldr	r2, [r2, #8]
 8007960:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007962:	4b13      	ldr	r3, [pc, #76]	@ (80079b0 <TL_MM_Init+0x74>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	68d2      	ldr	r2, [r2, #12]
 800796a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800796c:	4b10      	ldr	r3, [pc, #64]	@ (80079b0 <TL_MM_Init+0x74>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a0c      	ldr	r2, [pc, #48]	@ (80079a4 <TL_MM_Init+0x68>)
 8007972:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007974:	4b0e      	ldr	r3, [pc, #56]	@ (80079b0 <TL_MM_Init+0x74>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800797e:	4b0c      	ldr	r3, [pc, #48]	@ (80079b0 <TL_MM_Init+0x74>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6852      	ldr	r2, [r2, #4]
 8007986:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007988:	4b09      	ldr	r3, [pc, #36]	@ (80079b0 <TL_MM_Init+0x74>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6912      	ldr	r2, [r2, #16]
 8007990:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007992:	4b07      	ldr	r3, [pc, #28]	@ (80079b0 <TL_MM_Init+0x74>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6952      	ldr	r2, [r2, #20]
 800799a:	619a      	str	r2, [r3, #24]

  return;
 800799c:	bf00      	nop
}
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	200300b8 	.word	0x200300b8
 80079a8:	20000388 	.word	0x20000388
 80079ac:	20030000 	.word	0x20030000
 80079b0:	200003a0 	.word	0x200003a0

080079b4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	4807      	ldr	r0, [pc, #28]	@ (80079dc <TL_MM_EvtDone+0x28>)
 80079c0:	f000 f93c 	bl	8007c3c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	2000      	movs	r0, #0
 80079c8:	f000 f862 	bl	8007a90 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80079cc:	4804      	ldr	r0, [pc, #16]	@ (80079e0 <TL_MM_EvtDone+0x2c>)
 80079ce:	f001 f915 	bl	8008bfc <HW_IPCC_MM_SendFreeBuf>

  return;
 80079d2:	bf00      	nop
}
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000388 	.word	0x20000388
 80079e0:	080079e5 	.word	0x080079e5

080079e4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80079ea:	e00c      	b.n	8007a06 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80079ec:	1d3b      	adds	r3, r7, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	480a      	ldr	r0, [pc, #40]	@ (8007a1c <SendFreeBuf+0x38>)
 80079f2:	f000 f96a 	bl	8007cca <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80079f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007a20 <SendFreeBuf+0x3c>)
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f91b 	bl	8007c3c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007a06:	4805      	ldr	r0, [pc, #20]	@ (8007a1c <SendFreeBuf+0x38>)
 8007a08:	f000 f8d0 	bl	8007bac <LST_is_empty>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0ec      	beq.n	80079ec <SendFreeBuf+0x8>
  }

  return;
 8007a12:	bf00      	nop
}
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000388 	.word	0x20000388
 8007a20:	20030000 	.word	0x20030000

08007a24 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007a28:	4805      	ldr	r0, [pc, #20]	@ (8007a40 <TL_TRACES_Init+0x1c>)
 8007a2a:	f000 f8af 	bl	8007b8c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007a2e:	4b05      	ldr	r3, [pc, #20]	@ (8007a44 <TL_TRACES_Init+0x20>)
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	4a03      	ldr	r2, [pc, #12]	@ (8007a40 <TL_TRACES_Init+0x1c>)
 8007a34:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007a36:	f001 f917 	bl	8008c68 <HW_IPCC_TRACES_Init>

  return;
 8007a3a:	bf00      	nop
}
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	200300c0 	.word	0x200300c0
 8007a44:	20030000 	.word	0x20030000

08007a48 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007a4e:	e008      	b.n	8007a62 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007a50:	1d3b      	adds	r3, r7, #4
 8007a52:	4619      	mov	r1, r3
 8007a54:	4808      	ldr	r0, [pc, #32]	@ (8007a78 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007a56:	f000 f938 	bl	8007cca <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 f80d 	bl	8007a7c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007a62:	4805      	ldr	r0, [pc, #20]	@ (8007a78 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007a64:	f000 f8a2 	bl	8007bac <LST_is_empty>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f0      	beq.n	8007a50 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007a6e:	bf00      	nop
}
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200300c0 	.word	0x200300c0

08007a7c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	6039      	str	r1, [r7, #0]
 8007a9a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	2b06      	cmp	r3, #6
 8007aa0:	d845      	bhi.n	8007b2e <OutputDbgTrace+0x9e>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <OutputDbgTrace+0x18>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ac5 	.word	0x08007ac5
 8007aac:	08007ae9 	.word	0x08007ae9
 8007ab0:	08007aef 	.word	0x08007aef
 8007ab4:	08007b03 	.word	0x08007b03
 8007ab8:	08007b0f 	.word	0x08007b0f
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	08007b23 	.word	0x08007b23
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	7a5b      	ldrb	r3, [r3, #9]
 8007acc:	2bff      	cmp	r3, #255	@ 0xff
 8007ace:	d005      	beq.n	8007adc <OutputDbgTrace+0x4c>
 8007ad0:	2bff      	cmp	r3, #255	@ 0xff
 8007ad2:	dc05      	bgt.n	8007ae0 <OutputDbgTrace+0x50>
 8007ad4:	2b0e      	cmp	r3, #14
 8007ad6:	d005      	beq.n	8007ae4 <OutputDbgTrace+0x54>
 8007ad8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007ada:	e001      	b.n	8007ae0 <OutputDbgTrace+0x50>
          break;
 8007adc:	bf00      	nop
 8007ade:	e027      	b.n	8007b30 <OutputDbgTrace+0xa0>
          break;
 8007ae0:	bf00      	nop
 8007ae2:	e025      	b.n	8007b30 <OutputDbgTrace+0xa0>
          break;
 8007ae4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007ae6:	e023      	b.n	8007b30 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007aec:	e020      	b.n	8007b30 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	7a5b      	ldrb	r3, [r3, #9]
 8007af6:	2b0e      	cmp	r3, #14
 8007af8:	d001      	beq.n	8007afe <OutputDbgTrace+0x6e>
 8007afa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007afc:	e000      	b.n	8007b00 <OutputDbgTrace+0x70>
          break;
 8007afe:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007b00:	e016      	b.n	8007b30 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	7a5b      	ldrb	r3, [r3, #9]
 8007b0a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007b0c:	e010      	b.n	8007b30 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007b12:	e00d      	b.n	8007b30 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8007b1e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007b20:	e006      	b.n	8007b30 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	7a5b      	ldrb	r3, [r3, #9]
 8007b2a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007b2c:	e000      	b.n	8007b30 <OutputDbgTrace+0xa0>

    default:
      break;
 8007b2e:	bf00      	nop
  }

  return;
 8007b30:	bf00      	nop
}
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007b46:	4b0f      	ldr	r3, [pc, #60]	@ (8007b84 <OTP_Read+0x48>)
 8007b48:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007b4a:	e002      	b.n	8007b52 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3b08      	subs	r3, #8
 8007b50:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3307      	adds	r3, #7
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	79fa      	ldrb	r2, [r7, #7]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d003      	beq.n	8007b66 <OTP_Read+0x2a>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4a09      	ldr	r2, [pc, #36]	@ (8007b88 <OTP_Read+0x4c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d1f2      	bne.n	8007b4c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3307      	adds	r3, #7
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	79fa      	ldrb	r2, [r7, #7]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d001      	beq.n	8007b76 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007b76:	68fb      	ldr	r3, [r7, #12]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	1fff73f8 	.word	0x1fff73f8
 8007b88:	1fff7000 	.word	0x1fff7000

08007b8c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	605a      	str	r2, [r3, #4]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bbe:	b672      	cpsid	i
}
 8007bc0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d102      	bne.n	8007bd2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]
 8007bd0:	e001      	b.n	8007bd6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	75fb      	strb	r3, [r7, #23]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f383 8810 	msr	PRIMASK, r3
}
 8007be0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	371c      	adds	r7, #28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8007bfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c00:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c04:	b672      	cpsid	i
}
 8007c06:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f383 8810 	msr	PRIMASK, r3
}
 8007c2e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007c30:	bf00      	nop
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c46:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007c4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c50:	b672      	cpsid	i
}
 8007c52:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f383 8810 	msr	PRIMASK, r3
}
 8007c7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c90:	f3ef 8310 	mrs	r3, PRIMASK
 8007c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c96:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c9a:	b672      	cpsid	i
}
 8007c9c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6852      	ldr	r2, [r2, #4]
 8007cb0:	605a      	str	r2, [r3, #4]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f383 8810 	msr	PRIMASK, r3
}
 8007cbc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007cbe:	bf00      	nop
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cda:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007cdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007cde:	b672      	cpsid	i
}
 8007ce0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff ffca 	bl	8007c88 <LST_remove_node>
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f383 8810 	msr	PRIMASK, r3
}
 8007cfe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007d00:	bf00      	nop
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007d0c:	4b03      	ldr	r3, [pc, #12]	@ (8007d1c <LL_FLASH_GetUDN+0x14>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	1fff7580 	.word	0x1fff7580

08007d20 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007d24:	4b03      	ldr	r3, [pc, #12]	@ (8007d34 <LL_FLASH_GetDeviceID+0x14>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	b2db      	uxtb	r3, r3
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	1fff7584 	.word	0x1fff7584

08007d38 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007d3c:	4b03      	ldr	r3, [pc, #12]	@ (8007d4c <LL_FLASH_GetSTCompanyID+0x14>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	0a1b      	lsrs	r3, r3, #8
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	1fff7584 	.word	0x1fff7584

08007d50 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007d50:	b5b0      	push	{r4, r5, r7, lr}
 8007d52:	b090      	sub	sp, #64	@ 0x40
 8007d54:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007d56:	2392      	movs	r3, #146	@ 0x92
 8007d58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
UTIL_SEQ_RegTask(1<<CFG_TASK, UTIL_SEQ_RFU, Task);
 8007d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8007e18 <APP_BLE_Init+0xc8>)
 8007d5e:	2100      	movs	r1, #0
 8007d60:	2004      	movs	r0, #4
 8007d62:	f001 f8d5 	bl	8008f10 <UTIL_SEQ_RegTask>
UTIL_SEQ_SetTask(1<<CFG_TASK, CFG_SCH_PRIO_0);
 8007d66:	2100      	movs	r1, #0
 8007d68:	2004      	movs	r0, #4
 8007d6a:	f001 f8f3 	bl	8008f54 <UTIL_SEQ_SetTask>

UTIL_SEQ_RegTask(1 << CFG_TASK_TIMER_SECOND_ID, UTIL_SEQ_RFU, Task_Timer_Second);
 8007d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8007e1c <APP_BLE_Init+0xcc>)
 8007d70:	2100      	movs	r1, #0
 8007d72:	2008      	movs	r0, #8
 8007d74:	f001 f8cc 	bl	8008f10 <UTIL_SEQ_RegTask>
UTIL_SEQ_SetTask(1 << CFG_TASK_TIMER_SECOND_ID, CFG_SCH_PRIO_0);
 8007d78:	2100      	movs	r1, #0
 8007d7a:	2008      	movs	r0, #8
 8007d7c:	f001 f8ea 	bl	8008f54 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007d80:	4b27      	ldr	r3, [pc, #156]	@ (8007e20 <APP_BLE_Init+0xd0>)
 8007d82:	1d3c      	adds	r4, r7, #4
 8007d84:	461d      	mov	r5, r3
 8007d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007d96:	c403      	stmia	r4!, {r0, r1}
 8007d98:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007d9a:	f000 f925 	bl	8007fe8 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007d9e:	2101      	movs	r1, #1
 8007da0:	2002      	movs	r0, #2
 8007da2:	f000 ff89 	bl	8008cb8 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007da6:	4a1f      	ldr	r2, [pc, #124]	@ (8007e24 <APP_BLE_Init+0xd4>)
 8007da8:	2100      	movs	r1, #0
 8007daa:	2002      	movs	r0, #2
 8007dac:	f001 f8b0 	bl	8008f10 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007db0:	1d3b      	adds	r3, r7, #4
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff f8b4 	bl	8006f20 <SHCI_C2_BLE_Init>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007dbe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <APP_BLE_Init+0x7a>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007dc6:	f7f9 fe37 	bl	8001a38 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007dca:	f000 f923 	bl	8008014 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007dce:	f7ff f801 	bl	8006dd4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007dd2:	4b15      	ldr	r3, [pc, #84]	@ (8007e28 <APP_BLE_Init+0xd8>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007dda:	4b13      	ldr	r3, [pc, #76]	@ (8007e28 <APP_BLE_Init+0xd8>)
 8007ddc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007de0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007de2:	4a12      	ldr	r2, [pc, #72]	@ (8007e2c <APP_BLE_Init+0xdc>)
 8007de4:	2100      	movs	r1, #0
 8007de6:	2001      	movs	r0, #1
 8007de8:	f001 f892 	bl	8008f10 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007dec:	2006      	movs	r0, #6
 8007dee:	f7fe fe65 	bl	8006abc <aci_hal_set_radio_activity_mask>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007df8:	f000 fae8 	bl	80083cc <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e28 <APP_BLE_Init+0xd8>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007e02:	4b09      	ldr	r3, [pc, #36]	@ (8007e28 <APP_BLE_Init+0xd8>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007e08:	2001      	movs	r0, #1
 8007e0a:	f000 f9b7 	bl	800817c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007e0e:	bf00      	nop
}
 8007e10:	3740      	adds	r7, #64	@ 0x40
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bdb0      	pop	{r4, r5, r7, pc}
 8007e16:	bf00      	nop
 8007e18:	0800834b 	.word	0x0800834b
 8007e1c:	08008359 	.word	0x08008359
 8007e20:	0800a0a0 	.word	0x0800a0a0
 8007e24:	0800713d 	.word	0x0800713d
 8007e28:	200003ac 	.word	0x200003ac
 8007e2c:	08008265 	.word	0x08008265

08007e30 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08c      	sub	sp, #48	@ 0x30
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007e38:	2392      	movs	r3, #146	@ 0x92
 8007e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3301      	adds	r3, #1
 8007e42:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2bff      	cmp	r3, #255	@ 0xff
 8007e4a:	d05c      	beq.n	8007f06 <SVCCTL_App_Notification+0xd6>
 8007e4c:	2bff      	cmp	r3, #255	@ 0xff
 8007e4e:	f300 80bd 	bgt.w	8007fcc <SVCCTL_App_Notification+0x19c>
 8007e52:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e54:	d02b      	beq.n	8007eae <SVCCTL_App_Notification+0x7e>
 8007e56:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e58:	f300 80b8 	bgt.w	8007fcc <SVCCTL_App_Notification+0x19c>
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	d002      	beq.n	8007e66 <SVCCTL_App_Notification+0x36>
 8007e60:	2b10      	cmp	r3, #16
 8007e62:	d020      	beq.n	8007ea6 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007e64:	e0b2      	b.n	8007fcc <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e68:	3302      	adds	r3, #2
 8007e6a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	4b59      	ldr	r3, [pc, #356]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007e76:	8adb      	ldrh	r3, [r3, #22]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d106      	bne.n	8007e8a <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007e7c:	4b57      	ldr	r3, [pc, #348]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007e82:	4b56      	ldr	r3, [pc, #344]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	f000 f976 	bl	800817c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007e90:	4b53      	ldr	r3, [pc, #332]	@ (8007fe0 <SVCCTL_App_Notification+0x1b0>)
 8007e92:	2201      	movs	r2, #1
 8007e94:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007e96:	4b51      	ldr	r3, [pc, #324]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007e98:	8ada      	ldrh	r2, [r3, #22]
 8007e9a:	4b51      	ldr	r3, [pc, #324]	@ (8007fe0 <SVCCTL_App_Notification+0x1b0>)
 8007e9c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007e9e:	4850      	ldr	r0, [pc, #320]	@ (8007fe0 <SVCCTL_App_Notification+0x1b0>)
 8007ea0:	f000 fa80 	bl	80083a4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007ea4:	e095      	b.n	8007fd2 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	3302      	adds	r3, #2
 8007eaa:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8007eac:	e091      	b.n	8007fd2 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d001      	beq.n	8007ec0 <SVCCTL_App_Notification+0x90>
 8007ebc:	2b03      	cmp	r3, #3
          break;
 8007ebe:	e021      	b.n	8007f04 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007ec6:	4b45      	ldr	r3, [pc, #276]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007ec8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d104      	bne.n	8007eda <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007ed0:	4b42      	ldr	r3, [pc, #264]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007ed2:	2206      	movs	r2, #6
 8007ed4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007ed8:	e003      	b.n	8007ee2 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007eda:	4b40      	ldr	r3, [pc, #256]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007edc:	2205      	movs	r2, #5
 8007ede:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	4b3c      	ldr	r3, [pc, #240]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007eec:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007eee:	4b3c      	ldr	r3, [pc, #240]	@ (8007fe0 <SVCCTL_App_Notification+0x1b0>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007ef4:	4b39      	ldr	r3, [pc, #228]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007ef6:	8ada      	ldrh	r2, [r3, #22]
 8007ef8:	4b39      	ldr	r3, [pc, #228]	@ (8007fe0 <SVCCTL_App_Notification+0x1b0>)
 8007efa:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007efc:	4838      	ldr	r0, [pc, #224]	@ (8007fe0 <SVCCTL_App_Notification+0x1b0>)
 8007efe:	f000 fa51 	bl	80083a4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007f02:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007f04:	e065      	b.n	8007fd2 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f08:	3302      	adds	r3, #2
 8007f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d048      	beq.n	8007fac <SVCCTL_App_Notification+0x17c>
 8007f1a:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	dc56      	bgt.n	8007fd0 <SVCCTL_App_Notification+0x1a0>
 8007f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f26:	d04b      	beq.n	8007fc0 <SVCCTL_App_Notification+0x190>
 8007f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f2c:	dc50      	bgt.n	8007fd0 <SVCCTL_App_Notification+0x1a0>
 8007f2e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007f32:	4293      	cmp	r3, r2
 8007f34:	dc4c      	bgt.n	8007fd0 <SVCCTL_App_Notification+0x1a0>
 8007f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3a:	dc04      	bgt.n	8007f46 <SVCCTL_App_Notification+0x116>
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d041      	beq.n	8007fc4 <SVCCTL_App_Notification+0x194>
 8007f40:	2b06      	cmp	r3, #6
 8007f42:	d039      	beq.n	8007fb8 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007f44:	e044      	b.n	8007fd0 <SVCCTL_App_Notification+0x1a0>
 8007f46:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007f4a:	2b09      	cmp	r3, #9
 8007f4c:	d840      	bhi.n	8007fd0 <SVCCTL_App_Notification+0x1a0>
 8007f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f54 <SVCCTL_App_Notification+0x124>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007fa5 	.word	0x08007fa5
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007fd1 	.word	0x08007fd1
 8007f60:	08007fd1 	.word	0x08007fd1
 8007f64:	08007fd1 	.word	0x08007fd1
 8007f68:	08007fd1 	.word	0x08007fd1
 8007f6c:	08007fc9 	.word	0x08007fc9
 8007f70:	08007fd1 	.word	0x08007fd1
 8007f74:	08007f91 	.word	0x08007f91
 8007f78:	08007fc9 	.word	0x08007fc9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007f7c:	4b17      	ldr	r3, [pc, #92]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007f7e:	8adb      	ldrh	r3, [r3, #22]
 8007f80:	4918      	ldr	r1, [pc, #96]	@ (8007fe4 <SVCCTL_App_Notification+0x1b4>)
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fd ff9c 	bl	8005ec0 <aci_gap_pass_key_resp>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007f8e:	e01c      	b.n	8007fca <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007f90:	4b12      	ldr	r3, [pc, #72]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007f92:	8adb      	ldrh	r3, [r3, #22]
 8007f94:	2101      	movs	r1, #1
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe f93c 	bl	8006214 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007fa2:	e012      	b.n	8007fca <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	623b      	str	r3, [r7, #32]
          break;
 8007faa:	e00e      	b.n	8007fca <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007fac:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <SVCCTL_App_Notification+0x1ac>)
 8007fae:	8adb      	ldrh	r3, [r3, #22]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fc42 	bl	800683a <aci_gatt_confirm_indication>
        break;
 8007fb6:	e008      	b.n	8007fca <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	3302      	adds	r3, #2
 8007fbc:	61fb      	str	r3, [r7, #28]
          break;
 8007fbe:	e004      	b.n	8007fca <SVCCTL_App_Notification+0x19a>
          break;
 8007fc0:	bf00      	nop
 8007fc2:	e005      	b.n	8007fd0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007fc4:	bf00      	nop
 8007fc6:	e003      	b.n	8007fd0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007fc8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007fca:	e001      	b.n	8007fd0 <SVCCTL_App_Notification+0x1a0>
      break;
 8007fcc:	bf00      	nop
 8007fce:	e000      	b.n	8007fd2 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007fd0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007fd2:	2301      	movs	r3, #1
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3730      	adds	r7, #48	@ 0x30
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	200003ac 	.word	0x200003ac
 8007fe0:	20000430 	.word	0x20000430
 8007fe4:	0001b207 	.word	0x0001b207

08007fe8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007fee:	4b06      	ldr	r3, [pc, #24]	@ (8008008 <Ble_Tl_Init+0x20>)
 8007ff0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007ff2:	4b06      	ldr	r3, [pc, #24]	@ (800800c <Ble_Tl_Init+0x24>)
 8007ff4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4805      	ldr	r0, [pc, #20]	@ (8008010 <Ble_Tl_Init+0x28>)
 8007ffc:	f7ff f882 	bl	8007104 <hci_init>

  return;
 8008000:	bf00      	nop
}
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	200300d8 	.word	0x200300d8
 800800c:	08008315 	.word	0x08008315
 8008010:	080082dd 	.word	0x080082dd

08008014 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008016:	b08d      	sub	sp, #52	@ 0x34
 8008018:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800801a:	2300      	movs	r3, #0
 800801c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800801e:	2392      	movs	r3, #146	@ 0x92
 8008020:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008022:	f7fe fd9f 	bl	8006b64 <hci_reset>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800802a:	f000 f8d7 	bl	80081dc <BleGetBdAddress>
 800802e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	2106      	movs	r1, #6
 8008034:	2000      	movs	r0, #0
 8008036:	f7fe fc55 	bl	80068e4 <aci_hal_write_config_data>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800803e:	4a4a      	ldr	r2, [pc, #296]	@ (8008168 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008040:	2110      	movs	r1, #16
 8008042:	2018      	movs	r0, #24
 8008044:	f7fe fc4e 	bl	80068e4 <aci_hal_write_config_data>
 8008048:	4603      	mov	r3, r0
 800804a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800804c:	4a47      	ldr	r2, [pc, #284]	@ (800816c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800804e:	2110      	movs	r1, #16
 8008050:	2008      	movs	r0, #8
 8008052:	f7fe fc47 	bl	80068e4 <aci_hal_write_config_data>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800805a:	2118      	movs	r1, #24
 800805c:	2001      	movs	r0, #1
 800805e:	f7fe fcc6 	bl	80069ee <aci_hal_set_tx_power_level>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008066:	f7fe f93c 	bl	80062e2 <aci_gatt_init>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	f043 0301 	orr.w	r3, r3, #1
 8008078:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d01f      	beq.n	80080c0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008080:	4b3b      	ldr	r3, [pc, #236]	@ (8008170 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008082:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008084:	1dba      	adds	r2, r7, #6
 8008086:	7bf8      	ldrb	r0, [r7, #15]
 8008088:	1cbb      	adds	r3, r7, #2
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	1d3b      	adds	r3, r7, #4
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	4613      	mov	r3, r2
 8008092:	2208      	movs	r2, #8
 8008094:	2100      	movs	r1, #0
 8008096:	f7fd ff7a 	bl	8005f8e <aci_gap_init>
 800809a:	4603      	mov	r3, r0
 800809c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800809e:	88fc      	ldrh	r4, [r7, #6]
 80080a0:	88bd      	ldrh	r5, [r7, #4]
 80080a2:	68b8      	ldr	r0, [r7, #8]
 80080a4:	f7f8 f86c 	bl	8000180 <strlen>
 80080a8:	4603      	mov	r3, r0
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	4613      	mov	r3, r2
 80080b2:	2200      	movs	r2, #0
 80080b4:	4629      	mov	r1, r5
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7fe fb16 	bl	80066e8 <aci_gatt_update_char_value>
 80080bc:	4603      	mov	r3, r0
 80080be:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80080c0:	88f8      	ldrh	r0, [r7, #6]
 80080c2:	8879      	ldrh	r1, [r7, #2]
 80080c4:	463b      	mov	r3, r7
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	2302      	movs	r3, #2
 80080ca:	2200      	movs	r2, #0
 80080cc:	f7fe fb0c 	bl	80066e8 <aci_gatt_update_char_value>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80080d4:	2202      	movs	r2, #2
 80080d6:	2102      	movs	r1, #2
 80080d8:	2000      	movs	r0, #0
 80080da:	f7fe fd67 	bl	8006bac <hci_le_set_default_phy>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80080e2:	4b24      	ldr	r3, [pc, #144]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80080e8:	4b22      	ldr	r3, [pc, #136]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fd fdcf 	bl	8005c90 <aci_gap_set_io_capability>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80080f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80080fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80080fe:	2208      	movs	r2, #8
 8008100:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008102:	4b1c      	ldr	r3, [pc, #112]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008104:	2210      	movs	r2, #16
 8008106:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008108:	4b1a      	ldr	r3, [pc, #104]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800810a:	2200      	movs	r2, #0
 800810c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800810e:	4b19      	ldr	r3, [pc, #100]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008110:	4a19      	ldr	r2, [pc, #100]	@ (8008178 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8008112:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008114:	4b17      	ldr	r3, [pc, #92]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008116:	2200      	movs	r2, #0
 8008118:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800811a:	4b16      	ldr	r3, [pc, #88]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800811c:	789c      	ldrb	r4, [r3, #2]
 800811e:	4b15      	ldr	r3, [pc, #84]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008120:	785d      	ldrb	r5, [r3, #1]
 8008122:	4b14      	ldr	r3, [pc, #80]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008124:	791b      	ldrb	r3, [r3, #4]
 8008126:	4a13      	ldr	r2, [pc, #76]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008128:	7952      	ldrb	r2, [r2, #5]
 800812a:	4912      	ldr	r1, [pc, #72]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800812c:	78c9      	ldrb	r1, [r1, #3]
 800812e:	4811      	ldr	r0, [pc, #68]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008130:	6880      	ldr	r0, [r0, #8]
 8008132:	2600      	movs	r6, #0
 8008134:	9604      	str	r6, [sp, #16]
 8008136:	9003      	str	r0, [sp, #12]
 8008138:	9102      	str	r1, [sp, #8]
 800813a:	9201      	str	r2, [sp, #4]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	2201      	movs	r2, #1
 8008142:	4629      	mov	r1, r5
 8008144:	4620      	mov	r0, r4
 8008146:	f7fd fdf7 	bl	8005d38 <aci_gap_set_authentication_requirement>
 800814a:	4603      	mov	r3, r0
 800814c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800814e:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008150:	789b      	ldrb	r3, [r3, #2]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008156:	f7fe f839 	bl	80061cc <aci_gap_configure_filter_accept_list>
 800815a:	4603      	mov	r3, r0
 800815c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008166:	bf00      	nop
 8008168:	0800a334 	.word	0x0800a334
 800816c:	0800a344 	.word	0x0800a344
 8008170:	0800a0dc 	.word	0x0800a0dc
 8008174:	200003ac 	.word	0x200003ac
 8008178:	0001b207 	.word	0x0001b207

0800817c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08c      	sub	sp, #48	@ 0x30
 8008180:	af08      	add	r7, sp, #32
 8008182:	4603      	mov	r3, r0
 8008184:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008186:	2392      	movs	r3, #146	@ 0x92
 8008188:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800818a:	4a12      	ldr	r2, [pc, #72]	@ (80081d4 <Adv_Request+0x58>)
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8008192:	2300      	movs	r3, #0
 8008194:	9306      	str	r3, [sp, #24]
 8008196:	2300      	movs	r3, #0
 8008198:	9305      	str	r3, [sp, #20]
 800819a:	2300      	movs	r3, #0
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	2300      	movs	r3, #0
 80081a0:	9303      	str	r3, [sp, #12]
 80081a2:	2300      	movs	r3, #0
 80081a4:	9302      	str	r3, [sp, #8]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	2300      	movs	r3, #0
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	2300      	movs	r3, #0
 80081b0:	22a0      	movs	r2, #160	@ 0xa0
 80081b2:	2180      	movs	r1, #128	@ 0x80
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7fd fc71 	bl	8005a9c <aci_gap_set_discoverable>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80081be:	4906      	ldr	r1, [pc, #24]	@ (80081d8 <Adv_Request+0x5c>)
 80081c0:	200e      	movs	r0, #14
 80081c2:	f7fd ff91 	bl	80060e8 <aci_gap_update_adv_data>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80081ca:	bf00      	nop
}
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200003ac 	.word	0x200003ac
 80081d8:	20000050 	.word	0x20000050

080081dc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80081e2:	f7ff fd91 	bl	8007d08 <LL_FLASH_GetUDN>
 80081e6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d023      	beq.n	8008238 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80081f0:	f7ff fda2 	bl	8007d38 <LL_FLASH_GetSTCompanyID>
 80081f4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80081f6:	f7ff fd93 	bl	8007d20 <LL_FLASH_GetDeviceID>
 80081fa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	4b16      	ldr	r3, [pc, #88]	@ (800825c <BleGetBdAddress+0x80>)
 8008202:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	0a1b      	lsrs	r3, r3, #8
 8008208:	b2da      	uxtb	r2, r3
 800820a:	4b14      	ldr	r3, [pc, #80]	@ (800825c <BleGetBdAddress+0x80>)
 800820c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	b2da      	uxtb	r2, r3
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <BleGetBdAddress+0x80>)
 8008214:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	b2da      	uxtb	r2, r3
 800821a:	4b10      	ldr	r3, [pc, #64]	@ (800825c <BleGetBdAddress+0x80>)
 800821c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	b2da      	uxtb	r2, r3
 8008224:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <BleGetBdAddress+0x80>)
 8008226:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	0c1b      	lsrs	r3, r3, #16
 800822c:	b2da      	uxtb	r2, r3
 800822e:	4b0b      	ldr	r3, [pc, #44]	@ (800825c <BleGetBdAddress+0x80>)
 8008230:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008232:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <BleGetBdAddress+0x80>)
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	e00b      	b.n	8008250 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008238:	2000      	movs	r0, #0
 800823a:	f7ff fc7f 	bl	8007b3c <OTP_Read>
 800823e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	e001      	b.n	8008250 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800824c:	4b04      	ldr	r3, [pc, #16]	@ (8008260 <BleGetBdAddress+0x84>)
 800824e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008250:	697b      	ldr	r3, [r7, #20]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	200003a4 	.word	0x200003a4
 8008260:	0800a32c 	.word	0x0800a32c

08008264 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800826a:	4b0a      	ldr	r3, [pc, #40]	@ (8008294 <Adv_Cancel+0x30>)
 800826c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008270:	2b05      	cmp	r3, #5
 8008272:	d00a      	beq.n	800828a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008274:	2392      	movs	r3, #146	@ 0x92
 8008276:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008278:	f7fd fbec 	bl	8005a54 <aci_gap_set_non_discoverable>
 800827c:	4603      	mov	r3, r0
 800827e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008280:	4b04      	ldr	r3, [pc, #16]	@ (8008294 <Adv_Cancel+0x30>)
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008288:	bf00      	nop
 800828a:	bf00      	nop
}
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200003ac 	.word	0x200003ac

08008298 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80082a0:	2100      	movs	r1, #0
 80082a2:	2002      	movs	r0, #2
 80082a4:	f000 fe56 	bl	8008f54 <UTIL_SEQ_SetTask>

  return;
 80082a8:	bf00      	nop
}
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80082b8:	2001      	movs	r0, #1
 80082ba:	f000 feb7 	bl	800902c <UTIL_SEQ_SetEvt>

  return;
 80082be:	bf00      	nop
}
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80082ce:	2001      	movs	r0, #1
 80082d0:	f000 fecc 	bl	800906c <UTIL_SEQ_WaitEvt>

  return;
 80082d4:	bf00      	nop
}
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	3308      	adds	r3, #8
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fdc2 	bl	8006e78 <SVCCTL_UserEvtRx>
 80082f4:	4603      	mov	r3, r0
 80082f6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2201      	movs	r2, #1
 8008302:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008304:	e003      	b.n	800830e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]
  return;
 800830c:	bf00      	nop
}
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <BLE_StatusNot+0x16>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d006      	beq.n	8008336 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008328:	e00b      	b.n	8008342 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800832a:	230f      	movs	r3, #15
 800832c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fe3c 	bl	8008fac <UTIL_SEQ_PauseTask>
      break;
 8008334:	e005      	b.n	8008342 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008336:	230f      	movs	r3, #15
 8008338:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 fe56 	bl	8008fec <UTIL_SEQ_ResumeTask>
      break;
 8008340:	bf00      	nop
  }

  return;
 8008342:	bf00      	nop
}
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <Task>:
void Custom_Mycharnotify_Update_Char(void);
void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void Task(void)
{
 800834a:	b480      	push	{r7}
 800834c:	af00      	add	r7, sp, #0
//	{
//		UpdateCharData[0] ^= 0x1;
//		Custom_Mycharnotify_Update_Char();
//	}
//	UTIL_SEQ_SetTask(1 << CFG_TASK, CFG_SCH_PRIO_0);
}
 800834e:	bf00      	nop
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <Task_Timer_Second>:


void Task_Timer_Second(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
	//Custom_Mycharnotify_Send_Notification();
	Custom_Mycharnotify_Update_Char();
 800835c:	f000 f83e 	bl	80083dc <Custom_Mycharnotify_Update_Char>
	UTIL_SEQ_SetTask(1 << CFG_TASK_TIMER_SECOND_ID, CFG_SCH_PRIO_0);
 8008360:	2100      	movs	r1, #0
 8008362:	2008      	movs	r0, #8
 8008364:	f000 fdf6 	bl	8008f54 <UTIL_SEQ_SetTask>
}
 8008368:	bf00      	nop
 800836a:	bd80      	pop	{r7, pc}

0800836c <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d80b      	bhi.n	8008394 <Custom_STM_App_Notification+0x28>
 800837c:	a201      	add	r2, pc, #4	@ (adr r2, 8008384 <Custom_STM_App_Notification+0x18>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008395 	.word	0x08008395
 8008388:	08008395 	.word	0x08008395
 800838c:	08008395 	.word	0x08008395
 8008390:	08008395 	.word	0x08008395

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008394:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008396:	bf00      	nop
}
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop

080083a4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <Custom_APP_Notification+0x16>
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d002      	beq.n	80083be <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80083b8:	e002      	b.n	80083c0 <Custom_APP_Notification+0x1c>
      break;
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <Custom_APP_Notification+0x1c>
      break;
 80083be:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80083c0:	bf00      	nop
}
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80083d0:	bf00      	nop
}
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySvc */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = 1;
 80083e6:	2301      	movs	r3, #1
 80083e8:	71fb      	strb	r3, [r7, #7]
  payload.current_time = (HAL_GetTick() / 1000); // Aktualizacja pola current_time
 80083ea:	f7f9 ffa1 	bl	8002330 <HAL_GetTick>
 80083ee:	4603      	mov	r3, r0
 80083f0:	4a17      	ldr	r2, [pc, #92]	@ (8008450 <Custom_Mycharnotify_Update_Char+0x74>)
 80083f2:	fba2 2303 	umull	r2, r3, r2, r3
 80083f6:	099b      	lsrs	r3, r3, #6
 80083f8:	4a16      	ldr	r2, [pc, #88]	@ (8008454 <Custom_Mycharnotify_Update_Char+0x78>)
 80083fa:	6053      	str	r3, [r2, #4]
  //        Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)&payload);
  memcpy(UpdateCharData, &payload, sizeof(payload));
 80083fc:	4b16      	ldr	r3, [pc, #88]	@ (8008458 <Custom_Mycharnotify_Update_Char+0x7c>)
 80083fe:	4a15      	ldr	r2, [pc, #84]	@ (8008454 <Custom_Mycharnotify_Update_Char+0x78>)
 8008400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008404:	e883 0003 	stmia.w	r3, {r0, r1}
  UpdateCharData[3] = (uint8_t)(payload.current_time & 0xFF);
 8008408:	4b12      	ldr	r3, [pc, #72]	@ (8008454 <Custom_Mycharnotify_Update_Char+0x78>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	b2da      	uxtb	r2, r3
 800840e:	4b12      	ldr	r3, [pc, #72]	@ (8008458 <Custom_Mycharnotify_Update_Char+0x7c>)
 8008410:	70da      	strb	r2, [r3, #3]
  UpdateCharData[4] = (uint8_t)((payload.current_time >> 8) & 0xFF);
 8008412:	4b10      	ldr	r3, [pc, #64]	@ (8008454 <Custom_Mycharnotify_Update_Char+0x78>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b2da      	uxtb	r2, r3
 800841a:	4b0f      	ldr	r3, [pc, #60]	@ (8008458 <Custom_Mycharnotify_Update_Char+0x7c>)
 800841c:	711a      	strb	r2, [r3, #4]
  UpdateCharData[5] = (uint8_t)((payload.current_time >> 16) & 0xFF);
 800841e:	4b0d      	ldr	r3, [pc, #52]	@ (8008454 <Custom_Mycharnotify_Update_Char+0x78>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	0c1b      	lsrs	r3, r3, #16
 8008424:	b2da      	uxtb	r2, r3
 8008426:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <Custom_Mycharnotify_Update_Char+0x7c>)
 8008428:	715a      	strb	r2, [r3, #5]
  UpdateCharData[6] = (uint8_t)((payload.current_time >> 24) & 0xFF);
 800842a:	4b0a      	ldr	r3, [pc, #40]	@ (8008454 <Custom_Mycharnotify_Update_Char+0x78>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	0e1b      	lsrs	r3, r3, #24
 8008430:	b2da      	uxtb	r2, r3
 8008432:	4b09      	ldr	r3, [pc, #36]	@ (8008458 <Custom_Mycharnotify_Update_Char+0x7c>)
 8008434:	719a      	strb	r2, [r3, #6]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <Custom_Mycharnotify_Update_Char+0x6a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 800843c:	4906      	ldr	r1, [pc, #24]	@ (8008458 <Custom_Mycharnotify_Update_Char+0x7c>)
 800843e:	2001      	movs	r0, #1
 8008440:	f000 f9a6 	bl	8008790 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 8008444:	bf00      	nop
 8008446:	bf00      	nop
}
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	10624dd3 	.word	0x10624dd3
 8008454:	20000434 	.word	0x20000434
 8008458:	2000043c 	.word	0x2000043c

0800845c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08e      	sub	sp, #56	@ 0x38
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008464:	2300      	movs	r3, #0
 8008466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3301      	adds	r3, #1
 800846e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8008470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2bff      	cmp	r3, #255	@ 0xff
 8008476:	f040 80cc 	bne.w	8008612 <Custom_STM_Event_Handler+0x1b6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	3302      	adds	r3, #2
 800847e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8008480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29b      	uxth	r3, r3
 8008486:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800848a:	2b1a      	cmp	r3, #26
 800848c:	f200 80bd 	bhi.w	800860a <Custom_STM_Event_Handler+0x1ae>
 8008490:	a201      	add	r2, pc, #4	@ (adr r2, 8008498 <Custom_STM_Event_Handler+0x3c>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	08008505 	.word	0x08008505
 800849c:	0800860b 	.word	0x0800860b
 80084a0:	0800860b 	.word	0x0800860b
 80084a4:	0800860b 	.word	0x0800860b
 80084a8:	0800860b 	.word	0x0800860b
 80084ac:	0800860b 	.word	0x0800860b
 80084b0:	0800860b 	.word	0x0800860b
 80084b4:	0800860b 	.word	0x0800860b
 80084b8:	0800860b 	.word	0x0800860b
 80084bc:	0800860b 	.word	0x0800860b
 80084c0:	0800860b 	.word	0x0800860b
 80084c4:	0800860b 	.word	0x0800860b
 80084c8:	0800860b 	.word	0x0800860b
 80084cc:	0800860b 	.word	0x0800860b
 80084d0:	0800860b 	.word	0x0800860b
 80084d4:	0800860b 	.word	0x0800860b
 80084d8:	0800860b 	.word	0x0800860b
 80084dc:	0800860b 	.word	0x0800860b
 80084e0:	0800860b 	.word	0x0800860b
 80084e4:	0800860b 	.word	0x0800860b
 80084e8:	0800860b 	.word	0x0800860b
 80084ec:	0800860b 	.word	0x0800860b
 80084f0:	0800860b 	.word	0x0800860b
 80084f4:	0800860b 	.word	0x0800860b
 80084f8:	0800860b 	.word	0x0800860b
 80084fc:	0800860b 	.word	0x0800860b
 8008500:	080085ed 	.word	0x080085ed
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008506:	3302      	adds	r3, #2
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	885b      	ldrh	r3, [r3, #2]
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	4b43      	ldr	r3, [pc, #268]	@ (8008620 <Custom_STM_Event_Handler+0x1c4>)
 8008514:	889b      	ldrh	r3, [r3, #4]
 8008516:	3302      	adds	r3, #2
 8008518:	429a      	cmp	r2, r3
 800851a:	d119      	bne.n	8008550 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800851c:	2301      	movs	r3, #1
 800851e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	7a1b      	ldrb	r3, [r3, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <Custom_STM_Event_Handler+0xd4>
 800852a:	2b01      	cmp	r3, #1
 800852c:	d008      	beq.n	8008540 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800852e:	e05c      	b.n	80085ea <Custom_STM_Event_Handler+0x18e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8008530:	2302      	movs	r3, #2
 8008532:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008534:	f107 0308 	add.w	r3, r7, #8
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff ff17 	bl	800836c <Custom_STM_App_Notification>
                break;
 800853e:	e054      	b.n	80085ea <Custom_STM_Event_Handler+0x18e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8008540:	2301      	movs	r3, #1
 8008542:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff ff0f 	bl	800836c <Custom_STM_App_Notification>
                break;
 800854e:	e04c      	b.n	80085ea <Custom_STM_Event_Handler+0x18e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008552:	885b      	ldrh	r3, [r3, #2]
 8008554:	b29b      	uxth	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	4b31      	ldr	r3, [pc, #196]	@ (8008620 <Custom_STM_Event_Handler+0x1c4>)
 800855a:	885b      	ldrh	r3, [r3, #2]
 800855c:	3301      	adds	r3, #1
 800855e:	429a      	cmp	r2, r3
 8008560:	d155      	bne.n	800860e <Custom_STM_Event_Handler+0x1b2>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008562:	2301      	movs	r3, #1
 8008564:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            uint8_t *bluetooth_data = attribute_modified->Attr_Data;
 8008568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856a:	3308      	adds	r3, #8
 800856c:	623b      	str	r3, [r7, #32]
            uint16_t data_length = attribute_modified->Attr_Data_Length;
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	799a      	ldrb	r2, [r3, #6]
 8008572:	79db      	ldrb	r3, [r3, #7]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	4313      	orrs	r3, r2
 8008578:	83fb      	strh	r3, [r7, #30]
            printf("Received BLE Data (Length: %d): ", data_length);
 800857a:	8bfb      	ldrh	r3, [r7, #30]
 800857c:	4619      	mov	r1, r3
 800857e:	4829      	ldr	r0, [pc, #164]	@ (8008624 <Custom_STM_Event_Handler+0x1c8>)
 8008580:	f000 fea6 	bl	80092d0 <iprintf>
            for (uint16_t i = 0; i < data_length; i++) {
 8008584:	2300      	movs	r3, #0
 8008586:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008588:	e00a      	b.n	80085a0 <Custom_STM_Event_Handler+0x144>
              printf("%02X ", bluetooth_data[i]); // Heksadecymalny format
 800858a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800858c:	6a3a      	ldr	r2, [r7, #32]
 800858e:	4413      	add	r3, r2
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	4619      	mov	r1, r3
 8008594:	4824      	ldr	r0, [pc, #144]	@ (8008628 <Custom_STM_Event_Handler+0x1cc>)
 8008596:	f000 fe9b 	bl	80092d0 <iprintf>
            for (uint16_t i = 0; i < data_length; i++) {
 800859a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800859c:	3301      	adds	r3, #1
 800859e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80085a0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80085a2:	8bfb      	ldrh	r3, [r7, #30]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d3f0      	bcc.n	800858a <Custom_STM_Event_Handler+0x12e>
            }
            printf("\n");
 80085a8:	200a      	movs	r0, #10
 80085aa:	f000 fea3 	bl	80092f4 <putchar>
            if(bluetooth_data[4]==1)
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	3304      	adds	r3, #4
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d104      	bne.n	80085c2 <Custom_STM_Event_Handler+0x166>
            {
            	HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 80085b8:	2120      	movs	r1, #32
 80085ba:	481c      	ldr	r0, [pc, #112]	@ (800862c <Custom_STM_Event_Handler+0x1d0>)
 80085bc:	f7fa fa46 	bl	8002a4c <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80085c0:	e025      	b.n	800860e <Custom_STM_Event_Handler+0x1b2>
            else if(bluetooth_data[4]==2)
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	3304      	adds	r3, #4
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d104      	bne.n	80085d6 <Custom_STM_Event_Handler+0x17a>
					HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 80085cc:	2101      	movs	r1, #1
 80085ce:	4817      	ldr	r0, [pc, #92]	@ (800862c <Custom_STM_Event_Handler+0x1d0>)
 80085d0:	f7fa fa3c 	bl	8002a4c <HAL_GPIO_TogglePin>
          break;
 80085d4:	e01b      	b.n	800860e <Custom_STM_Event_Handler+0x1b2>
            else if(bluetooth_data[4]==3)
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	3304      	adds	r3, #4
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d116      	bne.n	800860e <Custom_STM_Event_Handler+0x1b2>
                	HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 80085e0:	2102      	movs	r1, #2
 80085e2:	4812      	ldr	r0, [pc, #72]	@ (800862c <Custom_STM_Event_Handler+0x1d0>)
 80085e4:	f7fa fa32 	bl	8002a4c <HAL_GPIO_TogglePin>
          break;
 80085e8:	e011      	b.n	800860e <Custom_STM_Event_Handler+0x1b2>
 80085ea:	e010      	b.n	800860e <Custom_STM_Event_Handler+0x1b2>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80085ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ee:	3302      	adds	r3, #2
 80085f0:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff feb2 	bl	800836c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8008608:	e002      	b.n	8008610 <Custom_STM_Event_Handler+0x1b4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800860a:	bf00      	nop
 800860c:	e002      	b.n	8008614 <Custom_STM_Event_Handler+0x1b8>
          break;
 800860e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008610:	e000      	b.n	8008614 <Custom_STM_Event_Handler+0x1b8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008612:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008614:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8008618:	4618      	mov	r0, r3
 800861a:	3738      	adds	r7, #56	@ 0x38
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	2000063c 	.word	0x2000063c
 8008624:	0800a0e8 	.word	0x0800a0e8
 8008628:	0800a10c 	.word	0x0800a10c
 800862c:	48000400 	.word	0x48000400

08008630 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08c      	sub	sp, #48	@ 0x30
 8008634:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008636:	2392      	movs	r3, #146	@ 0x92
 8008638:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800863a:	484f      	ldr	r0, [pc, #316]	@ (8008778 <SVCCTL_InitCustomSvc+0x148>)
 800863c:	f7fe fc02 	bl	8006e44 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8008640:	2306      	movs	r3, #6
 8008642:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8008644:	238f      	movs	r3, #143	@ 0x8f
 8008646:	713b      	strb	r3, [r7, #4]
 8008648:	23e5      	movs	r3, #229	@ 0xe5
 800864a:	717b      	strb	r3, [r7, #5]
 800864c:	23b3      	movs	r3, #179	@ 0xb3
 800864e:	71bb      	strb	r3, [r7, #6]
 8008650:	23d5      	movs	r3, #213	@ 0xd5
 8008652:	71fb      	strb	r3, [r7, #7]
 8008654:	232e      	movs	r3, #46	@ 0x2e
 8008656:	723b      	strb	r3, [r7, #8]
 8008658:	237f      	movs	r3, #127	@ 0x7f
 800865a:	727b      	strb	r3, [r7, #9]
 800865c:	234a      	movs	r3, #74	@ 0x4a
 800865e:	72bb      	strb	r3, [r7, #10]
 8008660:	2398      	movs	r3, #152	@ 0x98
 8008662:	72fb      	strb	r3, [r7, #11]
 8008664:	232a      	movs	r3, #42	@ 0x2a
 8008666:	733b      	strb	r3, [r7, #12]
 8008668:	2348      	movs	r3, #72	@ 0x48
 800866a:	737b      	strb	r3, [r7, #13]
 800866c:	237a      	movs	r3, #122	@ 0x7a
 800866e:	73bb      	strb	r3, [r7, #14]
 8008670:	23cc      	movs	r3, #204	@ 0xcc
 8008672:	73fb      	strb	r3, [r7, #15]
 8008674:	2300      	movs	r3, #0
 8008676:	743b      	strb	r3, [r7, #16]
 8008678:	2300      	movs	r3, #0
 800867a:	747b      	strb	r3, [r7, #17]
 800867c:	2300      	movs	r3, #0
 800867e:	74bb      	strb	r3, [r7, #18]
 8008680:	2300      	movs	r3, #0
 8008682:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008684:	7dbb      	ldrb	r3, [r7, #22]
 8008686:	1d39      	adds	r1, r7, #4
 8008688:	4a3c      	ldr	r2, [pc, #240]	@ (800877c <SVCCTL_InitCustomSvc+0x14c>)
 800868a:	9200      	str	r2, [sp, #0]
 800868c:	2201      	movs	r2, #1
 800868e:	2002      	movs	r0, #2
 8008690:	f7fd fe4c 	bl	800632c <aci_gatt_add_service>
 8008694:	4603      	mov	r3, r0
 8008696:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8008698:	2319      	movs	r3, #25
 800869a:	713b      	strb	r3, [r7, #4]
 800869c:	23ed      	movs	r3, #237	@ 0xed
 800869e:	717b      	strb	r3, [r7, #5]
 80086a0:	2382      	movs	r3, #130	@ 0x82
 80086a2:	71bb      	strb	r3, [r7, #6]
 80086a4:	23ae      	movs	r3, #174	@ 0xae
 80086a6:	71fb      	strb	r3, [r7, #7]
 80086a8:	23ed      	movs	r3, #237	@ 0xed
 80086aa:	723b      	strb	r3, [r7, #8]
 80086ac:	2321      	movs	r3, #33	@ 0x21
 80086ae:	727b      	strb	r3, [r7, #9]
 80086b0:	234c      	movs	r3, #76	@ 0x4c
 80086b2:	72bb      	strb	r3, [r7, #10]
 80086b4:	239d      	movs	r3, #157	@ 0x9d
 80086b6:	72fb      	strb	r3, [r7, #11]
 80086b8:	2341      	movs	r3, #65	@ 0x41
 80086ba:	733b      	strb	r3, [r7, #12]
 80086bc:	2345      	movs	r3, #69	@ 0x45
 80086be:	737b      	strb	r3, [r7, #13]
 80086c0:	2322      	movs	r3, #34	@ 0x22
 80086c2:	73bb      	strb	r3, [r7, #14]
 80086c4:	238e      	movs	r3, #142	@ 0x8e
 80086c6:	73fb      	strb	r3, [r7, #15]
 80086c8:	2300      	movs	r3, #0
 80086ca:	743b      	strb	r3, [r7, #16]
 80086cc:	2300      	movs	r3, #0
 80086ce:	747b      	strb	r3, [r7, #17]
 80086d0:	2300      	movs	r3, #0
 80086d2:	74bb      	strb	r3, [r7, #18]
 80086d4:	2300      	movs	r3, #0
 80086d6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 80086d8:	4b28      	ldr	r3, [pc, #160]	@ (800877c <SVCCTL_InitCustomSvc+0x14c>)
 80086da:	8818      	ldrh	r0, [r3, #0]
 80086dc:	4b28      	ldr	r3, [pc, #160]	@ (8008780 <SVCCTL_InitCustomSvc+0x150>)
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	1d3a      	adds	r2, r7, #4
 80086e2:	4928      	ldr	r1, [pc, #160]	@ (8008784 <SVCCTL_InitCustomSvc+0x154>)
 80086e4:	9105      	str	r1, [sp, #20]
 80086e6:	2100      	movs	r1, #0
 80086e8:	9104      	str	r1, [sp, #16]
 80086ea:	2110      	movs	r1, #16
 80086ec:	9103      	str	r1, [sp, #12]
 80086ee:	2101      	movs	r1, #1
 80086f0:	9102      	str	r1, [sp, #8]
 80086f2:	2100      	movs	r1, #0
 80086f4:	9101      	str	r1, [sp, #4]
 80086f6:	2108      	movs	r1, #8
 80086f8:	9100      	str	r1, [sp, #0]
 80086fa:	2102      	movs	r1, #2
 80086fc:	f7fd feec 	bl	80064d8 <aci_gatt_add_char>
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8008704:	2319      	movs	r3, #25
 8008706:	713b      	strb	r3, [r7, #4]
 8008708:	23ed      	movs	r3, #237	@ 0xed
 800870a:	717b      	strb	r3, [r7, #5]
 800870c:	2382      	movs	r3, #130	@ 0x82
 800870e:	71bb      	strb	r3, [r7, #6]
 8008710:	23ae      	movs	r3, #174	@ 0xae
 8008712:	71fb      	strb	r3, [r7, #7]
 8008714:	23ed      	movs	r3, #237	@ 0xed
 8008716:	723b      	strb	r3, [r7, #8]
 8008718:	2321      	movs	r3, #33	@ 0x21
 800871a:	727b      	strb	r3, [r7, #9]
 800871c:	234c      	movs	r3, #76	@ 0x4c
 800871e:	72bb      	strb	r3, [r7, #10]
 8008720:	239d      	movs	r3, #157	@ 0x9d
 8008722:	72fb      	strb	r3, [r7, #11]
 8008724:	2341      	movs	r3, #65	@ 0x41
 8008726:	733b      	strb	r3, [r7, #12]
 8008728:	2345      	movs	r3, #69	@ 0x45
 800872a:	737b      	strb	r3, [r7, #13]
 800872c:	2322      	movs	r3, #34	@ 0x22
 800872e:	73bb      	strb	r3, [r7, #14]
 8008730:	238e      	movs	r3, #142	@ 0x8e
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	2300      	movs	r3, #0
 8008736:	743b      	strb	r3, [r7, #16]
 8008738:	2310      	movs	r3, #16
 800873a:	747b      	strb	r3, [r7, #17]
 800873c:	2300      	movs	r3, #0
 800873e:	74bb      	strb	r3, [r7, #18]
 8008740:	2300      	movs	r3, #0
 8008742:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8008744:	4b0d      	ldr	r3, [pc, #52]	@ (800877c <SVCCTL_InitCustomSvc+0x14c>)
 8008746:	8818      	ldrh	r0, [r3, #0]
 8008748:	4b0f      	ldr	r3, [pc, #60]	@ (8008788 <SVCCTL_InitCustomSvc+0x158>)
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	1d3a      	adds	r2, r7, #4
 800874e:	490f      	ldr	r1, [pc, #60]	@ (800878c <SVCCTL_InitCustomSvc+0x15c>)
 8008750:	9105      	str	r1, [sp, #20]
 8008752:	2100      	movs	r1, #0
 8008754:	9104      	str	r1, [sp, #16]
 8008756:	2110      	movs	r1, #16
 8008758:	9103      	str	r1, [sp, #12]
 800875a:	210f      	movs	r1, #15
 800875c:	9102      	str	r1, [sp, #8]
 800875e:	2100      	movs	r1, #0
 8008760:	9101      	str	r1, [sp, #4]
 8008762:	2110      	movs	r1, #16
 8008764:	9100      	str	r1, [sp, #0]
 8008766:	2102      	movs	r1, #2
 8008768:	f7fd feb6 	bl	80064d8 <aci_gatt_add_char>
 800876c:	4603      	mov	r3, r0
 800876e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008770:	bf00      	nop
}
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	0800845d 	.word	0x0800845d
 800877c:	2000063c 	.word	0x2000063c
 8008780:	2000005e 	.word	0x2000005e
 8008784:	2000063e 	.word	0x2000063e
 8008788:	20000060 	.word	0x20000060
 800878c:	20000640 	.word	0x20000640

08008790 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af02      	add	r7, sp, #8
 8008796:	4603      	mov	r3, r0
 8008798:	6039      	str	r1, [r7, #0]
 800879a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800879c:	2392      	movs	r3, #146	@ 0x92
 800879e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <Custom_STM_App_Update_Char+0x1c>
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d010      	beq.n	80087cc <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 80087aa:	e01f      	b.n	80087ec <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 80087ac:	4b12      	ldr	r3, [pc, #72]	@ (80087f8 <Custom_STM_App_Update_Char+0x68>)
 80087ae:	8818      	ldrh	r0, [r3, #0]
 80087b0:	4b11      	ldr	r3, [pc, #68]	@ (80087f8 <Custom_STM_App_Update_Char+0x68>)
 80087b2:	8859      	ldrh	r1, [r3, #2]
 80087b4:	4b11      	ldr	r3, [pc, #68]	@ (80087fc <Custom_STM_App_Update_Char+0x6c>)
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	4613      	mov	r3, r2
 80087c0:	2200      	movs	r2, #0
 80087c2:	f7fd ff91 	bl	80066e8 <aci_gatt_update_char_value>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73fb      	strb	r3, [r7, #15]
      break;
 80087ca:	e00f      	b.n	80087ec <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 80087cc:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <Custom_STM_App_Update_Char+0x68>)
 80087ce:	8818      	ldrh	r0, [r3, #0]
 80087d0:	4b09      	ldr	r3, [pc, #36]	@ (80087f8 <Custom_STM_App_Update_Char+0x68>)
 80087d2:	8899      	ldrh	r1, [r3, #4]
 80087d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008800 <Custom_STM_App_Update_Char+0x70>)
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	4613      	mov	r3, r2
 80087e0:	2200      	movs	r2, #0
 80087e2:	f7fd ff81 	bl	80066e8 <aci_gatt_update_char_value>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]
      break;
 80087ea:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	2000063c 	.word	0x2000063c
 80087fc:	2000005e 	.word	0x2000005e
 8008800:	20000060 	.word	0x20000060

08008804 <LL_PWR_EnableBootC2>:
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008808:	4b05      	ldr	r3, [pc, #20]	@ (8008820 <LL_PWR_EnableBootC2+0x1c>)
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	4a04      	ldr	r2, [pc, #16]	@ (8008820 <LL_PWR_EnableBootC2+0x1c>)
 800880e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008812:	60d3      	str	r3, [r2, #12]
}
 8008814:	bf00      	nop
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	58000400 	.word	0x58000400

08008824 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800882c:	4b06      	ldr	r3, [pc, #24]	@ (8008848 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800882e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008832:	4905      	ldr	r1, [pc, #20]	@ (8008848 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4313      	orrs	r3, r2
 8008838:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	58000800 	.word	0x58000800

0800884c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008854:	4b05      	ldr	r3, [pc, #20]	@ (800886c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008856:	6a1a      	ldr	r2, [r3, #32]
 8008858:	4904      	ldr	r1, [pc, #16]	@ (800886c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4313      	orrs	r3, r2
 800885e:	620b      	str	r3, [r1, #32]
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	58000800 	.word	0x58000800

08008870 <LL_AHB3_GRP1_EnableClock>:
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800887c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800887e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4313      	orrs	r3, r2
 8008886:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800888c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4013      	ands	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008894:	68fb      	ldr	r3, [r7, #12]
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b085      	sub	sp, #20
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80088aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088ae:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80088b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80088be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088c2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4013      	ands	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80088cc:	68fb      	ldr	r3, [r7, #12]
}
 80088ce:	bf00      	nop
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f043 0201 	orr.w	r2, r3, #1
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	43db      	mvns	r3, r3
 800892e:	401a      	ands	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	605a      	str	r2, [r3, #4]
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	041b      	lsls	r3, r3, #16
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	605a      	str	r2, [r3, #4]
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	43db      	mvns	r3, r3
 8008976:	401a      	ands	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	605a      	str	r2, [r3, #4]
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	609a      	str	r2, [r3, #8]
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	041a      	lsls	r2, r3, #16
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	609a      	str	r2, [r3, #8]
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	4013      	ands	r3, r2
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d101      	bne.n	80089de <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69da      	ldr	r2, [r3, #28]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	4013      	ands	r3, r2
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d101      	bne.n	8008a08 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
	...

08008a18 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008a1c:	2102      	movs	r1, #2
 8008a1e:	4818      	ldr	r0, [pc, #96]	@ (8008a80 <HW_IPCC_Rx_Handler+0x68>)
 8008a20:	f7ff ffe4 	bl	80089ec <LL_C2_IPCC_IsActiveFlag_CHx>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <HW_IPCC_Rx_Handler+0x24>
 8008a2a:	4b15      	ldr	r3, [pc, #84]	@ (8008a80 <HW_IPCC_Rx_Handler+0x68>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8008a36:	f000 f8d5 	bl	8008be4 <HW_IPCC_SYS_EvtHandler>
 8008a3a:	e01e      	b.n	8008a7a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	4810      	ldr	r0, [pc, #64]	@ (8008a80 <HW_IPCC_Rx_Handler+0x68>)
 8008a40:	f7ff ffd4 	bl	80089ec <LL_C2_IPCC_IsActiveFlag_CHx>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d008      	beq.n	8008a5c <HW_IPCC_Rx_Handler+0x44>
 8008a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a80 <HW_IPCC_Rx_Handler+0x68>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8008a56:	f000 f889 	bl	8008b6c <HW_IPCC_BLE_EvtHandler>
 8008a5a:	e00e      	b.n	8008a7a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008a5c:	2108      	movs	r1, #8
 8008a5e:	4808      	ldr	r0, [pc, #32]	@ (8008a80 <HW_IPCC_Rx_Handler+0x68>)
 8008a60:	f7ff ffc4 	bl	80089ec <LL_C2_IPCC_IsActiveFlag_CHx>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d008      	beq.n	8008a7c <HW_IPCC_Rx_Handler+0x64>
 8008a6a:	4b05      	ldr	r3, [pc, #20]	@ (8008a80 <HW_IPCC_Rx_Handler+0x68>)
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008a76:	f000 f901 	bl	8008c7c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
}
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	58000c00 	.word	0x58000c00

08008a84 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008a88:	2102      	movs	r1, #2
 8008a8a:	4818      	ldr	r0, [pc, #96]	@ (8008aec <HW_IPCC_Tx_Handler+0x68>)
 8008a8c:	f7ff ff99 	bl	80089c2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d108      	bne.n	8008aa8 <HW_IPCC_Tx_Handler+0x24>
 8008a96:	4b15      	ldr	r3, [pc, #84]	@ (8008aec <HW_IPCC_Tx_Handler+0x68>)
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d102      	bne.n	8008aa8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008aa2:	f000 f893 	bl	8008bcc <HW_IPCC_SYS_CmdEvtHandler>
 8008aa6:	e01e      	b.n	8008ae6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008aa8:	2108      	movs	r1, #8
 8008aaa:	4810      	ldr	r0, [pc, #64]	@ (8008aec <HW_IPCC_Tx_Handler+0x68>)
 8008aac:	f7ff ff89 	bl	80089c2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d108      	bne.n	8008ac8 <HW_IPCC_Tx_Handler+0x44>
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8008aec <HW_IPCC_Tx_Handler+0x68>)
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008ac2:	f000 f8bd 	bl	8008c40 <HW_IPCC_MM_FreeBufHandler>
 8008ac6:	e00e      	b.n	8008ae6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008ac8:	2120      	movs	r1, #32
 8008aca:	4808      	ldr	r0, [pc, #32]	@ (8008aec <HW_IPCC_Tx_Handler+0x68>)
 8008acc:	f7ff ff79 	bl	80089c2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d108      	bne.n	8008ae8 <HW_IPCC_Tx_Handler+0x64>
 8008ad6:	4b05      	ldr	r3, [pc, #20]	@ (8008aec <HW_IPCC_Tx_Handler+0x68>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d102      	bne.n	8008ae8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008ae2:	f000 f84f 	bl	8008b84 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
}
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	58000c00 	.word	0x58000c00

08008af0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008af4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008af8:	f7ff fed3 	bl	80088a2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008afc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008b00:	f7ff fea4 	bl	800884c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008b04:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008b08:	f7ff fe8c 	bl	8008824 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008b0c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008b0e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008b10:	f7ff fe78 	bl	8008804 <LL_PWR_EnableBootC2>

  return;
 8008b14:	bf00      	nop
}
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008b1c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008b20:	f7ff fea6 	bl	8008870 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008b24:	4806      	ldr	r0, [pc, #24]	@ (8008b40 <HW_IPCC_Init+0x28>)
 8008b26:	f7ff fee8 	bl	80088fa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008b2a:	4805      	ldr	r0, [pc, #20]	@ (8008b40 <HW_IPCC_Init+0x28>)
 8008b2c:	f7ff fed5 	bl	80088da <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008b30:	202c      	movs	r0, #44	@ 0x2c
 8008b32:	f7f9 fd6a 	bl	800260a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008b36:	202d      	movs	r0, #45	@ 0x2d
 8008b38:	f7f9 fd67 	bl	800260a <HAL_NVIC_EnableIRQ>

  return;
 8008b3c:	bf00      	nop
}
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	58000c00 	.word	0x58000c00

08008b44 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008b48:	2101      	movs	r1, #1
 8008b4a:	4802      	ldr	r0, [pc, #8]	@ (8008b54 <HW_IPCC_BLE_Init+0x10>)
 8008b4c:	f7ff ff0a 	bl	8008964 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008b50:	bf00      	nop
}
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	58000c00 	.word	0x58000c00

08008b58 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4802      	ldr	r0, [pc, #8]	@ (8008b68 <HW_IPCC_BLE_SendCmd+0x10>)
 8008b60:	f7ff ff20 	bl	80089a4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008b64:	bf00      	nop
}
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	58000c00 	.word	0x58000c00

08008b6c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008b70:	f7fe fe2c 	bl	80077cc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008b74:	2101      	movs	r1, #1
 8008b76:	4802      	ldr	r0, [pc, #8]	@ (8008b80 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008b78:	f7ff ff06 	bl	8008988 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008b7c:	bf00      	nop
}
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	58000c00 	.word	0x58000c00

08008b84 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008b88:	2120      	movs	r1, #32
 8008b8a:	4803      	ldr	r0, [pc, #12]	@ (8008b98 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008b8c:	f7ff fed8 	bl	8008940 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008b90:	f7fe fe4c 	bl	800782c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008b94:	bf00      	nop
}
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	58000c00 	.word	0x58000c00

08008b9c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	4802      	ldr	r0, [pc, #8]	@ (8008bac <HW_IPCC_SYS_Init+0x10>)
 8008ba4:	f7ff fede 	bl	8008964 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008ba8:	bf00      	nop
}
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	58000c00 	.word	0x58000c00

08008bb0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008bb4:	2102      	movs	r1, #2
 8008bb6:	4804      	ldr	r0, [pc, #16]	@ (8008bc8 <HW_IPCC_SYS_SendCmd+0x18>)
 8008bb8:	f7ff fef4 	bl	80089a4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008bbc:	2102      	movs	r1, #2
 8008bbe:	4802      	ldr	r0, [pc, #8]	@ (8008bc8 <HW_IPCC_SYS_SendCmd+0x18>)
 8008bc0:	f7ff feab 	bl	800891a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008bc4:	bf00      	nop
}
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	58000c00 	.word	0x58000c00

08008bcc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	4803      	ldr	r0, [pc, #12]	@ (8008be0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008bd4:	f7ff feb4 	bl	8008940 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008bd8:	f7fe fe78 	bl	80078cc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008bdc:	bf00      	nop
}
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	58000c00 	.word	0x58000c00

08008be4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008be8:	f7fe fe86 	bl	80078f8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008bec:	2102      	movs	r1, #2
 8008bee:	4802      	ldr	r0, [pc, #8]	@ (8008bf8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008bf0:	f7ff feca 	bl	8008988 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008bf4:	bf00      	nop
}
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	58000c00 	.word	0x58000c00

08008bfc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008c04:	2108      	movs	r1, #8
 8008c06:	480c      	ldr	r0, [pc, #48]	@ (8008c38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008c08:	f7ff fedb 	bl	80089c2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d007      	beq.n	8008c22 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008c12:	4a0a      	ldr	r2, [pc, #40]	@ (8008c3c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008c18:	2108      	movs	r1, #8
 8008c1a:	4807      	ldr	r0, [pc, #28]	@ (8008c38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008c1c:	f7ff fe7d 	bl	800891a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008c20:	e006      	b.n	8008c30 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008c26:	2108      	movs	r1, #8
 8008c28:	4803      	ldr	r0, [pc, #12]	@ (8008c38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008c2a:	f7ff febb 	bl	80089a4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008c2e:	bf00      	nop
}
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	58000c00 	.word	0x58000c00
 8008c3c:	20000644 	.word	0x20000644

08008c40 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008c44:	2108      	movs	r1, #8
 8008c46:	4806      	ldr	r0, [pc, #24]	@ (8008c60 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008c48:	f7ff fe7a 	bl	8008940 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008c4c:	4b05      	ldr	r3, [pc, #20]	@ (8008c64 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008c52:	2108      	movs	r1, #8
 8008c54:	4802      	ldr	r0, [pc, #8]	@ (8008c60 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008c56:	f7ff fea5 	bl	80089a4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008c5a:	bf00      	nop
}
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	58000c00 	.word	0x58000c00
 8008c64:	20000644 	.word	0x20000644

08008c68 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008c6c:	2108      	movs	r1, #8
 8008c6e:	4802      	ldr	r0, [pc, #8]	@ (8008c78 <HW_IPCC_TRACES_Init+0x10>)
 8008c70:	f7ff fe78 	bl	8008964 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008c74:	bf00      	nop
}
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	58000c00 	.word	0x58000c00

08008c7c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008c80:	f7fe fee2 	bl	8007a48 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008c84:	2108      	movs	r1, #8
 8008c86:	4802      	ldr	r0, [pc, #8]	@ (8008c90 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008c88:	f7ff fe7e 	bl	8008988 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008c8c:	bf00      	nop
}
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	58000c00 	.word	0x58000c00

08008c94 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008c98:	4b05      	ldr	r3, [pc, #20]	@ (8008cb0 <UTIL_LPM_Init+0x1c>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008c9e:	4b05      	ldr	r3, [pc, #20]	@ (8008cb4 <UTIL_LPM_Init+0x20>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008ca4:	bf00      	nop
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	20000648 	.word	0x20000648
 8008cb4:	2000064c 	.word	0x2000064c

08008cb8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8008cc8:	613b      	str	r3, [r7, #16]
  return(result);
 8008cca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008ccc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cce:	b672      	cpsid	i
}
 8008cd0:	bf00      	nop
  
  switch(state)
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d008      	beq.n	8008cea <UTIL_LPM_SetOffMode+0x32>
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d10e      	bne.n	8008cfa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <UTIL_LPM_SetOffMode+0x5c>)
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8008d14 <UTIL_LPM_SetOffMode+0x5c>)
 8008ce6:	6013      	str	r3, [r2, #0]
      break;
 8008ce8:	e008      	b.n	8008cfc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	43da      	mvns	r2, r3
 8008cee:	4b09      	ldr	r3, [pc, #36]	@ (8008d14 <UTIL_LPM_SetOffMode+0x5c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	4a07      	ldr	r2, [pc, #28]	@ (8008d14 <UTIL_LPM_SetOffMode+0x5c>)
 8008cf6:	6013      	str	r3, [r2, #0]
      break;
 8008cf8:	e000      	b.n	8008cfc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008cfa:	bf00      	nop
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f383 8810 	msr	PRIMASK, r3
}
 8008d06:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008d08:	bf00      	nop
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	2000064c 	.word	0x2000064c

08008d18 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b090      	sub	sp, #64	@ 0x40
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008d20:	4b73      	ldr	r3, [pc, #460]	@ (8008ef0 <UTIL_SEQ_Run+0x1d8>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8008d26:	4b72      	ldr	r3, [pc, #456]	@ (8008ef0 <UTIL_SEQ_Run+0x1d8>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	4a70      	ldr	r2, [pc, #448]	@ (8008ef0 <UTIL_SEQ_Run+0x1d8>)
 8008d30:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008d32:	4b70      	ldr	r3, [pc, #448]	@ (8008ef4 <UTIL_SEQ_Run+0x1dc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008d38:	4b6f      	ldr	r3, [pc, #444]	@ (8008ef8 <UTIL_SEQ_Run+0x1e0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008d3e:	4b6f      	ldr	r3, [pc, #444]	@ (8008efc <UTIL_SEQ_Run+0x1e4>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008d44:	4b6e      	ldr	r3, [pc, #440]	@ (8008f00 <UTIL_SEQ_Run+0x1e8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008d4a:	e08d      	b.n	8008e68 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008d50:	e002      	b.n	8008d58 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d54:	3301      	adds	r3, #1
 8008d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008d58:	4a6a      	ldr	r2, [pc, #424]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d62:	401a      	ands	r2, r3
 8008d64:	4b62      	ldr	r3, [pc, #392]	@ (8008ef0 <UTIL_SEQ_Run+0x1d8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f1      	beq.n	8008d52 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008d6e:	4a65      	ldr	r2, [pc, #404]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d72:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	401a      	ands	r2, r3
 8008d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8008ef0 <UTIL_SEQ_Run+0x1d8>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008d82:	4a60      	ldr	r2, [pc, #384]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	4413      	add	r3, r2
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8e:	4013      	ands	r3, r2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d106      	bne.n	8008da2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008d94:	4a5b      	ldr	r2, [pc, #364]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008da0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008da2:	4a58      	ldr	r2, [pc, #352]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	4413      	add	r3, r2
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dae:	4013      	ands	r3, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 f9b3 	bl	800911c <SEQ_BitPosition>
 8008db6:	4603      	mov	r3, r0
 8008db8:	461a      	mov	r2, r3
 8008dba:	4b53      	ldr	r3, [pc, #332]	@ (8008f08 <UTIL_SEQ_Run+0x1f0>)
 8008dbc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008dbe:	4a51      	ldr	r2, [pc, #324]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	4413      	add	r3, r2
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8008f08 <UTIL_SEQ_Run+0x1f0>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2101      	movs	r1, #1
 8008dce:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd2:	43db      	mvns	r3, r3
 8008dd4:	401a      	ands	r2, r3
 8008dd6:	494b      	ldr	r1, [pc, #300]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	440b      	add	r3, r1
 8008dde:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de0:	f3ef 8310 	mrs	r3, PRIMASK
 8008de4:	61bb      	str	r3, [r7, #24]
  return(result);
 8008de6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008de8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dea:	b672      	cpsid	i
}
 8008dec:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008dee:	4b46      	ldr	r3, [pc, #280]	@ (8008f08 <UTIL_SEQ_Run+0x1f0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2201      	movs	r2, #1
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	43da      	mvns	r2, r3
 8008dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef4 <UTIL_SEQ_Run+0x1dc>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	4a3c      	ldr	r2, [pc, #240]	@ (8008ef4 <UTIL_SEQ_Run+0x1dc>)
 8008e02:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008e04:	2301      	movs	r3, #1
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e08:	e013      	b.n	8008e32 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008e10:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008e14:	4b3c      	ldr	r3, [pc, #240]	@ (8008f08 <UTIL_SEQ_Run+0x1f0>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e1e:	43da      	mvns	r2, r3
 8008e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e22:	3b01      	subs	r3, #1
 8008e24:	400a      	ands	r2, r1
 8008e26:	4937      	ldr	r1, [pc, #220]	@ (8008f04 <UTIL_SEQ_Run+0x1ec>)
 8008e28:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e8      	bne.n	8008e0a <UTIL_SEQ_Run+0xf2>
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f383 8810 	msr	PRIMASK, r3
}
 8008e42:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008e44:	4b30      	ldr	r3, [pc, #192]	@ (8008f08 <UTIL_SEQ_Run+0x1f0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a30      	ldr	r2, [pc, #192]	@ (8008f0c <UTIL_SEQ_Run+0x1f4>)
 8008e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e4e:	4798      	blx	r3

    local_taskset = TaskSet;
 8008e50:	4b28      	ldr	r3, [pc, #160]	@ (8008ef4 <UTIL_SEQ_Run+0x1dc>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8008e56:	4b28      	ldr	r3, [pc, #160]	@ (8008ef8 <UTIL_SEQ_Run+0x1e0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008e5c:	4b27      	ldr	r3, [pc, #156]	@ (8008efc <UTIL_SEQ_Run+0x1e4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8008e62:	4b27      	ldr	r3, [pc, #156]	@ (8008f00 <UTIL_SEQ_Run+0x1e8>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008e68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	401a      	ands	r2, r3
 8008e6e:	4b20      	ldr	r3, [pc, #128]	@ (8008ef0 <UTIL_SEQ_Run+0x1d8>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4013      	ands	r3, r2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <UTIL_SEQ_Run+0x16c>
 8008e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f43f af64 	beq.w	8008d4c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008e84:	4b20      	ldr	r3, [pc, #128]	@ (8008f08 <UTIL_SEQ_Run+0x1f0>)
 8008e86:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008e8c:	f000 f938 	bl	8009100 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e90:	f3ef 8310 	mrs	r3, PRIMASK
 8008e94:	613b      	str	r3, [r7, #16]
  return(result);
 8008e96:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e9a:	b672      	cpsid	i
}
 8008e9c:	bf00      	nop
  local_taskset = TaskSet;
 8008e9e:	4b15      	ldr	r3, [pc, #84]	@ (8008ef4 <UTIL_SEQ_Run+0x1dc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008ea4:	4b14      	ldr	r3, [pc, #80]	@ (8008ef8 <UTIL_SEQ_Run+0x1e0>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008eaa:	4b14      	ldr	r3, [pc, #80]	@ (8008efc <UTIL_SEQ_Run+0x1e4>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008eb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	401a      	ands	r2, r3
 8008eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef0 <UTIL_SEQ_Run+0x1d8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d107      	bne.n	8008ed0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f00 <UTIL_SEQ_Run+0x1e8>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008ecc:	f7f7 fd51 	bl	8000972 <UTIL_SEQ_Idle>
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f383 8810 	msr	PRIMASK, r3
}
 8008eda:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008edc:	f000 f917 	bl	800910e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008ee0:	4a03      	ldr	r2, [pc, #12]	@ (8008ef0 <UTIL_SEQ_Run+0x1d8>)
 8008ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee4:	6013      	str	r3, [r2, #0]

  return;
 8008ee6:	bf00      	nop
}
 8008ee8:	3740      	adds	r7, #64	@ 0x40
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000068 	.word	0x20000068
 8008ef4:	20000650 	.word	0x20000650
 8008ef8:	20000654 	.word	0x20000654
 8008efc:	20000064 	.word	0x20000064
 8008f00:	20000658 	.word	0x20000658
 8008f04:	200006e0 	.word	0x200006e0
 8008f08:	2000065c 	.word	0x2000065c
 8008f0c:	20000660 	.word	0x20000660

08008f10 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f20:	617b      	str	r3, [r7, #20]
  return(result);
 8008f22:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008f24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f26:	b672      	cpsid	i
}
 8008f28:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f8f6 	bl	800911c <SEQ_BitPosition>
 8008f30:	4603      	mov	r3, r0
 8008f32:	4619      	mov	r1, r3
 8008f34:	4a06      	ldr	r2, [pc, #24]	@ (8008f50 <UTIL_SEQ_RegTask+0x40>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f383 8810 	msr	PRIMASK, r3
}
 8008f46:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008f48:	bf00      	nop
}
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20000660 	.word	0x20000660

08008f54 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f62:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f64:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008f66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f68:	b672      	cpsid	i
}
 8008f6a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa4 <UTIL_SEQ_SetTask+0x50>)
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	4a0b      	ldr	r2, [pc, #44]	@ (8008fa4 <UTIL_SEQ_SetTask+0x50>)
 8008f76:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008f78:	4a0b      	ldr	r2, [pc, #44]	@ (8008fa8 <UTIL_SEQ_SetTask+0x54>)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	431a      	orrs	r2, r3
 8008f84:	4908      	ldr	r1, [pc, #32]	@ (8008fa8 <UTIL_SEQ_SetTask+0x54>)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f383 8810 	msr	PRIMASK, r3
}
 8008f96:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008f98:	bf00      	nop
}
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	20000650 	.word	0x20000650
 8008fa8:	200006e0 	.word	0x200006e0

08008fac <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008fbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fbe:	b672      	cpsid	i
}
 8008fc0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	43da      	mvns	r2, r3
 8008fc6:	4b08      	ldr	r3, [pc, #32]	@ (8008fe8 <UTIL_SEQ_PauseTask+0x3c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	4a06      	ldr	r2, [pc, #24]	@ (8008fe8 <UTIL_SEQ_PauseTask+0x3c>)
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f383 8810 	msr	PRIMASK, r3
}
 8008fda:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008fdc:	bf00      	nop
}
 8008fde:	371c      	adds	r7, #28
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	20000064 	.word	0x20000064

08008fec <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ff8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008ffc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ffe:	b672      	cpsid	i
}
 8009000:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009002:	4b09      	ldr	r3, [pc, #36]	@ (8009028 <UTIL_SEQ_ResumeTask+0x3c>)
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4313      	orrs	r3, r2
 800900a:	4a07      	ldr	r2, [pc, #28]	@ (8009028 <UTIL_SEQ_ResumeTask+0x3c>)
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f383 8810 	msr	PRIMASK, r3
}
 8009018:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800901a:	bf00      	nop
}
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	20000064 	.word	0x20000064

0800902c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009034:	f3ef 8310 	mrs	r3, PRIMASK
 8009038:	60fb      	str	r3, [r7, #12]
  return(result);
 800903a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800903c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800903e:	b672      	cpsid	i
}
 8009040:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009042:	4b09      	ldr	r3, [pc, #36]	@ (8009068 <UTIL_SEQ_SetEvt+0x3c>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4313      	orrs	r3, r2
 800904a:	4a07      	ldr	r2, [pc, #28]	@ (8009068 <UTIL_SEQ_SetEvt+0x3c>)
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f383 8810 	msr	PRIMASK, r3
}
 8009058:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800905a:	bf00      	nop
}
 800905c:	371c      	adds	r7, #28
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	20000654 	.word	0x20000654

0800906c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009074:	4b1f      	ldr	r3, [pc, #124]	@ (80090f4 <UTIL_SEQ_WaitEvt+0x88>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800907a:	4b1e      	ldr	r3, [pc, #120]	@ (80090f4 <UTIL_SEQ_WaitEvt+0x88>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009082:	d102      	bne.n	800908a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009084:	2300      	movs	r3, #0
 8009086:	61fb      	str	r3, [r7, #28]
 8009088:	e005      	b.n	8009096 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800908a:	4b1a      	ldr	r3, [pc, #104]	@ (80090f4 <UTIL_SEQ_WaitEvt+0x88>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2201      	movs	r2, #1
 8009090:	fa02 f303 	lsl.w	r3, r2, r3
 8009094:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009096:	4b18      	ldr	r3, [pc, #96]	@ (80090f8 <UTIL_SEQ_WaitEvt+0x8c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800909c:	4a16      	ldr	r2, [pc, #88]	@ (80090f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80090a2:	e003      	b.n	80090ac <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80090a4:	6879      	ldr	r1, [r7, #4]
 80090a6:	69f8      	ldr	r0, [r7, #28]
 80090a8:	f7f7 fc6a 	bl	8000980 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80090ac:	4b13      	ldr	r3, [pc, #76]	@ (80090fc <UTIL_SEQ_WaitEvt+0x90>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4013      	ands	r3, r2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0f5      	beq.n	80090a4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80090b8:	4a0e      	ldr	r2, [pc, #56]	@ (80090f4 <UTIL_SEQ_WaitEvt+0x88>)
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090be:	f3ef 8310 	mrs	r3, PRIMASK
 80090c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80090c4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80090c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80090c8:	b672      	cpsid	i
}
 80090ca:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	43da      	mvns	r2, r3
 80090d0:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <UTIL_SEQ_WaitEvt+0x90>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4013      	ands	r3, r2
 80090d6:	4a09      	ldr	r2, [pc, #36]	@ (80090fc <UTIL_SEQ_WaitEvt+0x90>)
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f383 8810 	msr	PRIMASK, r3
}
 80090e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80090e6:	4a04      	ldr	r2, [pc, #16]	@ (80090f8 <UTIL_SEQ_WaitEvt+0x8c>)
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	6013      	str	r3, [r2, #0]
  return;
 80090ec:	bf00      	nop
}
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	2000065c 	.word	0x2000065c
 80090f8:	20000658 	.word	0x20000658
 80090fc:	20000654 	.word	0x20000654

08009100 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009104:	bf00      	nop
}
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800910e:	b480      	push	{r7}
 8009110:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009112:	bf00      	nop
}
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <SEQ_BitPosition+0x16>
    return 32U;
 800912e:	2320      	movs	r3, #32
 8009130:	e003      	b.n	800913a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	fab3 f383 	clz	r3, r3
 8009138:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800913a:	f1c3 031f 	rsb	r3, r3, #31
 800913e:	b2db      	uxtb	r3, r3
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <std>:
 800914c:	2300      	movs	r3, #0
 800914e:	b510      	push	{r4, lr}
 8009150:	4604      	mov	r4, r0
 8009152:	e9c0 3300 	strd	r3, r3, [r0]
 8009156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800915a:	6083      	str	r3, [r0, #8]
 800915c:	8181      	strh	r1, [r0, #12]
 800915e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009160:	81c2      	strh	r2, [r0, #14]
 8009162:	6183      	str	r3, [r0, #24]
 8009164:	4619      	mov	r1, r3
 8009166:	2208      	movs	r2, #8
 8009168:	305c      	adds	r0, #92	@ 0x5c
 800916a:	f000 f90e 	bl	800938a <memset>
 800916e:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <std+0x58>)
 8009170:	6263      	str	r3, [r4, #36]	@ 0x24
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <std+0x5c>)
 8009174:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009176:	4b0d      	ldr	r3, [pc, #52]	@ (80091ac <std+0x60>)
 8009178:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800917a:	4b0d      	ldr	r3, [pc, #52]	@ (80091b0 <std+0x64>)
 800917c:	6323      	str	r3, [r4, #48]	@ 0x30
 800917e:	4b0d      	ldr	r3, [pc, #52]	@ (80091b4 <std+0x68>)
 8009180:	6224      	str	r4, [r4, #32]
 8009182:	429c      	cmp	r4, r3
 8009184:	d006      	beq.n	8009194 <std+0x48>
 8009186:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800918a:	4294      	cmp	r4, r2
 800918c:	d002      	beq.n	8009194 <std+0x48>
 800918e:	33d0      	adds	r3, #208	@ 0xd0
 8009190:	429c      	cmp	r4, r3
 8009192:	d105      	bne.n	80091a0 <std+0x54>
 8009194:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800919c:	f000 b96e 	b.w	800947c <__retarget_lock_init_recursive>
 80091a0:	bd10      	pop	{r4, pc}
 80091a2:	bf00      	nop
 80091a4:	08009305 	.word	0x08009305
 80091a8:	08009327 	.word	0x08009327
 80091ac:	0800935f 	.word	0x0800935f
 80091b0:	08009383 	.word	0x08009383
 80091b4:	200006e8 	.word	0x200006e8

080091b8 <stdio_exit_handler>:
 80091b8:	4a02      	ldr	r2, [pc, #8]	@ (80091c4 <stdio_exit_handler+0xc>)
 80091ba:	4903      	ldr	r1, [pc, #12]	@ (80091c8 <stdio_exit_handler+0x10>)
 80091bc:	4803      	ldr	r0, [pc, #12]	@ (80091cc <stdio_exit_handler+0x14>)
 80091be:	f000 b869 	b.w	8009294 <_fwalk_sglue>
 80091c2:	bf00      	nop
 80091c4:	2000006c 	.word	0x2000006c
 80091c8:	08009d39 	.word	0x08009d39
 80091cc:	2000007c 	.word	0x2000007c

080091d0 <cleanup_stdio>:
 80091d0:	6841      	ldr	r1, [r0, #4]
 80091d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <cleanup_stdio+0x34>)
 80091d4:	4299      	cmp	r1, r3
 80091d6:	b510      	push	{r4, lr}
 80091d8:	4604      	mov	r4, r0
 80091da:	d001      	beq.n	80091e0 <cleanup_stdio+0x10>
 80091dc:	f000 fdac 	bl	8009d38 <_fflush_r>
 80091e0:	68a1      	ldr	r1, [r4, #8]
 80091e2:	4b09      	ldr	r3, [pc, #36]	@ (8009208 <cleanup_stdio+0x38>)
 80091e4:	4299      	cmp	r1, r3
 80091e6:	d002      	beq.n	80091ee <cleanup_stdio+0x1e>
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fda5 	bl	8009d38 <_fflush_r>
 80091ee:	68e1      	ldr	r1, [r4, #12]
 80091f0:	4b06      	ldr	r3, [pc, #24]	@ (800920c <cleanup_stdio+0x3c>)
 80091f2:	4299      	cmp	r1, r3
 80091f4:	d004      	beq.n	8009200 <cleanup_stdio+0x30>
 80091f6:	4620      	mov	r0, r4
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fc:	f000 bd9c 	b.w	8009d38 <_fflush_r>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	bf00      	nop
 8009204:	200006e8 	.word	0x200006e8
 8009208:	20000750 	.word	0x20000750
 800920c:	200007b8 	.word	0x200007b8

08009210 <global_stdio_init.part.0>:
 8009210:	b510      	push	{r4, lr}
 8009212:	4b0b      	ldr	r3, [pc, #44]	@ (8009240 <global_stdio_init.part.0+0x30>)
 8009214:	4c0b      	ldr	r4, [pc, #44]	@ (8009244 <global_stdio_init.part.0+0x34>)
 8009216:	4a0c      	ldr	r2, [pc, #48]	@ (8009248 <global_stdio_init.part.0+0x38>)
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	4620      	mov	r0, r4
 800921c:	2200      	movs	r2, #0
 800921e:	2104      	movs	r1, #4
 8009220:	f7ff ff94 	bl	800914c <std>
 8009224:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009228:	2201      	movs	r2, #1
 800922a:	2109      	movs	r1, #9
 800922c:	f7ff ff8e 	bl	800914c <std>
 8009230:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009234:	2202      	movs	r2, #2
 8009236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800923a:	2112      	movs	r1, #18
 800923c:	f7ff bf86 	b.w	800914c <std>
 8009240:	20000820 	.word	0x20000820
 8009244:	200006e8 	.word	0x200006e8
 8009248:	080091b9 	.word	0x080091b9

0800924c <__sfp_lock_acquire>:
 800924c:	4801      	ldr	r0, [pc, #4]	@ (8009254 <__sfp_lock_acquire+0x8>)
 800924e:	f000 b916 	b.w	800947e <__retarget_lock_acquire_recursive>
 8009252:	bf00      	nop
 8009254:	20000829 	.word	0x20000829

08009258 <__sfp_lock_release>:
 8009258:	4801      	ldr	r0, [pc, #4]	@ (8009260 <__sfp_lock_release+0x8>)
 800925a:	f000 b911 	b.w	8009480 <__retarget_lock_release_recursive>
 800925e:	bf00      	nop
 8009260:	20000829 	.word	0x20000829

08009264 <__sinit>:
 8009264:	b510      	push	{r4, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	f7ff fff0 	bl	800924c <__sfp_lock_acquire>
 800926c:	6a23      	ldr	r3, [r4, #32]
 800926e:	b11b      	cbz	r3, 8009278 <__sinit+0x14>
 8009270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009274:	f7ff bff0 	b.w	8009258 <__sfp_lock_release>
 8009278:	4b04      	ldr	r3, [pc, #16]	@ (800928c <__sinit+0x28>)
 800927a:	6223      	str	r3, [r4, #32]
 800927c:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <__sinit+0x2c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f5      	bne.n	8009270 <__sinit+0xc>
 8009284:	f7ff ffc4 	bl	8009210 <global_stdio_init.part.0>
 8009288:	e7f2      	b.n	8009270 <__sinit+0xc>
 800928a:	bf00      	nop
 800928c:	080091d1 	.word	0x080091d1
 8009290:	20000820 	.word	0x20000820

08009294 <_fwalk_sglue>:
 8009294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009298:	4607      	mov	r7, r0
 800929a:	4688      	mov	r8, r1
 800929c:	4614      	mov	r4, r2
 800929e:	2600      	movs	r6, #0
 80092a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092a4:	f1b9 0901 	subs.w	r9, r9, #1
 80092a8:	d505      	bpl.n	80092b6 <_fwalk_sglue+0x22>
 80092aa:	6824      	ldr	r4, [r4, #0]
 80092ac:	2c00      	cmp	r4, #0
 80092ae:	d1f7      	bne.n	80092a0 <_fwalk_sglue+0xc>
 80092b0:	4630      	mov	r0, r6
 80092b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d907      	bls.n	80092cc <_fwalk_sglue+0x38>
 80092bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092c0:	3301      	adds	r3, #1
 80092c2:	d003      	beq.n	80092cc <_fwalk_sglue+0x38>
 80092c4:	4629      	mov	r1, r5
 80092c6:	4638      	mov	r0, r7
 80092c8:	47c0      	blx	r8
 80092ca:	4306      	orrs	r6, r0
 80092cc:	3568      	adds	r5, #104	@ 0x68
 80092ce:	e7e9      	b.n	80092a4 <_fwalk_sglue+0x10>

080092d0 <iprintf>:
 80092d0:	b40f      	push	{r0, r1, r2, r3}
 80092d2:	b507      	push	{r0, r1, r2, lr}
 80092d4:	4906      	ldr	r1, [pc, #24]	@ (80092f0 <iprintf+0x20>)
 80092d6:	ab04      	add	r3, sp, #16
 80092d8:	6808      	ldr	r0, [r1, #0]
 80092da:	f853 2b04 	ldr.w	r2, [r3], #4
 80092de:	6881      	ldr	r1, [r0, #8]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	f000 f9ff 	bl	80096e4 <_vfiprintf_r>
 80092e6:	b003      	add	sp, #12
 80092e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ec:	b004      	add	sp, #16
 80092ee:	4770      	bx	lr
 80092f0:	20000078 	.word	0x20000078

080092f4 <putchar>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	@ (8009300 <putchar+0xc>)
 80092f6:	4601      	mov	r1, r0
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	6882      	ldr	r2, [r0, #8]
 80092fc:	f000 bd44 	b.w	8009d88 <_putc_r>
 8009300:	20000078 	.word	0x20000078

08009304 <__sread>:
 8009304:	b510      	push	{r4, lr}
 8009306:	460c      	mov	r4, r1
 8009308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800930c:	f000 f868 	bl	80093e0 <_read_r>
 8009310:	2800      	cmp	r0, #0
 8009312:	bfab      	itete	ge
 8009314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009316:	89a3      	ldrhlt	r3, [r4, #12]
 8009318:	181b      	addge	r3, r3, r0
 800931a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800931e:	bfac      	ite	ge
 8009320:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009322:	81a3      	strhlt	r3, [r4, #12]
 8009324:	bd10      	pop	{r4, pc}

08009326 <__swrite>:
 8009326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	461f      	mov	r7, r3
 800932c:	898b      	ldrh	r3, [r1, #12]
 800932e:	05db      	lsls	r3, r3, #23
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
 8009334:	4616      	mov	r6, r2
 8009336:	d505      	bpl.n	8009344 <__swrite+0x1e>
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	2302      	movs	r3, #2
 800933e:	2200      	movs	r2, #0
 8009340:	f000 f83c 	bl	80093bc <_lseek_r>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	4632      	mov	r2, r6
 8009352:	463b      	mov	r3, r7
 8009354:	4628      	mov	r0, r5
 8009356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800935a:	f000 b853 	b.w	8009404 <_write_r>

0800935e <__sseek>:
 800935e:	b510      	push	{r4, lr}
 8009360:	460c      	mov	r4, r1
 8009362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009366:	f000 f829 	bl	80093bc <_lseek_r>
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	bf15      	itete	ne
 8009370:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800937a:	81a3      	strheq	r3, [r4, #12]
 800937c:	bf18      	it	ne
 800937e:	81a3      	strhne	r3, [r4, #12]
 8009380:	bd10      	pop	{r4, pc}

08009382 <__sclose>:
 8009382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009386:	f000 b809 	b.w	800939c <_close_r>

0800938a <memset>:
 800938a:	4402      	add	r2, r0
 800938c:	4603      	mov	r3, r0
 800938e:	4293      	cmp	r3, r2
 8009390:	d100      	bne.n	8009394 <memset+0xa>
 8009392:	4770      	bx	lr
 8009394:	f803 1b01 	strb.w	r1, [r3], #1
 8009398:	e7f9      	b.n	800938e <memset+0x4>
	...

0800939c <_close_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4d06      	ldr	r5, [pc, #24]	@ (80093b8 <_close_r+0x1c>)
 80093a0:	2300      	movs	r3, #0
 80093a2:	4604      	mov	r4, r0
 80093a4:	4608      	mov	r0, r1
 80093a6:	602b      	str	r3, [r5, #0]
 80093a8:	f7f8 fd61 	bl	8001e6e <_close>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d102      	bne.n	80093b6 <_close_r+0x1a>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	b103      	cbz	r3, 80093b6 <_close_r+0x1a>
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	20000824 	.word	0x20000824

080093bc <_lseek_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4d07      	ldr	r5, [pc, #28]	@ (80093dc <_lseek_r+0x20>)
 80093c0:	4604      	mov	r4, r0
 80093c2:	4608      	mov	r0, r1
 80093c4:	4611      	mov	r1, r2
 80093c6:	2200      	movs	r2, #0
 80093c8:	602a      	str	r2, [r5, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f7f8 fd76 	bl	8001ebc <_lseek>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_lseek_r+0x1e>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_lseek_r+0x1e>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20000824 	.word	0x20000824

080093e0 <_read_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d07      	ldr	r5, [pc, #28]	@ (8009400 <_read_r+0x20>)
 80093e4:	4604      	mov	r4, r0
 80093e6:	4608      	mov	r0, r1
 80093e8:	4611      	mov	r1, r2
 80093ea:	2200      	movs	r2, #0
 80093ec:	602a      	str	r2, [r5, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	f7f8 fd04 	bl	8001dfc <_read>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_read_r+0x1e>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_read_r+0x1e>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20000824 	.word	0x20000824

08009404 <_write_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	@ (8009424 <_write_r+0x20>)
 8009408:	4604      	mov	r4, r0
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	2200      	movs	r2, #0
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f8 fd0f 	bl	8001e36 <_write>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_write_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_write_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20000824 	.word	0x20000824

08009428 <__errno>:
 8009428:	4b01      	ldr	r3, [pc, #4]	@ (8009430 <__errno+0x8>)
 800942a:	6818      	ldr	r0, [r3, #0]
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	20000078 	.word	0x20000078

08009434 <__libc_init_array>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	4d0d      	ldr	r5, [pc, #52]	@ (800946c <__libc_init_array+0x38>)
 8009438:	4c0d      	ldr	r4, [pc, #52]	@ (8009470 <__libc_init_array+0x3c>)
 800943a:	1b64      	subs	r4, r4, r5
 800943c:	10a4      	asrs	r4, r4, #2
 800943e:	2600      	movs	r6, #0
 8009440:	42a6      	cmp	r6, r4
 8009442:	d109      	bne.n	8009458 <__libc_init_array+0x24>
 8009444:	4d0b      	ldr	r5, [pc, #44]	@ (8009474 <__libc_init_array+0x40>)
 8009446:	4c0c      	ldr	r4, [pc, #48]	@ (8009478 <__libc_init_array+0x44>)
 8009448:	f000 fdfa 	bl	800a040 <_init>
 800944c:	1b64      	subs	r4, r4, r5
 800944e:	10a4      	asrs	r4, r4, #2
 8009450:	2600      	movs	r6, #0
 8009452:	42a6      	cmp	r6, r4
 8009454:	d105      	bne.n	8009462 <__libc_init_array+0x2e>
 8009456:	bd70      	pop	{r4, r5, r6, pc}
 8009458:	f855 3b04 	ldr.w	r3, [r5], #4
 800945c:	4798      	blx	r3
 800945e:	3601      	adds	r6, #1
 8009460:	e7ee      	b.n	8009440 <__libc_init_array+0xc>
 8009462:	f855 3b04 	ldr.w	r3, [r5], #4
 8009466:	4798      	blx	r3
 8009468:	3601      	adds	r6, #1
 800946a:	e7f2      	b.n	8009452 <__libc_init_array+0x1e>
 800946c:	0800a390 	.word	0x0800a390
 8009470:	0800a390 	.word	0x0800a390
 8009474:	0800a390 	.word	0x0800a390
 8009478:	0800a394 	.word	0x0800a394

0800947c <__retarget_lock_init_recursive>:
 800947c:	4770      	bx	lr

0800947e <__retarget_lock_acquire_recursive>:
 800947e:	4770      	bx	lr

08009480 <__retarget_lock_release_recursive>:
 8009480:	4770      	bx	lr

08009482 <memcpy>:
 8009482:	440a      	add	r2, r1
 8009484:	4291      	cmp	r1, r2
 8009486:	f100 33ff 	add.w	r3, r0, #4294967295
 800948a:	d100      	bne.n	800948e <memcpy+0xc>
 800948c:	4770      	bx	lr
 800948e:	b510      	push	{r4, lr}
 8009490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009498:	4291      	cmp	r1, r2
 800949a:	d1f9      	bne.n	8009490 <memcpy+0xe>
 800949c:	bd10      	pop	{r4, pc}
	...

080094a0 <_free_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4605      	mov	r5, r0
 80094a4:	2900      	cmp	r1, #0
 80094a6:	d041      	beq.n	800952c <_free_r+0x8c>
 80094a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ac:	1f0c      	subs	r4, r1, #4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	bfb8      	it	lt
 80094b2:	18e4      	addlt	r4, r4, r3
 80094b4:	f000 f8e0 	bl	8009678 <__malloc_lock>
 80094b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009530 <_free_r+0x90>)
 80094ba:	6813      	ldr	r3, [r2, #0]
 80094bc:	b933      	cbnz	r3, 80094cc <_free_r+0x2c>
 80094be:	6063      	str	r3, [r4, #4]
 80094c0:	6014      	str	r4, [r2, #0]
 80094c2:	4628      	mov	r0, r5
 80094c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094c8:	f000 b8dc 	b.w	8009684 <__malloc_unlock>
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	d908      	bls.n	80094e2 <_free_r+0x42>
 80094d0:	6820      	ldr	r0, [r4, #0]
 80094d2:	1821      	adds	r1, r4, r0
 80094d4:	428b      	cmp	r3, r1
 80094d6:	bf01      	itttt	eq
 80094d8:	6819      	ldreq	r1, [r3, #0]
 80094da:	685b      	ldreq	r3, [r3, #4]
 80094dc:	1809      	addeq	r1, r1, r0
 80094de:	6021      	streq	r1, [r4, #0]
 80094e0:	e7ed      	b.n	80094be <_free_r+0x1e>
 80094e2:	461a      	mov	r2, r3
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	b10b      	cbz	r3, 80094ec <_free_r+0x4c>
 80094e8:	42a3      	cmp	r3, r4
 80094ea:	d9fa      	bls.n	80094e2 <_free_r+0x42>
 80094ec:	6811      	ldr	r1, [r2, #0]
 80094ee:	1850      	adds	r0, r2, r1
 80094f0:	42a0      	cmp	r0, r4
 80094f2:	d10b      	bne.n	800950c <_free_r+0x6c>
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	4401      	add	r1, r0
 80094f8:	1850      	adds	r0, r2, r1
 80094fa:	4283      	cmp	r3, r0
 80094fc:	6011      	str	r1, [r2, #0]
 80094fe:	d1e0      	bne.n	80094c2 <_free_r+0x22>
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	6053      	str	r3, [r2, #4]
 8009506:	4408      	add	r0, r1
 8009508:	6010      	str	r0, [r2, #0]
 800950a:	e7da      	b.n	80094c2 <_free_r+0x22>
 800950c:	d902      	bls.n	8009514 <_free_r+0x74>
 800950e:	230c      	movs	r3, #12
 8009510:	602b      	str	r3, [r5, #0]
 8009512:	e7d6      	b.n	80094c2 <_free_r+0x22>
 8009514:	6820      	ldr	r0, [r4, #0]
 8009516:	1821      	adds	r1, r4, r0
 8009518:	428b      	cmp	r3, r1
 800951a:	bf04      	itt	eq
 800951c:	6819      	ldreq	r1, [r3, #0]
 800951e:	685b      	ldreq	r3, [r3, #4]
 8009520:	6063      	str	r3, [r4, #4]
 8009522:	bf04      	itt	eq
 8009524:	1809      	addeq	r1, r1, r0
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	6054      	str	r4, [r2, #4]
 800952a:	e7ca      	b.n	80094c2 <_free_r+0x22>
 800952c:	bd38      	pop	{r3, r4, r5, pc}
 800952e:	bf00      	nop
 8009530:	20000830 	.word	0x20000830

08009534 <sbrk_aligned>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	4e0f      	ldr	r6, [pc, #60]	@ (8009574 <sbrk_aligned+0x40>)
 8009538:	460c      	mov	r4, r1
 800953a:	6831      	ldr	r1, [r6, #0]
 800953c:	4605      	mov	r5, r0
 800953e:	b911      	cbnz	r1, 8009546 <sbrk_aligned+0x12>
 8009540:	f000 fcea 	bl	8009f18 <_sbrk_r>
 8009544:	6030      	str	r0, [r6, #0]
 8009546:	4621      	mov	r1, r4
 8009548:	4628      	mov	r0, r5
 800954a:	f000 fce5 	bl	8009f18 <_sbrk_r>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	d103      	bne.n	800955a <sbrk_aligned+0x26>
 8009552:	f04f 34ff 	mov.w	r4, #4294967295
 8009556:	4620      	mov	r0, r4
 8009558:	bd70      	pop	{r4, r5, r6, pc}
 800955a:	1cc4      	adds	r4, r0, #3
 800955c:	f024 0403 	bic.w	r4, r4, #3
 8009560:	42a0      	cmp	r0, r4
 8009562:	d0f8      	beq.n	8009556 <sbrk_aligned+0x22>
 8009564:	1a21      	subs	r1, r4, r0
 8009566:	4628      	mov	r0, r5
 8009568:	f000 fcd6 	bl	8009f18 <_sbrk_r>
 800956c:	3001      	adds	r0, #1
 800956e:	d1f2      	bne.n	8009556 <sbrk_aligned+0x22>
 8009570:	e7ef      	b.n	8009552 <sbrk_aligned+0x1e>
 8009572:	bf00      	nop
 8009574:	2000082c 	.word	0x2000082c

08009578 <_malloc_r>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	1ccd      	adds	r5, r1, #3
 800957e:	f025 0503 	bic.w	r5, r5, #3
 8009582:	3508      	adds	r5, #8
 8009584:	2d0c      	cmp	r5, #12
 8009586:	bf38      	it	cc
 8009588:	250c      	movcc	r5, #12
 800958a:	2d00      	cmp	r5, #0
 800958c:	4606      	mov	r6, r0
 800958e:	db01      	blt.n	8009594 <_malloc_r+0x1c>
 8009590:	42a9      	cmp	r1, r5
 8009592:	d904      	bls.n	800959e <_malloc_r+0x26>
 8009594:	230c      	movs	r3, #12
 8009596:	6033      	str	r3, [r6, #0]
 8009598:	2000      	movs	r0, #0
 800959a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800959e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009674 <_malloc_r+0xfc>
 80095a2:	f000 f869 	bl	8009678 <__malloc_lock>
 80095a6:	f8d8 3000 	ldr.w	r3, [r8]
 80095aa:	461c      	mov	r4, r3
 80095ac:	bb44      	cbnz	r4, 8009600 <_malloc_r+0x88>
 80095ae:	4629      	mov	r1, r5
 80095b0:	4630      	mov	r0, r6
 80095b2:	f7ff ffbf 	bl	8009534 <sbrk_aligned>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	4604      	mov	r4, r0
 80095ba:	d158      	bne.n	800966e <_malloc_r+0xf6>
 80095bc:	f8d8 4000 	ldr.w	r4, [r8]
 80095c0:	4627      	mov	r7, r4
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	d143      	bne.n	800964e <_malloc_r+0xd6>
 80095c6:	2c00      	cmp	r4, #0
 80095c8:	d04b      	beq.n	8009662 <_malloc_r+0xea>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	4639      	mov	r1, r7
 80095ce:	4630      	mov	r0, r6
 80095d0:	eb04 0903 	add.w	r9, r4, r3
 80095d4:	f000 fca0 	bl	8009f18 <_sbrk_r>
 80095d8:	4581      	cmp	r9, r0
 80095da:	d142      	bne.n	8009662 <_malloc_r+0xea>
 80095dc:	6821      	ldr	r1, [r4, #0]
 80095de:	1a6d      	subs	r5, r5, r1
 80095e0:	4629      	mov	r1, r5
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7ff ffa6 	bl	8009534 <sbrk_aligned>
 80095e8:	3001      	adds	r0, #1
 80095ea:	d03a      	beq.n	8009662 <_malloc_r+0xea>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	442b      	add	r3, r5
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	f8d8 3000 	ldr.w	r3, [r8]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	bb62      	cbnz	r2, 8009654 <_malloc_r+0xdc>
 80095fa:	f8c8 7000 	str.w	r7, [r8]
 80095fe:	e00f      	b.n	8009620 <_malloc_r+0xa8>
 8009600:	6822      	ldr	r2, [r4, #0]
 8009602:	1b52      	subs	r2, r2, r5
 8009604:	d420      	bmi.n	8009648 <_malloc_r+0xd0>
 8009606:	2a0b      	cmp	r2, #11
 8009608:	d917      	bls.n	800963a <_malloc_r+0xc2>
 800960a:	1961      	adds	r1, r4, r5
 800960c:	42a3      	cmp	r3, r4
 800960e:	6025      	str	r5, [r4, #0]
 8009610:	bf18      	it	ne
 8009612:	6059      	strne	r1, [r3, #4]
 8009614:	6863      	ldr	r3, [r4, #4]
 8009616:	bf08      	it	eq
 8009618:	f8c8 1000 	streq.w	r1, [r8]
 800961c:	5162      	str	r2, [r4, r5]
 800961e:	604b      	str	r3, [r1, #4]
 8009620:	4630      	mov	r0, r6
 8009622:	f000 f82f 	bl	8009684 <__malloc_unlock>
 8009626:	f104 000b 	add.w	r0, r4, #11
 800962a:	1d23      	adds	r3, r4, #4
 800962c:	f020 0007 	bic.w	r0, r0, #7
 8009630:	1ac2      	subs	r2, r0, r3
 8009632:	bf1c      	itt	ne
 8009634:	1a1b      	subne	r3, r3, r0
 8009636:	50a3      	strne	r3, [r4, r2]
 8009638:	e7af      	b.n	800959a <_malloc_r+0x22>
 800963a:	6862      	ldr	r2, [r4, #4]
 800963c:	42a3      	cmp	r3, r4
 800963e:	bf0c      	ite	eq
 8009640:	f8c8 2000 	streq.w	r2, [r8]
 8009644:	605a      	strne	r2, [r3, #4]
 8009646:	e7eb      	b.n	8009620 <_malloc_r+0xa8>
 8009648:	4623      	mov	r3, r4
 800964a:	6864      	ldr	r4, [r4, #4]
 800964c:	e7ae      	b.n	80095ac <_malloc_r+0x34>
 800964e:	463c      	mov	r4, r7
 8009650:	687f      	ldr	r7, [r7, #4]
 8009652:	e7b6      	b.n	80095c2 <_malloc_r+0x4a>
 8009654:	461a      	mov	r2, r3
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	42a3      	cmp	r3, r4
 800965a:	d1fb      	bne.n	8009654 <_malloc_r+0xdc>
 800965c:	2300      	movs	r3, #0
 800965e:	6053      	str	r3, [r2, #4]
 8009660:	e7de      	b.n	8009620 <_malloc_r+0xa8>
 8009662:	230c      	movs	r3, #12
 8009664:	6033      	str	r3, [r6, #0]
 8009666:	4630      	mov	r0, r6
 8009668:	f000 f80c 	bl	8009684 <__malloc_unlock>
 800966c:	e794      	b.n	8009598 <_malloc_r+0x20>
 800966e:	6005      	str	r5, [r0, #0]
 8009670:	e7d6      	b.n	8009620 <_malloc_r+0xa8>
 8009672:	bf00      	nop
 8009674:	20000830 	.word	0x20000830

08009678 <__malloc_lock>:
 8009678:	4801      	ldr	r0, [pc, #4]	@ (8009680 <__malloc_lock+0x8>)
 800967a:	f7ff bf00 	b.w	800947e <__retarget_lock_acquire_recursive>
 800967e:	bf00      	nop
 8009680:	20000828 	.word	0x20000828

08009684 <__malloc_unlock>:
 8009684:	4801      	ldr	r0, [pc, #4]	@ (800968c <__malloc_unlock+0x8>)
 8009686:	f7ff befb 	b.w	8009480 <__retarget_lock_release_recursive>
 800968a:	bf00      	nop
 800968c:	20000828 	.word	0x20000828

08009690 <__sfputc_r>:
 8009690:	6893      	ldr	r3, [r2, #8]
 8009692:	3b01      	subs	r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	b410      	push	{r4}
 8009698:	6093      	str	r3, [r2, #8]
 800969a:	da08      	bge.n	80096ae <__sfputc_r+0x1e>
 800969c:	6994      	ldr	r4, [r2, #24]
 800969e:	42a3      	cmp	r3, r4
 80096a0:	db01      	blt.n	80096a6 <__sfputc_r+0x16>
 80096a2:	290a      	cmp	r1, #10
 80096a4:	d103      	bne.n	80096ae <__sfputc_r+0x1e>
 80096a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096aa:	f000 bba1 	b.w	8009df0 <__swbuf_r>
 80096ae:	6813      	ldr	r3, [r2, #0]
 80096b0:	1c58      	adds	r0, r3, #1
 80096b2:	6010      	str	r0, [r2, #0]
 80096b4:	7019      	strb	r1, [r3, #0]
 80096b6:	4608      	mov	r0, r1
 80096b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096bc:	4770      	bx	lr

080096be <__sfputs_r>:
 80096be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c0:	4606      	mov	r6, r0
 80096c2:	460f      	mov	r7, r1
 80096c4:	4614      	mov	r4, r2
 80096c6:	18d5      	adds	r5, r2, r3
 80096c8:	42ac      	cmp	r4, r5
 80096ca:	d101      	bne.n	80096d0 <__sfputs_r+0x12>
 80096cc:	2000      	movs	r0, #0
 80096ce:	e007      	b.n	80096e0 <__sfputs_r+0x22>
 80096d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d4:	463a      	mov	r2, r7
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7ff ffda 	bl	8009690 <__sfputc_r>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d1f3      	bne.n	80096c8 <__sfputs_r+0xa>
 80096e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096e4 <_vfiprintf_r>:
 80096e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e8:	460d      	mov	r5, r1
 80096ea:	b09d      	sub	sp, #116	@ 0x74
 80096ec:	4614      	mov	r4, r2
 80096ee:	4698      	mov	r8, r3
 80096f0:	4606      	mov	r6, r0
 80096f2:	b118      	cbz	r0, 80096fc <_vfiprintf_r+0x18>
 80096f4:	6a03      	ldr	r3, [r0, #32]
 80096f6:	b90b      	cbnz	r3, 80096fc <_vfiprintf_r+0x18>
 80096f8:	f7ff fdb4 	bl	8009264 <__sinit>
 80096fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096fe:	07d9      	lsls	r1, r3, #31
 8009700:	d405      	bmi.n	800970e <_vfiprintf_r+0x2a>
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	059a      	lsls	r2, r3, #22
 8009706:	d402      	bmi.n	800970e <_vfiprintf_r+0x2a>
 8009708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800970a:	f7ff feb8 	bl	800947e <__retarget_lock_acquire_recursive>
 800970e:	89ab      	ldrh	r3, [r5, #12]
 8009710:	071b      	lsls	r3, r3, #28
 8009712:	d501      	bpl.n	8009718 <_vfiprintf_r+0x34>
 8009714:	692b      	ldr	r3, [r5, #16]
 8009716:	b99b      	cbnz	r3, 8009740 <_vfiprintf_r+0x5c>
 8009718:	4629      	mov	r1, r5
 800971a:	4630      	mov	r0, r6
 800971c:	f000 fba6 	bl	8009e6c <__swsetup_r>
 8009720:	b170      	cbz	r0, 8009740 <_vfiprintf_r+0x5c>
 8009722:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009724:	07dc      	lsls	r4, r3, #31
 8009726:	d504      	bpl.n	8009732 <_vfiprintf_r+0x4e>
 8009728:	f04f 30ff 	mov.w	r0, #4294967295
 800972c:	b01d      	add	sp, #116	@ 0x74
 800972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	0598      	lsls	r0, r3, #22
 8009736:	d4f7      	bmi.n	8009728 <_vfiprintf_r+0x44>
 8009738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800973a:	f7ff fea1 	bl	8009480 <__retarget_lock_release_recursive>
 800973e:	e7f3      	b.n	8009728 <_vfiprintf_r+0x44>
 8009740:	2300      	movs	r3, #0
 8009742:	9309      	str	r3, [sp, #36]	@ 0x24
 8009744:	2320      	movs	r3, #32
 8009746:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800974a:	f8cd 800c 	str.w	r8, [sp, #12]
 800974e:	2330      	movs	r3, #48	@ 0x30
 8009750:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009900 <_vfiprintf_r+0x21c>
 8009754:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009758:	f04f 0901 	mov.w	r9, #1
 800975c:	4623      	mov	r3, r4
 800975e:	469a      	mov	sl, r3
 8009760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009764:	b10a      	cbz	r2, 800976a <_vfiprintf_r+0x86>
 8009766:	2a25      	cmp	r2, #37	@ 0x25
 8009768:	d1f9      	bne.n	800975e <_vfiprintf_r+0x7a>
 800976a:	ebba 0b04 	subs.w	fp, sl, r4
 800976e:	d00b      	beq.n	8009788 <_vfiprintf_r+0xa4>
 8009770:	465b      	mov	r3, fp
 8009772:	4622      	mov	r2, r4
 8009774:	4629      	mov	r1, r5
 8009776:	4630      	mov	r0, r6
 8009778:	f7ff ffa1 	bl	80096be <__sfputs_r>
 800977c:	3001      	adds	r0, #1
 800977e:	f000 80a7 	beq.w	80098d0 <_vfiprintf_r+0x1ec>
 8009782:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009784:	445a      	add	r2, fp
 8009786:	9209      	str	r2, [sp, #36]	@ 0x24
 8009788:	f89a 3000 	ldrb.w	r3, [sl]
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 809f 	beq.w	80098d0 <_vfiprintf_r+0x1ec>
 8009792:	2300      	movs	r3, #0
 8009794:	f04f 32ff 	mov.w	r2, #4294967295
 8009798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800979c:	f10a 0a01 	add.w	sl, sl, #1
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	9307      	str	r3, [sp, #28]
 80097a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80097aa:	4654      	mov	r4, sl
 80097ac:	2205      	movs	r2, #5
 80097ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b2:	4853      	ldr	r0, [pc, #332]	@ (8009900 <_vfiprintf_r+0x21c>)
 80097b4:	f7f6 fcec 	bl	8000190 <memchr>
 80097b8:	9a04      	ldr	r2, [sp, #16]
 80097ba:	b9d8      	cbnz	r0, 80097f4 <_vfiprintf_r+0x110>
 80097bc:	06d1      	lsls	r1, r2, #27
 80097be:	bf44      	itt	mi
 80097c0:	2320      	movmi	r3, #32
 80097c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097c6:	0713      	lsls	r3, r2, #28
 80097c8:	bf44      	itt	mi
 80097ca:	232b      	movmi	r3, #43	@ 0x2b
 80097cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097d0:	f89a 3000 	ldrb.w	r3, [sl]
 80097d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097d6:	d015      	beq.n	8009804 <_vfiprintf_r+0x120>
 80097d8:	9a07      	ldr	r2, [sp, #28]
 80097da:	4654      	mov	r4, sl
 80097dc:	2000      	movs	r0, #0
 80097de:	f04f 0c0a 	mov.w	ip, #10
 80097e2:	4621      	mov	r1, r4
 80097e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e8:	3b30      	subs	r3, #48	@ 0x30
 80097ea:	2b09      	cmp	r3, #9
 80097ec:	d94b      	bls.n	8009886 <_vfiprintf_r+0x1a2>
 80097ee:	b1b0      	cbz	r0, 800981e <_vfiprintf_r+0x13a>
 80097f0:	9207      	str	r2, [sp, #28]
 80097f2:	e014      	b.n	800981e <_vfiprintf_r+0x13a>
 80097f4:	eba0 0308 	sub.w	r3, r0, r8
 80097f8:	fa09 f303 	lsl.w	r3, r9, r3
 80097fc:	4313      	orrs	r3, r2
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	46a2      	mov	sl, r4
 8009802:	e7d2      	b.n	80097aa <_vfiprintf_r+0xc6>
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	1d19      	adds	r1, r3, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	9103      	str	r1, [sp, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	bfbb      	ittet	lt
 8009810:	425b      	neglt	r3, r3
 8009812:	f042 0202 	orrlt.w	r2, r2, #2
 8009816:	9307      	strge	r3, [sp, #28]
 8009818:	9307      	strlt	r3, [sp, #28]
 800981a:	bfb8      	it	lt
 800981c:	9204      	strlt	r2, [sp, #16]
 800981e:	7823      	ldrb	r3, [r4, #0]
 8009820:	2b2e      	cmp	r3, #46	@ 0x2e
 8009822:	d10a      	bne.n	800983a <_vfiprintf_r+0x156>
 8009824:	7863      	ldrb	r3, [r4, #1]
 8009826:	2b2a      	cmp	r3, #42	@ 0x2a
 8009828:	d132      	bne.n	8009890 <_vfiprintf_r+0x1ac>
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	1d1a      	adds	r2, r3, #4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	9203      	str	r2, [sp, #12]
 8009832:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009836:	3402      	adds	r4, #2
 8009838:	9305      	str	r3, [sp, #20]
 800983a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009910 <_vfiprintf_r+0x22c>
 800983e:	7821      	ldrb	r1, [r4, #0]
 8009840:	2203      	movs	r2, #3
 8009842:	4650      	mov	r0, sl
 8009844:	f7f6 fca4 	bl	8000190 <memchr>
 8009848:	b138      	cbz	r0, 800985a <_vfiprintf_r+0x176>
 800984a:	9b04      	ldr	r3, [sp, #16]
 800984c:	eba0 000a 	sub.w	r0, r0, sl
 8009850:	2240      	movs	r2, #64	@ 0x40
 8009852:	4082      	lsls	r2, r0
 8009854:	4313      	orrs	r3, r2
 8009856:	3401      	adds	r4, #1
 8009858:	9304      	str	r3, [sp, #16]
 800985a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800985e:	4829      	ldr	r0, [pc, #164]	@ (8009904 <_vfiprintf_r+0x220>)
 8009860:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009864:	2206      	movs	r2, #6
 8009866:	f7f6 fc93 	bl	8000190 <memchr>
 800986a:	2800      	cmp	r0, #0
 800986c:	d03f      	beq.n	80098ee <_vfiprintf_r+0x20a>
 800986e:	4b26      	ldr	r3, [pc, #152]	@ (8009908 <_vfiprintf_r+0x224>)
 8009870:	bb1b      	cbnz	r3, 80098ba <_vfiprintf_r+0x1d6>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	3307      	adds	r3, #7
 8009876:	f023 0307 	bic.w	r3, r3, #7
 800987a:	3308      	adds	r3, #8
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009880:	443b      	add	r3, r7
 8009882:	9309      	str	r3, [sp, #36]	@ 0x24
 8009884:	e76a      	b.n	800975c <_vfiprintf_r+0x78>
 8009886:	fb0c 3202 	mla	r2, ip, r2, r3
 800988a:	460c      	mov	r4, r1
 800988c:	2001      	movs	r0, #1
 800988e:	e7a8      	b.n	80097e2 <_vfiprintf_r+0xfe>
 8009890:	2300      	movs	r3, #0
 8009892:	3401      	adds	r4, #1
 8009894:	9305      	str	r3, [sp, #20]
 8009896:	4619      	mov	r1, r3
 8009898:	f04f 0c0a 	mov.w	ip, #10
 800989c:	4620      	mov	r0, r4
 800989e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098a2:	3a30      	subs	r2, #48	@ 0x30
 80098a4:	2a09      	cmp	r2, #9
 80098a6:	d903      	bls.n	80098b0 <_vfiprintf_r+0x1cc>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0c6      	beq.n	800983a <_vfiprintf_r+0x156>
 80098ac:	9105      	str	r1, [sp, #20]
 80098ae:	e7c4      	b.n	800983a <_vfiprintf_r+0x156>
 80098b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80098b4:	4604      	mov	r4, r0
 80098b6:	2301      	movs	r3, #1
 80098b8:	e7f0      	b.n	800989c <_vfiprintf_r+0x1b8>
 80098ba:	ab03      	add	r3, sp, #12
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	462a      	mov	r2, r5
 80098c0:	4b12      	ldr	r3, [pc, #72]	@ (800990c <_vfiprintf_r+0x228>)
 80098c2:	a904      	add	r1, sp, #16
 80098c4:	4630      	mov	r0, r6
 80098c6:	f3af 8000 	nop.w
 80098ca:	4607      	mov	r7, r0
 80098cc:	1c78      	adds	r0, r7, #1
 80098ce:	d1d6      	bne.n	800987e <_vfiprintf_r+0x19a>
 80098d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098d2:	07d9      	lsls	r1, r3, #31
 80098d4:	d405      	bmi.n	80098e2 <_vfiprintf_r+0x1fe>
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	059a      	lsls	r2, r3, #22
 80098da:	d402      	bmi.n	80098e2 <_vfiprintf_r+0x1fe>
 80098dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098de:	f7ff fdcf 	bl	8009480 <__retarget_lock_release_recursive>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	065b      	lsls	r3, r3, #25
 80098e6:	f53f af1f 	bmi.w	8009728 <_vfiprintf_r+0x44>
 80098ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098ec:	e71e      	b.n	800972c <_vfiprintf_r+0x48>
 80098ee:	ab03      	add	r3, sp, #12
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	462a      	mov	r2, r5
 80098f4:	4b05      	ldr	r3, [pc, #20]	@ (800990c <_vfiprintf_r+0x228>)
 80098f6:	a904      	add	r1, sp, #16
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 f879 	bl	80099f0 <_printf_i>
 80098fe:	e7e4      	b.n	80098ca <_vfiprintf_r+0x1e6>
 8009900:	0800a354 	.word	0x0800a354
 8009904:	0800a35e 	.word	0x0800a35e
 8009908:	00000000 	.word	0x00000000
 800990c:	080096bf 	.word	0x080096bf
 8009910:	0800a35a 	.word	0x0800a35a

08009914 <_printf_common>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	4616      	mov	r6, r2
 800991a:	4698      	mov	r8, r3
 800991c:	688a      	ldr	r2, [r1, #8]
 800991e:	690b      	ldr	r3, [r1, #16]
 8009920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009924:	4293      	cmp	r3, r2
 8009926:	bfb8      	it	lt
 8009928:	4613      	movlt	r3, r2
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009930:	4607      	mov	r7, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b10a      	cbz	r2, 800993a <_printf_common+0x26>
 8009936:	3301      	adds	r3, #1
 8009938:	6033      	str	r3, [r6, #0]
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	0699      	lsls	r1, r3, #26
 800993e:	bf42      	ittt	mi
 8009940:	6833      	ldrmi	r3, [r6, #0]
 8009942:	3302      	addmi	r3, #2
 8009944:	6033      	strmi	r3, [r6, #0]
 8009946:	6825      	ldr	r5, [r4, #0]
 8009948:	f015 0506 	ands.w	r5, r5, #6
 800994c:	d106      	bne.n	800995c <_printf_common+0x48>
 800994e:	f104 0a19 	add.w	sl, r4, #25
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	6832      	ldr	r2, [r6, #0]
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	42ab      	cmp	r3, r5
 800995a:	dc26      	bgt.n	80099aa <_printf_common+0x96>
 800995c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009960:	6822      	ldr	r2, [r4, #0]
 8009962:	3b00      	subs	r3, #0
 8009964:	bf18      	it	ne
 8009966:	2301      	movne	r3, #1
 8009968:	0692      	lsls	r2, r2, #26
 800996a:	d42b      	bmi.n	80099c4 <_printf_common+0xb0>
 800996c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009970:	4641      	mov	r1, r8
 8009972:	4638      	mov	r0, r7
 8009974:	47c8      	blx	r9
 8009976:	3001      	adds	r0, #1
 8009978:	d01e      	beq.n	80099b8 <_printf_common+0xa4>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	6922      	ldr	r2, [r4, #16]
 800997e:	f003 0306 	and.w	r3, r3, #6
 8009982:	2b04      	cmp	r3, #4
 8009984:	bf02      	ittt	eq
 8009986:	68e5      	ldreq	r5, [r4, #12]
 8009988:	6833      	ldreq	r3, [r6, #0]
 800998a:	1aed      	subeq	r5, r5, r3
 800998c:	68a3      	ldr	r3, [r4, #8]
 800998e:	bf0c      	ite	eq
 8009990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009994:	2500      	movne	r5, #0
 8009996:	4293      	cmp	r3, r2
 8009998:	bfc4      	itt	gt
 800999a:	1a9b      	subgt	r3, r3, r2
 800999c:	18ed      	addgt	r5, r5, r3
 800999e:	2600      	movs	r6, #0
 80099a0:	341a      	adds	r4, #26
 80099a2:	42b5      	cmp	r5, r6
 80099a4:	d11a      	bne.n	80099dc <_printf_common+0xc8>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e008      	b.n	80099bc <_printf_common+0xa8>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4652      	mov	r2, sl
 80099ae:	4641      	mov	r1, r8
 80099b0:	4638      	mov	r0, r7
 80099b2:	47c8      	blx	r9
 80099b4:	3001      	adds	r0, #1
 80099b6:	d103      	bne.n	80099c0 <_printf_common+0xac>
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c0:	3501      	adds	r5, #1
 80099c2:	e7c6      	b.n	8009952 <_printf_common+0x3e>
 80099c4:	18e1      	adds	r1, r4, r3
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	2030      	movs	r0, #48	@ 0x30
 80099ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099ce:	4422      	add	r2, r4
 80099d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099d8:	3302      	adds	r3, #2
 80099da:	e7c7      	b.n	800996c <_printf_common+0x58>
 80099dc:	2301      	movs	r3, #1
 80099de:	4622      	mov	r2, r4
 80099e0:	4641      	mov	r1, r8
 80099e2:	4638      	mov	r0, r7
 80099e4:	47c8      	blx	r9
 80099e6:	3001      	adds	r0, #1
 80099e8:	d0e6      	beq.n	80099b8 <_printf_common+0xa4>
 80099ea:	3601      	adds	r6, #1
 80099ec:	e7d9      	b.n	80099a2 <_printf_common+0x8e>
	...

080099f0 <_printf_i>:
 80099f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f4:	7e0f      	ldrb	r7, [r1, #24]
 80099f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099f8:	2f78      	cmp	r7, #120	@ 0x78
 80099fa:	4691      	mov	r9, r2
 80099fc:	4680      	mov	r8, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	469a      	mov	sl, r3
 8009a02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a06:	d807      	bhi.n	8009a18 <_printf_i+0x28>
 8009a08:	2f62      	cmp	r7, #98	@ 0x62
 8009a0a:	d80a      	bhi.n	8009a22 <_printf_i+0x32>
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	f000 80d2 	beq.w	8009bb6 <_printf_i+0x1c6>
 8009a12:	2f58      	cmp	r7, #88	@ 0x58
 8009a14:	f000 80b9 	beq.w	8009b8a <_printf_i+0x19a>
 8009a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a20:	e03a      	b.n	8009a98 <_printf_i+0xa8>
 8009a22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a26:	2b15      	cmp	r3, #21
 8009a28:	d8f6      	bhi.n	8009a18 <_printf_i+0x28>
 8009a2a:	a101      	add	r1, pc, #4	@ (adr r1, 8009a30 <_printf_i+0x40>)
 8009a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a30:	08009a89 	.word	0x08009a89
 8009a34:	08009a9d 	.word	0x08009a9d
 8009a38:	08009a19 	.word	0x08009a19
 8009a3c:	08009a19 	.word	0x08009a19
 8009a40:	08009a19 	.word	0x08009a19
 8009a44:	08009a19 	.word	0x08009a19
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009a19 	.word	0x08009a19
 8009a50:	08009a19 	.word	0x08009a19
 8009a54:	08009a19 	.word	0x08009a19
 8009a58:	08009a19 	.word	0x08009a19
 8009a5c:	08009b9d 	.word	0x08009b9d
 8009a60:	08009ac7 	.word	0x08009ac7
 8009a64:	08009b57 	.word	0x08009b57
 8009a68:	08009a19 	.word	0x08009a19
 8009a6c:	08009a19 	.word	0x08009a19
 8009a70:	08009bbf 	.word	0x08009bbf
 8009a74:	08009a19 	.word	0x08009a19
 8009a78:	08009ac7 	.word	0x08009ac7
 8009a7c:	08009a19 	.word	0x08009a19
 8009a80:	08009a19 	.word	0x08009a19
 8009a84:	08009b5f 	.word	0x08009b5f
 8009a88:	6833      	ldr	r3, [r6, #0]
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6032      	str	r2, [r6, #0]
 8009a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e09d      	b.n	8009bd8 <_printf_i+0x1e8>
 8009a9c:	6833      	ldr	r3, [r6, #0]
 8009a9e:	6820      	ldr	r0, [r4, #0]
 8009aa0:	1d19      	adds	r1, r3, #4
 8009aa2:	6031      	str	r1, [r6, #0]
 8009aa4:	0606      	lsls	r6, r0, #24
 8009aa6:	d501      	bpl.n	8009aac <_printf_i+0xbc>
 8009aa8:	681d      	ldr	r5, [r3, #0]
 8009aaa:	e003      	b.n	8009ab4 <_printf_i+0xc4>
 8009aac:	0645      	lsls	r5, r0, #25
 8009aae:	d5fb      	bpl.n	8009aa8 <_printf_i+0xb8>
 8009ab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	da03      	bge.n	8009ac0 <_printf_i+0xd0>
 8009ab8:	232d      	movs	r3, #45	@ 0x2d
 8009aba:	426d      	negs	r5, r5
 8009abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ac0:	4859      	ldr	r0, [pc, #356]	@ (8009c28 <_printf_i+0x238>)
 8009ac2:	230a      	movs	r3, #10
 8009ac4:	e011      	b.n	8009aea <_printf_i+0xfa>
 8009ac6:	6821      	ldr	r1, [r4, #0]
 8009ac8:	6833      	ldr	r3, [r6, #0]
 8009aca:	0608      	lsls	r0, r1, #24
 8009acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ad0:	d402      	bmi.n	8009ad8 <_printf_i+0xe8>
 8009ad2:	0649      	lsls	r1, r1, #25
 8009ad4:	bf48      	it	mi
 8009ad6:	b2ad      	uxthmi	r5, r5
 8009ad8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ada:	4853      	ldr	r0, [pc, #332]	@ (8009c28 <_printf_i+0x238>)
 8009adc:	6033      	str	r3, [r6, #0]
 8009ade:	bf14      	ite	ne
 8009ae0:	230a      	movne	r3, #10
 8009ae2:	2308      	moveq	r3, #8
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009aea:	6866      	ldr	r6, [r4, #4]
 8009aec:	60a6      	str	r6, [r4, #8]
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	bfa2      	ittt	ge
 8009af2:	6821      	ldrge	r1, [r4, #0]
 8009af4:	f021 0104 	bicge.w	r1, r1, #4
 8009af8:	6021      	strge	r1, [r4, #0]
 8009afa:	b90d      	cbnz	r5, 8009b00 <_printf_i+0x110>
 8009afc:	2e00      	cmp	r6, #0
 8009afe:	d04b      	beq.n	8009b98 <_printf_i+0x1a8>
 8009b00:	4616      	mov	r6, r2
 8009b02:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b06:	fb03 5711 	mls	r7, r3, r1, r5
 8009b0a:	5dc7      	ldrb	r7, [r0, r7]
 8009b0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b10:	462f      	mov	r7, r5
 8009b12:	42bb      	cmp	r3, r7
 8009b14:	460d      	mov	r5, r1
 8009b16:	d9f4      	bls.n	8009b02 <_printf_i+0x112>
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d10b      	bne.n	8009b34 <_printf_i+0x144>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	07df      	lsls	r7, r3, #31
 8009b20:	d508      	bpl.n	8009b34 <_printf_i+0x144>
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	6861      	ldr	r1, [r4, #4]
 8009b26:	4299      	cmp	r1, r3
 8009b28:	bfde      	ittt	le
 8009b2a:	2330      	movle	r3, #48	@ 0x30
 8009b2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b34:	1b92      	subs	r2, r2, r6
 8009b36:	6122      	str	r2, [r4, #16]
 8009b38:	f8cd a000 	str.w	sl, [sp]
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	aa03      	add	r2, sp, #12
 8009b40:	4621      	mov	r1, r4
 8009b42:	4640      	mov	r0, r8
 8009b44:	f7ff fee6 	bl	8009914 <_printf_common>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d14a      	bne.n	8009be2 <_printf_i+0x1f2>
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b50:	b004      	add	sp, #16
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	f043 0320 	orr.w	r3, r3, #32
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	4833      	ldr	r0, [pc, #204]	@ (8009c2c <_printf_i+0x23c>)
 8009b60:	2778      	movs	r7, #120	@ 0x78
 8009b62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	6831      	ldr	r1, [r6, #0]
 8009b6a:	061f      	lsls	r7, r3, #24
 8009b6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b70:	d402      	bmi.n	8009b78 <_printf_i+0x188>
 8009b72:	065f      	lsls	r7, r3, #25
 8009b74:	bf48      	it	mi
 8009b76:	b2ad      	uxthmi	r5, r5
 8009b78:	6031      	str	r1, [r6, #0]
 8009b7a:	07d9      	lsls	r1, r3, #31
 8009b7c:	bf44      	itt	mi
 8009b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b82:	6023      	strmi	r3, [r4, #0]
 8009b84:	b11d      	cbz	r5, 8009b8e <_printf_i+0x19e>
 8009b86:	2310      	movs	r3, #16
 8009b88:	e7ac      	b.n	8009ae4 <_printf_i+0xf4>
 8009b8a:	4827      	ldr	r0, [pc, #156]	@ (8009c28 <_printf_i+0x238>)
 8009b8c:	e7e9      	b.n	8009b62 <_printf_i+0x172>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	f023 0320 	bic.w	r3, r3, #32
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	e7f6      	b.n	8009b86 <_printf_i+0x196>
 8009b98:	4616      	mov	r6, r2
 8009b9a:	e7bd      	b.n	8009b18 <_printf_i+0x128>
 8009b9c:	6833      	ldr	r3, [r6, #0]
 8009b9e:	6825      	ldr	r5, [r4, #0]
 8009ba0:	6961      	ldr	r1, [r4, #20]
 8009ba2:	1d18      	adds	r0, r3, #4
 8009ba4:	6030      	str	r0, [r6, #0]
 8009ba6:	062e      	lsls	r6, r5, #24
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	d501      	bpl.n	8009bb0 <_printf_i+0x1c0>
 8009bac:	6019      	str	r1, [r3, #0]
 8009bae:	e002      	b.n	8009bb6 <_printf_i+0x1c6>
 8009bb0:	0668      	lsls	r0, r5, #25
 8009bb2:	d5fb      	bpl.n	8009bac <_printf_i+0x1bc>
 8009bb4:	8019      	strh	r1, [r3, #0]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	4616      	mov	r6, r2
 8009bbc:	e7bc      	b.n	8009b38 <_printf_i+0x148>
 8009bbe:	6833      	ldr	r3, [r6, #0]
 8009bc0:	1d1a      	adds	r2, r3, #4
 8009bc2:	6032      	str	r2, [r6, #0]
 8009bc4:	681e      	ldr	r6, [r3, #0]
 8009bc6:	6862      	ldr	r2, [r4, #4]
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7f6 fae0 	bl	8000190 <memchr>
 8009bd0:	b108      	cbz	r0, 8009bd6 <_printf_i+0x1e6>
 8009bd2:	1b80      	subs	r0, r0, r6
 8009bd4:	6060      	str	r0, [r4, #4]
 8009bd6:	6863      	ldr	r3, [r4, #4]
 8009bd8:	6123      	str	r3, [r4, #16]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009be0:	e7aa      	b.n	8009b38 <_printf_i+0x148>
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	4632      	mov	r2, r6
 8009be6:	4649      	mov	r1, r9
 8009be8:	4640      	mov	r0, r8
 8009bea:	47d0      	blx	sl
 8009bec:	3001      	adds	r0, #1
 8009bee:	d0ad      	beq.n	8009b4c <_printf_i+0x15c>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	079b      	lsls	r3, r3, #30
 8009bf4:	d413      	bmi.n	8009c1e <_printf_i+0x22e>
 8009bf6:	68e0      	ldr	r0, [r4, #12]
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	4298      	cmp	r0, r3
 8009bfc:	bfb8      	it	lt
 8009bfe:	4618      	movlt	r0, r3
 8009c00:	e7a6      	b.n	8009b50 <_printf_i+0x160>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4632      	mov	r2, r6
 8009c06:	4649      	mov	r1, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	47d0      	blx	sl
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d09d      	beq.n	8009b4c <_printf_i+0x15c>
 8009c10:	3501      	adds	r5, #1
 8009c12:	68e3      	ldr	r3, [r4, #12]
 8009c14:	9903      	ldr	r1, [sp, #12]
 8009c16:	1a5b      	subs	r3, r3, r1
 8009c18:	42ab      	cmp	r3, r5
 8009c1a:	dcf2      	bgt.n	8009c02 <_printf_i+0x212>
 8009c1c:	e7eb      	b.n	8009bf6 <_printf_i+0x206>
 8009c1e:	2500      	movs	r5, #0
 8009c20:	f104 0619 	add.w	r6, r4, #25
 8009c24:	e7f5      	b.n	8009c12 <_printf_i+0x222>
 8009c26:	bf00      	nop
 8009c28:	0800a365 	.word	0x0800a365
 8009c2c:	0800a376 	.word	0x0800a376

08009c30 <__sflush_r>:
 8009c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c38:	0716      	lsls	r6, r2, #28
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	d454      	bmi.n	8009cea <__sflush_r+0xba>
 8009c40:	684b      	ldr	r3, [r1, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dc02      	bgt.n	8009c4c <__sflush_r+0x1c>
 8009c46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	dd48      	ble.n	8009cde <__sflush_r+0xae>
 8009c4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c4e:	2e00      	cmp	r6, #0
 8009c50:	d045      	beq.n	8009cde <__sflush_r+0xae>
 8009c52:	2300      	movs	r3, #0
 8009c54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c58:	682f      	ldr	r7, [r5, #0]
 8009c5a:	6a21      	ldr	r1, [r4, #32]
 8009c5c:	602b      	str	r3, [r5, #0]
 8009c5e:	d030      	beq.n	8009cc2 <__sflush_r+0x92>
 8009c60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	0759      	lsls	r1, r3, #29
 8009c66:	d505      	bpl.n	8009c74 <__sflush_r+0x44>
 8009c68:	6863      	ldr	r3, [r4, #4]
 8009c6a:	1ad2      	subs	r2, r2, r3
 8009c6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c6e:	b10b      	cbz	r3, 8009c74 <__sflush_r+0x44>
 8009c70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c72:	1ad2      	subs	r2, r2, r3
 8009c74:	2300      	movs	r3, #0
 8009c76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c78:	6a21      	ldr	r1, [r4, #32]
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b0      	blx	r6
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	d106      	bne.n	8009c92 <__sflush_r+0x62>
 8009c84:	6829      	ldr	r1, [r5, #0]
 8009c86:	291d      	cmp	r1, #29
 8009c88:	d82b      	bhi.n	8009ce2 <__sflush_r+0xb2>
 8009c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8009d34 <__sflush_r+0x104>)
 8009c8c:	410a      	asrs	r2, r1
 8009c8e:	07d6      	lsls	r6, r2, #31
 8009c90:	d427      	bmi.n	8009ce2 <__sflush_r+0xb2>
 8009c92:	2200      	movs	r2, #0
 8009c94:	6062      	str	r2, [r4, #4]
 8009c96:	04d9      	lsls	r1, r3, #19
 8009c98:	6922      	ldr	r2, [r4, #16]
 8009c9a:	6022      	str	r2, [r4, #0]
 8009c9c:	d504      	bpl.n	8009ca8 <__sflush_r+0x78>
 8009c9e:	1c42      	adds	r2, r0, #1
 8009ca0:	d101      	bne.n	8009ca6 <__sflush_r+0x76>
 8009ca2:	682b      	ldr	r3, [r5, #0]
 8009ca4:	b903      	cbnz	r3, 8009ca8 <__sflush_r+0x78>
 8009ca6:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009caa:	602f      	str	r7, [r5, #0]
 8009cac:	b1b9      	cbz	r1, 8009cde <__sflush_r+0xae>
 8009cae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cb2:	4299      	cmp	r1, r3
 8009cb4:	d002      	beq.n	8009cbc <__sflush_r+0x8c>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f7ff fbf2 	bl	80094a0 <_free_r>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cc0:	e00d      	b.n	8009cde <__sflush_r+0xae>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b0      	blx	r6
 8009cc8:	4602      	mov	r2, r0
 8009cca:	1c50      	adds	r0, r2, #1
 8009ccc:	d1c9      	bne.n	8009c62 <__sflush_r+0x32>
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d0c6      	beq.n	8009c62 <__sflush_r+0x32>
 8009cd4:	2b1d      	cmp	r3, #29
 8009cd6:	d001      	beq.n	8009cdc <__sflush_r+0xac>
 8009cd8:	2b16      	cmp	r3, #22
 8009cda:	d11e      	bne.n	8009d1a <__sflush_r+0xea>
 8009cdc:	602f      	str	r7, [r5, #0]
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e022      	b.n	8009d28 <__sflush_r+0xf8>
 8009ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ce6:	b21b      	sxth	r3, r3
 8009ce8:	e01b      	b.n	8009d22 <__sflush_r+0xf2>
 8009cea:	690f      	ldr	r7, [r1, #16]
 8009cec:	2f00      	cmp	r7, #0
 8009cee:	d0f6      	beq.n	8009cde <__sflush_r+0xae>
 8009cf0:	0793      	lsls	r3, r2, #30
 8009cf2:	680e      	ldr	r6, [r1, #0]
 8009cf4:	bf08      	it	eq
 8009cf6:	694b      	ldreq	r3, [r1, #20]
 8009cf8:	600f      	str	r7, [r1, #0]
 8009cfa:	bf18      	it	ne
 8009cfc:	2300      	movne	r3, #0
 8009cfe:	eba6 0807 	sub.w	r8, r6, r7
 8009d02:	608b      	str	r3, [r1, #8]
 8009d04:	f1b8 0f00 	cmp.w	r8, #0
 8009d08:	dde9      	ble.n	8009cde <__sflush_r+0xae>
 8009d0a:	6a21      	ldr	r1, [r4, #32]
 8009d0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d0e:	4643      	mov	r3, r8
 8009d10:	463a      	mov	r2, r7
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b0      	blx	r6
 8009d16:	2800      	cmp	r0, #0
 8009d18:	dc08      	bgt.n	8009d2c <__sflush_r+0xfc>
 8009d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295
 8009d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2c:	4407      	add	r7, r0
 8009d2e:	eba8 0800 	sub.w	r8, r8, r0
 8009d32:	e7e7      	b.n	8009d04 <__sflush_r+0xd4>
 8009d34:	dfbffffe 	.word	0xdfbffffe

08009d38 <_fflush_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	690b      	ldr	r3, [r1, #16]
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	460c      	mov	r4, r1
 8009d40:	b913      	cbnz	r3, 8009d48 <_fflush_r+0x10>
 8009d42:	2500      	movs	r5, #0
 8009d44:	4628      	mov	r0, r5
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	b118      	cbz	r0, 8009d52 <_fflush_r+0x1a>
 8009d4a:	6a03      	ldr	r3, [r0, #32]
 8009d4c:	b90b      	cbnz	r3, 8009d52 <_fflush_r+0x1a>
 8009d4e:	f7ff fa89 	bl	8009264 <__sinit>
 8009d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d0f3      	beq.n	8009d42 <_fflush_r+0xa>
 8009d5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d5c:	07d0      	lsls	r0, r2, #31
 8009d5e:	d404      	bmi.n	8009d6a <_fflush_r+0x32>
 8009d60:	0599      	lsls	r1, r3, #22
 8009d62:	d402      	bmi.n	8009d6a <_fflush_r+0x32>
 8009d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d66:	f7ff fb8a 	bl	800947e <__retarget_lock_acquire_recursive>
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	f7ff ff5f 	bl	8009c30 <__sflush_r>
 8009d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d74:	07da      	lsls	r2, r3, #31
 8009d76:	4605      	mov	r5, r0
 8009d78:	d4e4      	bmi.n	8009d44 <_fflush_r+0xc>
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	059b      	lsls	r3, r3, #22
 8009d7e:	d4e1      	bmi.n	8009d44 <_fflush_r+0xc>
 8009d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d82:	f7ff fb7d 	bl	8009480 <__retarget_lock_release_recursive>
 8009d86:	e7dd      	b.n	8009d44 <_fflush_r+0xc>

08009d88 <_putc_r>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	4614      	mov	r4, r2
 8009d8e:	4606      	mov	r6, r0
 8009d90:	b118      	cbz	r0, 8009d9a <_putc_r+0x12>
 8009d92:	6a03      	ldr	r3, [r0, #32]
 8009d94:	b90b      	cbnz	r3, 8009d9a <_putc_r+0x12>
 8009d96:	f7ff fa65 	bl	8009264 <__sinit>
 8009d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d9c:	07d8      	lsls	r0, r3, #31
 8009d9e:	d405      	bmi.n	8009dac <_putc_r+0x24>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	0599      	lsls	r1, r3, #22
 8009da4:	d402      	bmi.n	8009dac <_putc_r+0x24>
 8009da6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009da8:	f7ff fb69 	bl	800947e <__retarget_lock_acquire_recursive>
 8009dac:	68a3      	ldr	r3, [r4, #8]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	60a3      	str	r3, [r4, #8]
 8009db4:	da05      	bge.n	8009dc2 <_putc_r+0x3a>
 8009db6:	69a2      	ldr	r2, [r4, #24]
 8009db8:	4293      	cmp	r3, r2
 8009dba:	db12      	blt.n	8009de2 <_putc_r+0x5a>
 8009dbc:	b2eb      	uxtb	r3, r5
 8009dbe:	2b0a      	cmp	r3, #10
 8009dc0:	d00f      	beq.n	8009de2 <_putc_r+0x5a>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	6022      	str	r2, [r4, #0]
 8009dc8:	701d      	strb	r5, [r3, #0]
 8009dca:	b2ed      	uxtb	r5, r5
 8009dcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dce:	07da      	lsls	r2, r3, #31
 8009dd0:	d405      	bmi.n	8009dde <_putc_r+0x56>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	059b      	lsls	r3, r3, #22
 8009dd6:	d402      	bmi.n	8009dde <_putc_r+0x56>
 8009dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dda:	f7ff fb51 	bl	8009480 <__retarget_lock_release_recursive>
 8009dde:	4628      	mov	r0, r5
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
 8009de2:	4629      	mov	r1, r5
 8009de4:	4622      	mov	r2, r4
 8009de6:	4630      	mov	r0, r6
 8009de8:	f000 f802 	bl	8009df0 <__swbuf_r>
 8009dec:	4605      	mov	r5, r0
 8009dee:	e7ed      	b.n	8009dcc <_putc_r+0x44>

08009df0 <__swbuf_r>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	460e      	mov	r6, r1
 8009df4:	4614      	mov	r4, r2
 8009df6:	4605      	mov	r5, r0
 8009df8:	b118      	cbz	r0, 8009e02 <__swbuf_r+0x12>
 8009dfa:	6a03      	ldr	r3, [r0, #32]
 8009dfc:	b90b      	cbnz	r3, 8009e02 <__swbuf_r+0x12>
 8009dfe:	f7ff fa31 	bl	8009264 <__sinit>
 8009e02:	69a3      	ldr	r3, [r4, #24]
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	071a      	lsls	r2, r3, #28
 8009e0a:	d501      	bpl.n	8009e10 <__swbuf_r+0x20>
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	b943      	cbnz	r3, 8009e22 <__swbuf_r+0x32>
 8009e10:	4621      	mov	r1, r4
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 f82a 	bl	8009e6c <__swsetup_r>
 8009e18:	b118      	cbz	r0, 8009e22 <__swbuf_r+0x32>
 8009e1a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e1e:	4638      	mov	r0, r7
 8009e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	6922      	ldr	r2, [r4, #16]
 8009e26:	1a98      	subs	r0, r3, r2
 8009e28:	6963      	ldr	r3, [r4, #20]
 8009e2a:	b2f6      	uxtb	r6, r6
 8009e2c:	4283      	cmp	r3, r0
 8009e2e:	4637      	mov	r7, r6
 8009e30:	dc05      	bgt.n	8009e3e <__swbuf_r+0x4e>
 8009e32:	4621      	mov	r1, r4
 8009e34:	4628      	mov	r0, r5
 8009e36:	f7ff ff7f 	bl	8009d38 <_fflush_r>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d1ed      	bne.n	8009e1a <__swbuf_r+0x2a>
 8009e3e:	68a3      	ldr	r3, [r4, #8]
 8009e40:	3b01      	subs	r3, #1
 8009e42:	60a3      	str	r3, [r4, #8]
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	6022      	str	r2, [r4, #0]
 8009e4a:	701e      	strb	r6, [r3, #0]
 8009e4c:	6962      	ldr	r2, [r4, #20]
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d004      	beq.n	8009e5e <__swbuf_r+0x6e>
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	07db      	lsls	r3, r3, #31
 8009e58:	d5e1      	bpl.n	8009e1e <__swbuf_r+0x2e>
 8009e5a:	2e0a      	cmp	r6, #10
 8009e5c:	d1df      	bne.n	8009e1e <__swbuf_r+0x2e>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	f7ff ff69 	bl	8009d38 <_fflush_r>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d0d9      	beq.n	8009e1e <__swbuf_r+0x2e>
 8009e6a:	e7d6      	b.n	8009e1a <__swbuf_r+0x2a>

08009e6c <__swsetup_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4b29      	ldr	r3, [pc, #164]	@ (8009f14 <__swsetup_r+0xa8>)
 8009e70:	4605      	mov	r5, r0
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	460c      	mov	r4, r1
 8009e76:	b118      	cbz	r0, 8009e80 <__swsetup_r+0x14>
 8009e78:	6a03      	ldr	r3, [r0, #32]
 8009e7a:	b90b      	cbnz	r3, 8009e80 <__swsetup_r+0x14>
 8009e7c:	f7ff f9f2 	bl	8009264 <__sinit>
 8009e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e84:	0719      	lsls	r1, r3, #28
 8009e86:	d422      	bmi.n	8009ece <__swsetup_r+0x62>
 8009e88:	06da      	lsls	r2, r3, #27
 8009e8a:	d407      	bmi.n	8009e9c <__swsetup_r+0x30>
 8009e8c:	2209      	movs	r2, #9
 8009e8e:	602a      	str	r2, [r5, #0]
 8009e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9a:	e033      	b.n	8009f04 <__swsetup_r+0x98>
 8009e9c:	0758      	lsls	r0, r3, #29
 8009e9e:	d512      	bpl.n	8009ec6 <__swsetup_r+0x5a>
 8009ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ea2:	b141      	cbz	r1, 8009eb6 <__swsetup_r+0x4a>
 8009ea4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d002      	beq.n	8009eb2 <__swsetup_r+0x46>
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff faf7 	bl	80094a0 <_free_r>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ebc:	81a3      	strh	r3, [r4, #12]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6063      	str	r3, [r4, #4]
 8009ec2:	6923      	ldr	r3, [r4, #16]
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	f043 0308 	orr.w	r3, r3, #8
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	b94b      	cbnz	r3, 8009ee6 <__swsetup_r+0x7a>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009edc:	d003      	beq.n	8009ee6 <__swsetup_r+0x7a>
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f000 f84f 	bl	8009f84 <__smakebuf_r>
 8009ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eea:	f013 0201 	ands.w	r2, r3, #1
 8009eee:	d00a      	beq.n	8009f06 <__swsetup_r+0x9a>
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	60a2      	str	r2, [r4, #8]
 8009ef4:	6962      	ldr	r2, [r4, #20]
 8009ef6:	4252      	negs	r2, r2
 8009ef8:	61a2      	str	r2, [r4, #24]
 8009efa:	6922      	ldr	r2, [r4, #16]
 8009efc:	b942      	cbnz	r2, 8009f10 <__swsetup_r+0xa4>
 8009efe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f02:	d1c5      	bne.n	8009e90 <__swsetup_r+0x24>
 8009f04:	bd38      	pop	{r3, r4, r5, pc}
 8009f06:	0799      	lsls	r1, r3, #30
 8009f08:	bf58      	it	pl
 8009f0a:	6962      	ldrpl	r2, [r4, #20]
 8009f0c:	60a2      	str	r2, [r4, #8]
 8009f0e:	e7f4      	b.n	8009efa <__swsetup_r+0x8e>
 8009f10:	2000      	movs	r0, #0
 8009f12:	e7f7      	b.n	8009f04 <__swsetup_r+0x98>
 8009f14:	20000078 	.word	0x20000078

08009f18 <_sbrk_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d06      	ldr	r5, [pc, #24]	@ (8009f34 <_sbrk_r+0x1c>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	602b      	str	r3, [r5, #0]
 8009f24:	f7f7 ffd8 	bl	8001ed8 <_sbrk>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_sbrk_r+0x1a>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_sbrk_r+0x1a>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	20000824 	.word	0x20000824

08009f38 <__swhatbuf_r>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	2900      	cmp	r1, #0
 8009f42:	b096      	sub	sp, #88	@ 0x58
 8009f44:	4615      	mov	r5, r2
 8009f46:	461e      	mov	r6, r3
 8009f48:	da0d      	bge.n	8009f66 <__swhatbuf_r+0x2e>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f50:	f04f 0100 	mov.w	r1, #0
 8009f54:	bf14      	ite	ne
 8009f56:	2340      	movne	r3, #64	@ 0x40
 8009f58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	6031      	str	r1, [r6, #0]
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	b016      	add	sp, #88	@ 0x58
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	466a      	mov	r2, sp
 8009f68:	f000 f848 	bl	8009ffc <_fstat_r>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	dbec      	blt.n	8009f4a <__swhatbuf_r+0x12>
 8009f70:	9901      	ldr	r1, [sp, #4]
 8009f72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f7a:	4259      	negs	r1, r3
 8009f7c:	4159      	adcs	r1, r3
 8009f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f82:	e7eb      	b.n	8009f5c <__swhatbuf_r+0x24>

08009f84 <__smakebuf_r>:
 8009f84:	898b      	ldrh	r3, [r1, #12]
 8009f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f88:	079d      	lsls	r5, r3, #30
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	d507      	bpl.n	8009fa0 <__smakebuf_r+0x1c>
 8009f90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	6123      	str	r3, [r4, #16]
 8009f98:	2301      	movs	r3, #1
 8009f9a:	6163      	str	r3, [r4, #20]
 8009f9c:	b003      	add	sp, #12
 8009f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa0:	ab01      	add	r3, sp, #4
 8009fa2:	466a      	mov	r2, sp
 8009fa4:	f7ff ffc8 	bl	8009f38 <__swhatbuf_r>
 8009fa8:	9f00      	ldr	r7, [sp, #0]
 8009faa:	4605      	mov	r5, r0
 8009fac:	4639      	mov	r1, r7
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f7ff fae2 	bl	8009578 <_malloc_r>
 8009fb4:	b948      	cbnz	r0, 8009fca <__smakebuf_r+0x46>
 8009fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fba:	059a      	lsls	r2, r3, #22
 8009fbc:	d4ee      	bmi.n	8009f9c <__smakebuf_r+0x18>
 8009fbe:	f023 0303 	bic.w	r3, r3, #3
 8009fc2:	f043 0302 	orr.w	r3, r3, #2
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	e7e2      	b.n	8009f90 <__smakebuf_r+0xc>
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	6020      	str	r0, [r4, #0]
 8009fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fda:	b15b      	cbz	r3, 8009ff4 <__smakebuf_r+0x70>
 8009fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f000 f81d 	bl	800a020 <_isatty_r>
 8009fe6:	b128      	cbz	r0, 8009ff4 <__smakebuf_r+0x70>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	f023 0303 	bic.w	r3, r3, #3
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	431d      	orrs	r5, r3
 8009ff8:	81a5      	strh	r5, [r4, #12]
 8009ffa:	e7cf      	b.n	8009f9c <__smakebuf_r+0x18>

08009ffc <_fstat_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4d07      	ldr	r5, [pc, #28]	@ (800a01c <_fstat_r+0x20>)
 800a000:	2300      	movs	r3, #0
 800a002:	4604      	mov	r4, r0
 800a004:	4608      	mov	r0, r1
 800a006:	4611      	mov	r1, r2
 800a008:	602b      	str	r3, [r5, #0]
 800a00a:	f7f7 ff3c 	bl	8001e86 <_fstat>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	d102      	bne.n	800a018 <_fstat_r+0x1c>
 800a012:	682b      	ldr	r3, [r5, #0]
 800a014:	b103      	cbz	r3, 800a018 <_fstat_r+0x1c>
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	bd38      	pop	{r3, r4, r5, pc}
 800a01a:	bf00      	nop
 800a01c:	20000824 	.word	0x20000824

0800a020 <_isatty_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d06      	ldr	r5, [pc, #24]	@ (800a03c <_isatty_r+0x1c>)
 800a024:	2300      	movs	r3, #0
 800a026:	4604      	mov	r4, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	602b      	str	r3, [r5, #0]
 800a02c:	f7f7 ff3b 	bl	8001ea6 <_isatty>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d102      	bne.n	800a03a <_isatty_r+0x1a>
 800a034:	682b      	ldr	r3, [r5, #0]
 800a036:	b103      	cbz	r3, 800a03a <_isatty_r+0x1a>
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	20000824 	.word	0x20000824

0800a040 <_init>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	bf00      	nop
 800a044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a046:	bc08      	pop	{r3}
 800a048:	469e      	mov	lr, r3
 800a04a:	4770      	bx	lr

0800a04c <_fini>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	bf00      	nop
 800a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a052:	bc08      	pop	{r3}
 800a054:	469e      	mov	lr, r3
 800a056:	4770      	bx	lr
