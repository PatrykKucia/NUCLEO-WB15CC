
Sending_Receiving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dd8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08009f18  08009f18  0000af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a248  0800a248  0000b248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a250  0800a250  0000b250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a254  0800a254  0000b254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000c0  20000008  0800a258  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000c8  0800a318  0000c0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000100  0800a34d  0000c100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000114  0800a35e  0000c114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  0800a35e  0000c82c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800a35e  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00031150  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000068ea  00000000  00000000  0003dbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b70  00000000  00000000  000444d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002160  00000000  00000000  00047048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000290ae  00000000  00000000  000491a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00032172  00000000  00000000  00072256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000dffb6  00000000  00000000  000a43c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0018437e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000be3c  00000000  00000000  001843c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  00190200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000114 	.word	0x20000114
 800015c:	00000000 	.word	0x00000000
 8000160:	08009f00 	.word	0x08009f00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000118 	.word	0x20000118
 800017c:	08009f00 	.word	0x08009f00

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <APPD_EnableCPU2+0x5c>)
 8000528:	881a      	ldrh	r2, [r3, #0]
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800052c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <APPD_EnableCPU2+0x64>)
 8000530:	881a      	ldrh	r2, [r3, #0]
 8000532:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <APPD_EnableCPU2+0x60>)
 8000534:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <APPD_EnableCPU2+0x68>)
 8000538:	881a      	ldrh	r2, [r3, #0]
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800053c:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <APPD_EnableCPU2+0x6c>)
 8000540:	881a      	ldrh	r2, [r3, #0]
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <APPD_EnableCPU2+0x60>)
 8000544:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000546:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <APPD_EnableCPU2+0x70>)
 8000548:	881a      	ldrh	r2, [r3, #0]
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <APPD_EnableCPU2+0x60>)
 800054c:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <APPD_EnableCPU2+0x74>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	c403      	stmia	r4!, {r0, r1}
 800055e:	8022      	strh	r2, [r4, #0]
 8000560:	3402      	adds	r4, #2
 8000562:	0c13      	lsrs	r3, r2, #16
 8000564:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000566:	f007 f9e3 	bl	8007930 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f006 fc74 	bl	8006e5a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000572:	bf00      	nop
}
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bdb0      	pop	{r4, r5, r7, pc}
 800057a:	bf00      	nop
 800057c:	20000008 	.word	0x20000008
 8000580:	200301e8 	.word	0x200301e8
 8000584:	2000000a 	.word	0x2000000a
 8000588:	2000000c 	.word	0x2000000c
 800058c:	2000000e 	.word	0x2000000e
 8000590:	20000010 	.word	0x20000010
 8000594:	08009f18 	.word	0x08009f18

08000598 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <LL_C2_PWR_SetPowerMode+0x28>)
 80005a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005a6:	f023 0207 	bic.w	r2, r3, #7
 80005aa:	4905      	ldr	r1, [pc, #20]	@ (80005c0 <LL_C2_PWR_SetPowerMode+0x28>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	58000400 	.word	0x58000400

080005c4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80005d2:	4905      	ldr	r1, [pc, #20]	@ (80005e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	58000800 	.word	0x58000800

080005ec <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000602:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000606:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000612:	4313      	orrs	r3, r2
 8000614:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	cafecafe 	.word	0xcafecafe

08000628 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800063a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	608b      	str	r3, [r1, #8]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <LL_DBGMCU_GetDeviceID+0x18>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e0042000 	.word	0xe0042000

0800066c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <LL_DBGMCU_GetRevisionID+0x18>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	b29b      	uxth	r3, r3
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e0042000 	.word	0xe0042000

08000688 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	22ff      	movs	r2, #255	@ 0xff
 8000694:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	22ca      	movs	r2, #202	@ 0xca
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2253      	movs	r2, #83	@ 0x53
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f023 0207 	bic.w	r2, r3, #7
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	431a      	orrs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	609a      	str	r2, [r3, #8]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <MX_APPE_Config+0x18>)
 80006ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006f2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80006f4:	f000 f824 	bl	8000740 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80006f8:	f000 f829 	bl	800074e <Config_HSE>

  return;
 80006fc:	bf00      	nop
}
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58004000 	.word	0x58004000

08000704 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000708:	f000 f835 	bl	8000776 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800070c:	f000 f84e 	bl	80007ac <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000710:	4903      	ldr	r1, [pc, #12]	@ (8000720 <MX_APPE_Init+0x1c>)
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fd78 	bl	8001208 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000718:	f000 f858 	bl	80007cc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800071c:	bf00      	nop
}
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000020c 	.word	0x2000020c

08000724 <Init_Smps>:

void Init_Smps(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000728:	bf00      	nop
}
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <Init_Exti>:

void Init_Exti(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000736:	2050      	movs	r0, #80	@ 0x50
 8000738:	f7ff ff44 	bl	80005c4 <LL_EXTI_EnableIT_32_63>

  return;
 800073c:	bf00      	nop
}
 800073e:	bd80      	pop	{r7, pc}

08000740 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000744:	bf00      	nop
}
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000754:	2000      	movs	r0, #0
 8000756:	f007 f977 	bl	8007a48 <OTP_Read>
 800075a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d005      	beq.n	800076e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	799b      	ldrb	r3, [r3, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff40 	bl	80005ec <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800076c:	bf00      	nop
 800076e:	bf00      	nop
}
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <System_Init>:

static void System_Init(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  Init_Smps();
 800077a:	f7ff ffd3 	bl	8000724 <Init_Smps>

  Init_Exti();
 800077e:	f7ff ffd8 	bl	8000732 <Init_Exti>

  Init_Rtc();
 8000782:	f000 f803 	bl	800078c <Init_Rtc>

  return;
 8000786:	bf00      	nop
}
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <Init_Rtc>:

static void Init_Rtc(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000790:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <Init_Rtc+0x1c>)
 8000792:	f7ff ff86 	bl	80006a2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000796:	2100      	movs	r1, #0
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <Init_Rtc+0x1c>)
 800079a:	f7ff ff92 	bl	80006c2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800079e:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <Init_Rtc+0x1c>)
 80007a0:	f7ff ff72 	bl	8000688 <LL_RTC_EnableWriteProtection>

  return;
 80007a4:	bf00      	nop
}
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40002800 	.word	0x40002800

080007ac <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80007b0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80007b4:	f7ff ff38 	bl	8000628 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80007b8:	f008 f9cc 	bl	8008b54 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff feeb 	bl	8000598 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80007c2:	f002 f9b7 	bl	8002b34 <HAL_PWREx_EnableSRAMRetention>

  return;
 80007c6:	bf00      	nop
}
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80007d2:	f006 fef7 	bl	80075c4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <appe_Tl_Init+0x50>)
 80007d8:	2100      	movs	r1, #0
 80007da:	2010      	movs	r0, #16
 80007dc:	f008 faf8 	bl	8008dd0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <appe_Tl_Init+0x54>)
 80007e2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <appe_Tl_Init+0x58>)
 80007e6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	480e      	ldr	r0, [pc, #56]	@ (8000828 <appe_Tl_Init+0x5c>)
 80007ee:	f006 fdab 	bl	8007348 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <appe_Tl_Init+0x60>)
 80007f4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <appe_Tl_Init+0x64>)
 80007f8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <appe_Tl_Init+0x68>)
 80007fc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007fe:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000802:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f007 f81d 	bl	8007848 <TL_MM_Init>

  TL_Enable();
 800080e:	f006 fed3 	bl	80075b8 <TL_Enable>

  return;
 8000812:	bf00      	nop
}
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08007381 	.word	0x08007381
 8000820:	20030734 	.word	0x20030734
 8000824:	08000839 	.word	0x08000839
 8000828:	08000851 	.word	0x08000851
 800082c:	2003094c 	.word	0x2003094c
 8000830:	20030840 	.word	0x20030840
 8000834:	200301f8 	.word	0x200301f8

08000838 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000842:	bf00      	nop
}
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	330b      	adds	r3, #11
 800085e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800086a:	2b07      	cmp	r3, #7
 800086c:	d81f      	bhi.n	80008ae <APPE_SysUserEvtRx+0x5e>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <APPE_SysUserEvtRx+0x24>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000895 	.word	0x08000895
 8000878:	080008a7 	.word	0x080008a7
 800087c:	080008af 	.word	0x080008af
 8000880:	080008af 	.word	0x080008af
 8000884:	080008af 	.word	0x080008af
 8000888:	080008af 	.word	0x080008af
 800088c:	080008af 	.word	0x080008af
 8000890:	080008af 	.word	0x080008af
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4618      	mov	r0, r3
 800089a:	f006 fb0b 	bl	8006eb4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 f81b 	bl	80008da <APPE_SysEvtReadyProcessing>
    break;
 80008a4:	e004      	b.n	80008b0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f806 	bl	80008b8 <APPE_SysEvtError>
    break;
 80008ac:	e000      	b.n	80008b0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80008ae:	bf00      	nop
  }

  return;
 80008b0:	bf00      	nop
}
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	330b      	adds	r3, #11
 80008c6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3302      	adds	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80008ce:	bf00      	nop
}
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b08a      	sub	sp, #40	@ 0x28
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	330b      	adds	r3, #11
 80008fe:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	3302      	adds	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11d      	bne.n	800094a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800090e:	f7ff fe07 	bl	8000520 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000912:	230f      	movs	r3, #15
 8000914:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000916:	237f      	movs	r3, #127	@ 0x7f
 8000918:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800091a:	f7ff fea7 	bl	800066c <LL_DBGMCU_GetRevisionID>
 800091e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000922:	b29b      	uxth	r3, r3
 8000924:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000926:	f7ff fe93 	bl	8000650 <LL_DBGMCU_GetDeviceID>
 800092a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	b29b      	uxth	r3, r3
 8000930:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4618      	mov	r0, r3
 8000938:	f006 faa6 	bl	8006e88 <SHCI_C2_Config>

    APP_BLE_Init();
 800093c:	f007 f98e 	bl	8007c5c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f008 f918 	bl	8008b78 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000948:	e007      	b.n	800095a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d103      	bne.n	800095a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
  return;
 8000958:	bf00      	nop
 800095a:	bf00      	nop
}
 800095c:	3728      	adds	r7, #40	@ 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000966:	f04f 30ff 	mov.w	r0, #4294967295
 800096a:	f008 f935 	bl	8008bd8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}

08000972 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000976:	bf00      	nop
}
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	f008 f923 	bl	8008bd8 <UTIL_SEQ_Run>
  return;
 8000992:	bf00      	nop
}
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2010      	movs	r0, #16
 80009a6:	f008 fa35 	bl	8008e14 <UTIL_SEQ_SetTask>
  return;
 80009aa:	bf00      	nop
}
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80009ba:	2002      	movs	r0, #2
 80009bc:	f008 fa96 	bl	8008eec <UTIL_SEQ_SetEvt>
  return;
 80009c0:	bf00      	nop
}
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f008 faab 	bl	8008f2c <UTIL_SEQ_WaitEvt>
  return;
 80009d6:	bf00      	nop
}
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <LL_EXTI_EnableIT_0_31>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <LL_EXTI_EnableIT_0_31+0x24>)
 80009ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80009ee:	4905      	ldr	r1, [pc, #20]	@ (8000a04 <LL_EXTI_EnableIT_0_31+0x24>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58000800 	.word	0x58000800

08000a08 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4904      	ldr	r1, [pc, #16]	@ (8000a28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	600b      	str	r3, [r1, #0]

}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	58000800 	.word	0x58000800

08000a2c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a42:	e005      	b.n	8000a50 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <ReadRtcSsrValue+0x3c>)
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d1f5      	bne.n	8000a44 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a58:	683b      	ldr	r3, [r7, #0]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40002800 	.word	0x40002800

08000a6c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	491d      	ldr	r1, [pc, #116]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3315      	adds	r3, #21
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d009      	beq.n	8000aaa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	4916      	ldr	r1, [pc, #88]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	4911      	ldr	r1, [pc, #68]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3315      	adds	r3, #21
 8000aba:	7bfa      	ldrb	r2, [r7, #15]
 8000abc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	490c      	ldr	r1, [pc, #48]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79ba      	ldrb	r2, [r7, #6]
 8000ad0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	4907      	ldr	r1, [pc, #28]	@ (8000af4 <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	701a      	strb	r2, [r3, #0]

  return;
 8000ae6:	bf00      	nop
}
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000130 	.word	0x20000130

08000af8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <LinkTimerBefore+0xb8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	79ba      	ldrb	r2, [r7, #6]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d032      	beq.n	8000b7a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	4927      	ldr	r1, [pc, #156]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3314      	adds	r3, #20
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b28:	7bfa      	ldrb	r2, [r7, #15]
 8000b2a:	4922      	ldr	r1, [pc, #136]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3315      	adds	r3, #21
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	491d      	ldr	r1, [pc, #116]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3315      	adds	r3, #21
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	4918      	ldr	r1, [pc, #96]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3314      	adds	r3, #20
 8000b60:	7bfa      	ldrb	r2, [r7, #15]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	4913      	ldr	r1, [pc, #76]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3314      	adds	r3, #20
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b78:	e014      	b.n	8000ba4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	440b      	add	r3, r1
 8000b88:	3315      	adds	r3, #21
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8e:	79ba      	ldrb	r2, [r7, #6]
 8000b90:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <LinkTimerBefore+0xbc>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3314      	adds	r3, #20
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	701a      	strb	r2, [r3, #0]
  return;
 8000ba2:	bf00      	nop
}
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200001c0 	.word	0x200001c0
 8000bb4:	20000130 	.word	0x20000130

08000bb8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cfc <linkTimer+0x144>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d118      	bne.n	8000bfe <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <linkTimer+0x144>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d00 <linkTimer+0x148>)
 8000bd4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bd6:	4a49      	ldr	r2, [pc, #292]	@ (8000cfc <linkTimer+0x144>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	4949      	ldr	r1, [pc, #292]	@ (8000d04 <linkTimer+0x14c>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	3315      	adds	r3, #21
 8000bec:	2206      	movs	r2, #6
 8000bee:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bf0:	4b45      	ldr	r3, [pc, #276]	@ (8000d08 <linkTimer+0x150>)
 8000bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	81fb      	strh	r3, [r7, #14]
 8000bfc:	e078      	b.n	8000cf0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bfe:	f000 f909 	bl	8000e14 <ReturnTimeElapsed>
 8000c02:	4603      	mov	r3, r0
 8000c04:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	493e      	ldr	r1, [pc, #248]	@ (8000d04 <linkTimer+0x14c>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	3308      	adds	r3, #8
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	4419      	add	r1, r3
 8000c1e:	4839      	ldr	r0, [pc, #228]	@ (8000d04 <linkTimer+0x14c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4403      	add	r3, r0
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	4934      	ldr	r1, [pc, #208]	@ (8000d04 <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c42:	4b2e      	ldr	r3, [pc, #184]	@ (8000cfc <linkTimer+0x144>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d04 <linkTimer+0x14c>)
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	440b      	add	r3, r1
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	3308      	adds	r3, #8
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d337      	bcc.n	8000cd0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <linkTimer+0x144>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c66:	7b7a      	ldrb	r2, [r7, #13]
 8000c68:	4926      	ldr	r1, [pc, #152]	@ (8000d04 <linkTimer+0x14c>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	3315      	adds	r3, #21
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c7a:	e013      	b.n	8000ca4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c7c:	7b7a      	ldrb	r2, [r7, #13]
 8000c7e:	4921      	ldr	r1, [pc, #132]	@ (8000d04 <linkTimer+0x14c>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	3315      	adds	r3, #21
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c90:	7b7a      	ldrb	r2, [r7, #13]
 8000c92:	491c      	ldr	r1, [pc, #112]	@ (8000d04 <linkTimer+0x14c>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3315      	adds	r3, #21
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca4:	7b3b      	ldrb	r3, [r7, #12]
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d00b      	beq.n	8000cc2 <linkTimer+0x10a>
 8000caa:	7b3a      	ldrb	r2, [r7, #12]
 8000cac:	4915      	ldr	r1, [pc, #84]	@ (8000d04 <linkTimer+0x14c>)
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3308      	adds	r3, #8
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d2dc      	bcs.n	8000c7c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cc2:	7b7a      	ldrb	r2, [r7, #13]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fecf 	bl	8000a6c <LinkTimerAfter>
 8000cce:	e00f      	b.n	8000cf0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <linkTimer+0x144>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff0c 	bl	8000af8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <linkTimer+0x144>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <linkTimer+0x148>)
 8000ce8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cea:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <linkTimer+0x144>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001c0 	.word	0x200001c0
 8000d00:	200001c1 	.word	0x200001c1
 8000d04:	20000130 	.word	0x20000130
 8000d08:	200001c4 	.word	0x200001c4

08000d0c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d1c:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	79fa      	ldrb	r2, [r7, #7]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d111      	bne.n	8000d4c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <UnlinkTimer+0xfc>)
 8000d30:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	4935      	ldr	r1, [pc, #212]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3315      	adds	r3, #21
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b2f      	ldr	r3, [pc, #188]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e03e      	b.n	8000dca <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	492f      	ldr	r1, [pc, #188]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	3314      	adds	r3, #20
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	492a      	ldr	r1, [pc, #168]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3315      	adds	r3, #21
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d74:	79f9      	ldrb	r1, [r7, #7]
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	4824      	ldr	r0, [pc, #144]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	440b      	add	r3, r1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4403      	add	r3, r0
 8000d84:	3315      	adds	r3, #21
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2d8      	uxtb	r0, r3
 8000d8a:	4920      	ldr	r1, [pc, #128]	@ (8000e0c <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	4602      	mov	r2, r0
 8000d9a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d013      	beq.n	8000dca <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000da2:	79f9      	ldrb	r1, [r7, #7]
 8000da4:	7bba      	ldrb	r2, [r7, #14]
 8000da6:	4819      	ldr	r0, [pc, #100]	@ (8000e0c <UnlinkTimer+0x100>)
 8000da8:	460b      	mov	r3, r1
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	440b      	add	r3, r1
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4403      	add	r3, r0
 8000db2:	3314      	adds	r3, #20
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2d8      	uxtb	r0, r3
 8000db8:	4914      	ldr	r1, [pc, #80]	@ (8000e0c <UnlinkTimer+0x100>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3314      	adds	r3, #20
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	490f      	ldr	r1, [pc, #60]	@ (8000e0c <UnlinkTimer+0x100>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	330c      	adds	r3, #12
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <UnlinkTimer+0xf8>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	d107      	bne.n	8000df8 <UnlinkTimer+0xec>
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <UnlinkTimer+0x104>)
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
}
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200001c0 	.word	0x200001c0
 8000e08:	200001c1 	.word	0x200001c1
 8000e0c:	20000130 	.word	0x20000130
 8000e10:	200001c4 	.word	0x200001c4

08000e14 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e22:	d026      	beq.n	8000e72 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e24:	f7ff fe02 	bl	8000a2c <ReadRtcSsrValue>
 8000e28:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d805      	bhi.n	8000e40 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	e00a      	b.n	8000e56 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <ReturnTimeElapsed+0x74>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <ReturnTimeElapsed+0x70>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <ReturnTimeElapsed+0x78>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <ReturnTimeElapsed+0x7c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	40d3      	lsrs	r3, r2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	b29b      	uxth	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001c4 	.word	0x200001c4
 8000e88:	200001cc 	.word	0x200001cc
 8000e8c:	200001ca 	.word	0x200001ca
 8000e90:	200001c9 	.word	0x200001c9

08000e94 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d108      	bne.n	8000eb6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ea4:	f7ff fdc2 	bl	8000a2c <ReadRtcSsrValue>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a21      	ldr	r2, [pc, #132]	@ (8000f30 <RestartWakeupCounter+0x9c>)
 8000eac:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f001 fb91 	bl	80025d6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000eb4:	e039      	b.n	8000f2a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d803      	bhi.n	8000ec4 <RestartWakeupCounter+0x30>
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <RestartWakeupCounter+0xa0>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000eca:	bf00      	nop
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000eea:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <RestartWakeupCounter+0xa8>)
 8000eee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ef2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f001 fb7c 	bl	80025f2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <RestartWakeupCounter+0xac>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	490e      	ldr	r1, [pc, #56]	@ (8000f40 <RestartWakeupCounter+0xac>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f0a:	f7ff fd8f 	bl	8000a2c <ReadRtcSsrValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <RestartWakeupCounter+0x9c>)
 8000f12:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <RestartWakeupCounter+0xa4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f22:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f24:	f3af 8000 	nop.w
  return ;
 8000f28:	bf00      	nop
}
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001c4 	.word	0x200001c4
 8000f34:	200001c9 	.word	0x200001c9
 8000f38:	2000020c 	.word	0x2000020c
 8000f3c:	58000800 	.word	0x58000800
 8000f40:	40002800 	.word	0x40002800

08000f44 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f4a:	4b45      	ldr	r3, [pc, #276]	@ (8001060 <RescheduleTimerList+0x11c>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f56:	d107      	bne.n	8000f68 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f58:	bf00      	nop
 8000f5a:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f8      	bne.n	8000f5a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f68:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <RescheduleTimerList+0x120>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f76:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f78:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <RescheduleTimerList+0x124>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	493a      	ldr	r1, [pc, #232]	@ (800106c <RescheduleTimerList+0x128>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f92:	f7ff ff3f 	bl	8000e14 <ReturnTimeElapsed>
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d205      	bcs.n	8000fae <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e04d      	b.n	800104a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	4a30      	ldr	r2, [pc, #192]	@ (8001074 <RescheduleTimerList+0x130>)
 8000fb2:	8812      	ldrh	r2, [r2, #0]
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d906      	bls.n	8000fce <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <RescheduleTimerList+0x130>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e03d      	b.n	800104a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <RescheduleTimerList+0x12c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fde:	e034      	b.n	800104a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	4922      	ldr	r1, [pc, #136]	@ (800106c <RescheduleTimerList+0x128>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	440b      	add	r3, r1
 8000fee:	3308      	adds	r3, #8
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d20a      	bcs.n	800100e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	491c      	ldr	r1, [pc, #112]	@ (800106c <RescheduleTimerList+0x128>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	3308      	adds	r3, #8
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e013      	b.n	8001036 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	4916      	ldr	r1, [pc, #88]	@ (800106c <RescheduleTimerList+0x128>)
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3308      	adds	r3, #8
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	1ac9      	subs	r1, r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	@ (800106c <RescheduleTimerList+0x128>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4403      	add	r3, r0
 8001032:	3308      	adds	r3, #8
 8001034:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	490c      	ldr	r1, [pc, #48]	@ (800106c <RescheduleTimerList+0x128>)
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3315      	adds	r3, #21
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	2b06      	cmp	r3, #6
 800104e:	d1c7      	bne.n	8000fe0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff1e 	bl	8000e94 <RestartWakeupCounter>

  return ;
 8001058:	bf00      	nop
}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40002800 	.word	0x40002800
 8001064:	2000020c 	.word	0x2000020c
 8001068:	200001c0 	.word	0x200001c0
 800106c:	20000130 	.word	0x20000130
 8001070:	200001c8 	.word	0x200001c8
 8001074:	200001ce 	.word	0x200001ce

08001078 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800107e:	f3ef 8310 	mrs	r3, PRIMASK
 8001082:	617b      	str	r3, [r7, #20]
  return(result);
 8001084:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800108c:	4b59      	ldr	r3, [pc, #356]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	22ca      	movs	r2, #202	@ 0xca
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
 8001094:	4b57      	ldr	r3, [pc, #348]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2253      	movs	r2, #83	@ 0x53
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800109c:	4b55      	ldr	r3, [pc, #340]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010aa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010ac:	4b52      	ldr	r3, [pc, #328]	@ (80011f8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010b8:	4950      	ldr	r1, [pc, #320]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	330c      	adds	r3, #12
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d16e      	bne.n	80011ac <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010d2:	494a      	ldr	r1, [pc, #296]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80010e6:	4945      	ldr	r1, [pc, #276]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	3310      	adds	r3, #16
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010f8:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d04c      	beq.n	800119c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001102:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001106:	493d      	ldr	r1, [pc, #244]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	330d      	adds	r3, #13
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d124      	bne.n	8001166 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800111c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001120:	2101      	movs	r1, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fdf2 	bl	8000d0c <UnlinkTimer>
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f383 8810 	msr	PRIMASK, r3
}
 8001132:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001134:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001138:	4930      	ldr	r1, [pc, #192]	@ (80011fc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	3304      	adds	r3, #4
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f9b8 	bl	80014c4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	22ca      	movs	r2, #202	@ 0xca
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
 800115c:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2253      	movs	r2, #83	@ 0x53
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
 8001164:	e012      	b.n	800118c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f383 8810 	msr	PRIMASK, r3
}
 8001170:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001172:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f920 	bl	80013bc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800117c:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	22ca      	movs	r2, #202	@ 0xca
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	@ 0x53
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800118c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	4619      	mov	r1, r3
 8001194:	69b8      	ldr	r0, [r7, #24]
 8001196:	f000 fa1b 	bl	80015d0 <HW_TS_RTC_Int_AppNot>
 800119a:	e022      	b.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800119c:	f7ff fed2 	bl	8000f44 <RescheduleTimerList>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f383 8810 	msr	PRIMASK, r3
}
 80011aa:	e01a      	b.n	80011e2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011ac:	bf00      	nop
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f8      	beq.n	80011ae <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80011cc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f383 8810 	msr	PRIMASK, r3
}
 80011e0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80011ea:	bf00      	nop
}
 80011ec:	3728      	adds	r7, #40	@ 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000020c 	.word	0x2000020c
 80011f8:	200001c0 	.word	0x200001c0
 80011fc:	20000130 	.word	0x20000130
 8001200:	200001c8 	.word	0x200001c8
 8001204:	58000800 	.word	0x58000800

08001208 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001214:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <HW_TS_Init+0x188>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	22ca      	movs	r2, #202	@ 0xca
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24
 800121c:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <HW_TS_Init+0x188>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2253      	movs	r2, #83	@ 0x53
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001224:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <HW_TS_Init+0x18c>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a5a      	ldr	r2, [pc, #360]	@ (8001394 <HW_TS_Init+0x18c>)
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001230:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <HW_TS_Init+0x18c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f1c3 0304 	rsb	r3, r3, #4
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <HW_TS_Init+0x190>)
 8001244:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001246:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <HW_TS_Init+0x18c>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800124e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001252:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	fa92 f2a2 	rbit	r2, r2
 800125a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	2a00      	cmp	r2, #0
 8001264:	d101      	bne.n	800126a <HW_TS_Init+0x62>
  {
    return 32U;
 8001266:	2220      	movs	r2, #32
 8001268:	e003      	b.n	8001272 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	40d3      	lsrs	r3, r2
 8001274:	b2db      	uxtb	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b48      	ldr	r3, [pc, #288]	@ (800139c <HW_TS_Init+0x194>)
 800127c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800127e:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <HW_TS_Init+0x18c>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	b29b      	uxth	r3, r3
 8001284:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001288:	b29b      	uxth	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b44      	ldr	r3, [pc, #272]	@ (80013a0 <HW_TS_Init+0x198>)
 8001290:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HW_TS_Init+0x198>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	4a40      	ldr	r2, [pc, #256]	@ (800139c <HW_TS_Init+0x194>)
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80012a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001398 <HW_TS_Init+0x190>)
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	40d3      	lsrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d904      	bls.n	80012c0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <HW_TS_Init+0x19c>)
 80012b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	e003      	b.n	80012c8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HW_TS_Init+0x19c>)
 80012c6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80012cc:	f7ff fb9c 	bl	8000a08 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012d0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80012d4:	f7ff fb84 	bl	80009e0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d13d      	bne.n	800135a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012de:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <HW_TS_Init+0x1a0>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012e4:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <HW_TS_Init+0x1a4>)
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ea:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	77fb      	strb	r3, [r7, #31]
 80012f0:	e00c      	b.n	800130c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012f2:	7ffa      	ldrb	r2, [r7, #31]
 80012f4:	492e      	ldr	r1, [pc, #184]	@ (80013b0 <HW_TS_Init+0x1a8>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	330c      	adds	r3, #12
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	3301      	adds	r3, #1
 800130a:	77fb      	strb	r3, [r7, #31]
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d9ef      	bls.n	80012f2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001312:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <HW_TS_Init+0x1ac>)
 8001314:	2206      	movs	r2, #6
 8001316:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HW_TS_Init+0x188>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <HW_TS_Init+0x188>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001326:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HW_TS_Init+0x188>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HW_TS_Init+0x188>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001338:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <HW_TS_Init+0x1b0>)
 800133c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001340:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001342:	2003      	movs	r0, #3
 8001344:	f001 f955 	bl	80025f2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HW_TS_Init+0x188>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <HW_TS_Init+0x188>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e009      	b.n	800136e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HW_TS_Init+0x188>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001368:	2003      	movs	r0, #3
 800136a:	f001 f934 	bl	80025d6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <HW_TS_Init+0x188>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	22ff      	movs	r2, #255	@ 0xff
 8001374:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001376:	2200      	movs	r2, #0
 8001378:	2103      	movs	r1, #3
 800137a:	2003      	movs	r0, #3
 800137c:	f001 f8e9 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001380:	2003      	movs	r0, #3
 8001382:	f001 f900 	bl	8002586 <HAL_NVIC_EnableIRQ>

  return;
 8001386:	bf00      	nop
}
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000020c 	.word	0x2000020c
 8001394:	40002800 	.word	0x40002800
 8001398:	200001c9 	.word	0x200001c9
 800139c:	200001ca 	.word	0x200001ca
 80013a0:	200001cc 	.word	0x200001cc
 80013a4:	200001ce 	.word	0x200001ce
 80013a8:	200001c8 	.word	0x200001c8
 80013ac:	200001c4 	.word	0x200001c4
 80013b0:	20000130 	.word	0x20000130
 80013b4:	200001c0 	.word	0x200001c0
 80013b8:	58000800 	.word	0x58000800

080013bc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013c6:	f3ef 8310 	mrs	r3, PRIMASK
 80013ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80013cc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013d4:	2003      	movs	r0, #3
 80013d6:	f001 f8e4 	bl	80025a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013da:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <HW_TS_Stop+0xf0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	22ca      	movs	r2, #202	@ 0xca
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80013e2:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <HW_TS_Stop+0xf0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2253      	movs	r2, #83	@ 0x53
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4930      	ldr	r1, [pc, #192]	@ (80014b0 <HW_TS_Stop+0xf4>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	330c      	adds	r3, #12
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d142      	bne.n	8001488 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc80 	bl	8000d0c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <HW_TS_Stop+0xf8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001412:	7cfb      	ldrb	r3, [r7, #19]
 8001414:	2b06      	cmp	r3, #6
 8001416:	d12f      	bne.n	8001478 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HW_TS_Stop+0xfc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001424:	d107      	bne.n	8001436 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001426:	bf00      	nop
 8001428:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HW_TS_Stop+0xf0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f8      	bne.n	8001428 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HW_TS_Stop+0xf0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001444:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001446:	bf00      	nop
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HW_TS_Stop+0xf0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f8      	beq.n	8001448 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HW_TS_Stop+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001466:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <HW_TS_Stop+0x100>)
 800146a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800146e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001470:	2003      	movs	r0, #3
 8001472:	f001 f8be 	bl	80025f2 <HAL_NVIC_ClearPendingIRQ>
 8001476:	e007      	b.n	8001488 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HW_TS_Stop+0x104>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	7cfa      	ldrb	r2, [r7, #19]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001484:	f7ff fd5e 	bl	8000f44 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HW_TS_Stop+0xf0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	22ff      	movs	r2, #255	@ 0xff
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001490:	2003      	movs	r0, #3
 8001492:	f001 f878 	bl	8002586 <HAL_NVIC_EnableIRQ>
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f383 8810 	msr	PRIMASK, r3
}
 80014a0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014a2:	bf00      	nop
}
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000020c 	.word	0x2000020c
 80014b0:	20000130 	.word	0x20000130
 80014b4:	200001c0 	.word	0x200001c0
 80014b8:	40002800 	.word	0x40002800
 80014bc:	58000800 	.word	0x58000800
 80014c0:	200001c1 	.word	0x200001c1

080014c4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	493b      	ldr	r1, [pc, #236]	@ (80015c0 <HW_TS_Start+0xfc>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	330c      	adds	r3, #12
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d103      	bne.n	80014f0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff66 	bl	80013bc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014f0:	f3ef 8310 	mrs	r3, PRIMASK
 80014f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80014f6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014fa:	b672      	cpsid	i
}
 80014fc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014fe:	2003      	movs	r0, #3
 8001500:	f001 f84f 	bl	80025a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001504:	4b2f      	ldr	r3, [pc, #188]	@ (80015c4 <HW_TS_Start+0x100>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	22ca      	movs	r2, #202	@ 0xca
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HW_TS_Start+0x100>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2253      	movs	r2, #83	@ 0x53
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	492a      	ldr	r1, [pc, #168]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	330c      	adds	r3, #12
 8001524:	2202      	movs	r2, #2
 8001526:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	4925      	ldr	r1, [pc, #148]	@ (80015c0 <HW_TS_Start+0xfc>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	3308      	adds	r3, #8
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	4920      	ldr	r1, [pc, #128]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3304      	adds	r3, #4
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fb30 	bl	8000bb8 <linkTimer>
 8001558:	4603      	mov	r3, r0
 800155a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HW_TS_Start+0x104>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HW_TS_Start+0x108>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	7c7a      	ldrb	r2, [r7, #17]
 800156a:	429a      	cmp	r2, r3
 800156c:	d002      	beq.n	8001574 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800156e:	f7ff fce9 	bl	8000f44 <RescheduleTimerList>
 8001572:	e013      	b.n	800159c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	4912      	ldr	r1, [pc, #72]	@ (80015c0 <HW_TS_Start+0xfc>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3308      	adds	r3, #8
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	8a7b      	ldrh	r3, [r7, #18]
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	1ac9      	subs	r1, r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <HW_TS_Start+0xfc>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4403      	add	r3, r0
 8001598:	3308      	adds	r3, #8
 800159a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HW_TS_Start+0x100>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	22ff      	movs	r2, #255	@ 0xff
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 ffee 	bl	8002586 <HAL_NVIC_EnableIRQ>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	f383 8810 	msr	PRIMASK, r3
}
 80015b4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015b6:	bf00      	nop
}
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000130 	.word	0x20000130
 80015c4:	2000020c 	.word	0x2000020c
 80015c8:	200001c0 	.word	0x200001c0
 80015cc:	200001c1 	.word	0x200001c1

080015d0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	460b      	mov	r3, r1
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4798      	blx	r3

  return;
 80015e2:	bf00      	nop
}
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <LL_RCC_LSE_SetDriveCapability>:
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fa:	f023 0218 	bic.w	r2, r3, #24
 80015fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4313      	orrs	r3, r2
 8001606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) //function used to print() in usart
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d102      	bne.n	800165c <__io_putchar+0x14>
    __io_putchar('\r');
 8001656:	200d      	movs	r0, #13
 8001658:	f7ff fff6 	bl	8001648 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	2201      	movs	r2, #1
 8001664:	4803      	ldr	r0, [pc, #12]	@ (8001674 <__io_putchar+0x2c>)
 8001666:	f003 fba3 	bl	8004db0 <HAL_UART_Transmit>

  return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000027c 	.word	0x2000027c

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167e:	f000 fda7 	bl	80021d0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001682:	f7ff f831 	bl	80006e8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 f82f 	bl	80016e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800168a:	f000 f881 	bl	8001790 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800168e:	f000 f89f 	bl	80017d0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001692:	f000 f8b1 	bl	80017f8 <MX_RF_Init>
  MX_GPIO_Init();
 8001696:	f000 f987 	bl	80019a8 <MX_GPIO_Init>
  MX_RTC_Init();
 800169a:	f000 f8b5 	bl	8001808 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800169e:	f000 f937 	bl	8001910 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80016a2:	f000 f8e1 	bl	8001868 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80016a6:	f7ff f82d 	bl	8000704 <MX_APPE_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 fcb0 	bl	8002010 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f000 fcad 	bl	8002010 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f000 fcaa 	bl	8002010 <BSP_LED_Init>

  /* Initialize User push-button without interrupt mode. */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_GPIO);
 80016bc:	2100      	movs	r1, #0
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 fce0 	bl	8002084 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_GPIO);
 80016c4:	2100      	movs	r1, #0
 80016c6:	2001      	movs	r0, #1
 80016c8:	f000 fcdc 	bl	8002084 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_GPIO);
 80016cc:	2100      	movs	r1, #0
 80016ce:	2002      	movs	r0, #2
 80016d0:	f000 fcd8 	bl	8002084 <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_time = 0;  // Przechowuje czas ostatniego wysłania danych
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  printf("Starting");
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <main+0x6c>)
 80016da:	f007 fd59 	bl	8009190 <iprintf>
//  HAL_TIM_Base_Start_IT(&htim1);
  while (1)
  {

    /* USER CODE END WHILE */
    MX_APPE_Process();
 80016de:	f7ff f940 	bl	8000962 <MX_APPE_Process>
 80016e2:	e7fc      	b.n	80016de <main+0x66>
 80016e4:	08009f34 	.word	0x08009f34

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b098      	sub	sp, #96	@ 0x60
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	2244      	movs	r2, #68	@ 0x44
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fda7 	bl	800924a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800170e:	f001 f9f1 	bl	8002af4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff ff69 	bl	80015ea <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001718:	2327      	movs	r3, #39	@ 0x27
 800171a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001730:	2340      	movs	r3, #64	@ 0x40
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001738:	23a0      	movs	r3, #160	@ 0xa0
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fd3d 	bl	80031c4 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001750:	f000 f94c 	bl	80019ec <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001754:	236f      	movs	r3, #111	@ 0x6f
 8001756:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001770:	463b      	mov	r3, r7
 8001772:	2101      	movs	r1, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f002 f85b 	bl	8003830 <HAL_RCC_ClockConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001780:	f000 f934 	bl	80019ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001784:	f002 fd1b 	bl	80041be <HAL_RCCEx_EnableMSIPLLMode>
}
 8001788:	bf00      	nop
 800178a:	3760      	adds	r7, #96	@ 0x60
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	@ 0x30
 8001794:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2230      	movs	r2, #48	@ 0x30
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f007 fd54 	bl	800924a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80017a2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80017a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80017b2:	2310      	movs	r3, #16
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 fc0a 	bl	8003fd2 <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80017c4:	f000 f912 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	@ 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <MX_IPCC_Init+0x20>)
 80017d6:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <MX_IPCC_Init+0x24>)
 80017d8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_IPCC_Init+0x20>)
 80017dc:	f001 f904 	bl	80029e8 <HAL_IPCC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80017e6:	f000 f901 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200001d0 	.word	0x200001d0
 80017f4:	58000c00 	.word	0x58000c00

080017f8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_RTC_Init+0x58>)
 800180e:	4a15      	ldr	r2, [pc, #84]	@ (8001864 <MX_RTC_Init+0x5c>)
 8001810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_RTC_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_RTC_Init+0x58>)
 800181a:	220f      	movs	r2, #15
 800181c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_RTC_Init+0x58>)
 8001820:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001824:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_RTC_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_RTC_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <MX_RTC_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001838:	4809      	ldr	r0, [pc, #36]	@ (8001860 <MX_RTC_Init+0x58>)
 800183a:	f002 fcc7 	bl	80041cc <HAL_RTC_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001844:	f000 f8d2 	bl	80019ec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_RTC_Init+0x58>)
 800184e:	f002 fdbd 	bl	80043cc <HAL_RTCEx_SetWakeUpTimer_IT>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001858:	f000 f8c8 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000020c 	.word	0x2000020c
 8001864:	40002800 	.word	0x40002800

08001868 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <MX_TIM1_Init+0xa0>)
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <MX_TIM1_Init+0xa4>)
 800188a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <MX_TIM1_Init+0xa0>)
 800188e:	223f      	movs	r2, #63	@ 0x3f
 8001890:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <MX_TIM1_Init+0xa0>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <MX_TIM1_Init+0xa0>)
 800189a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800189e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b2:	4815      	ldr	r0, [pc, #84]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018b4:	f002 fe46 	bl	8004544 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018be:	f000 f895 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	480e      	ldr	r0, [pc, #56]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018d0:	f002 ff96 	bl	8004800 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018da:	f000 f887 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <MX_TIM1_Init+0xa0>)
 80018f0:	f003 f970 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018fa:	f000 f877 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000230 	.word	0x20000230
 800190c:	40012c00 	.word	0x40012c00

08001910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001916:	4a23      	ldr	r2, [pc, #140]	@ (80019a4 <MX_USART1_UART_Init+0x94>)
 8001918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800191c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001946:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001952:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001958:	4811      	ldr	r0, [pc, #68]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800195a:	f003 f9d9 	bl	8004d10 <HAL_UART_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001964:	f000 f842 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001968:	2100      	movs	r1, #0
 800196a:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800196c:	f003 ff2e 	bl	80057cc <HAL_UARTEx_SetTxFifoThreshold>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001976:	f000 f839 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	4808      	ldr	r0, [pc, #32]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800197e:	f003 ff63 	bl	8005848 <HAL_UARTEx_SetRxFifoThreshold>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001988:	f000 f830 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	@ (80019a0 <MX_USART1_UART_Init+0x90>)
 800198e:	f003 fee4 	bl	800575a <HAL_UARTEx_DisableFifoMode>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001998:	f000 f828 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000027c 	.word	0x2000027c
 80019a4:	40013800 	.word	0x40013800

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	2004      	movs	r0, #4
 80019ae:	f7ff fe32 	bl	8001616 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff fe2f 	bl	8001616 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7ff fe2c 	bl	8001616 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // Gdzie TIMx to timer skonfigurowany na 100 ms
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d103      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
    	UTIL_SEQ_SetTask(1 << CFG_TASK_TIMER_SECOND_ID, CFG_SCH_PRIO_0);
 80019d6:	2100      	movs	r1, #0
 80019d8:	2008      	movs	r0, #8
 80019da:	f007 fa1b 	bl	8008e14 <UTIL_SEQ_SetTask>
    }
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012c00 	.word	0x40012c00

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_AHB2_GRP1_EnableClock>:
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001abc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001abe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001acc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001ae6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001aea:	f7ff ffaf 	bl	8001a4c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	202e      	movs	r0, #46	@ 0x2e
 8001af4:	f000 fd2d 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001af8:	202e      	movs	r0, #46	@ 0x2e
 8001afa:	f000 fd44 	bl	8002586 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <HAL_IPCC_MspInit+0x44>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d113      	bne.n	8001b3e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001b16:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001b1a:	f7ff ff97 	bl	8001a4c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	202c      	movs	r0, #44	@ 0x2c
 8001b24:	f000 fd15 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001b28:	202c      	movs	r0, #44	@ 0x2c
 8001b2a:	f000 fd2c 	bl	8002586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	202d      	movs	r0, #45	@ 0x2d
 8001b34:	f000 fd0d 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001b38:	202d      	movs	r0, #45	@ 0x2d
 8001b3a:	f000 fd24 	bl	8002586 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	58000c00 	.word	0x58000c00

08001b4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	@ 0x38
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2230      	movs	r2, #48	@ 0x30
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f007 fb74 	bl	800924a <memset>
  if(hrtc->Instance==RTC)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <HAL_RTC_MspInit+0x64>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d11d      	bne.n	8001ba8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b70:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fa28 	bl	8003fd2 <HAL_RCCEx_PeriphCLKConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b88:	f7ff ff30 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b8c:	f7ff ff34 	bl	80019f8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b94:	f7ff ff73 	bl	8001a7e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 fcd8 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	f000 fcef 	bl	8002586 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001ba8:	bf00      	nop
 8001baa:	3738      	adds	r7, #56	@ 0x38
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40002800 	.word	0x40002800

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a15      	ldr	r2, [pc, #84]	@ (8001c18 <HAL_TIM_Base_MspInit+0x64>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d123      	bne.n	8001c0e <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001bca:	f7ff ff71 	bl	8001ab0 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2018      	movs	r0, #24
 8001bd4:	f000 fcbd 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001bd8:	2018      	movs	r0, #24
 8001bda:	f000 fcd4 	bl	8002586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2019      	movs	r0, #25
 8001be4:	f000 fcb5 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001be8:	2019      	movs	r0, #25
 8001bea:	f000 fccc 	bl	8002586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	201a      	movs	r0, #26
 8001bf4:	f000 fcad 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001bf8:	201a      	movs	r0, #26
 8001bfa:	f000 fcc4 	bl	8002586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	201b      	movs	r0, #27
 8001c04:	f000 fca5 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c08:	201b      	movs	r0, #27
 8001c0a:	f000 fcbc 	bl	8002586 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40012c00 	.word	0x40012c00

08001c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	@ 0x50
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2230      	movs	r2, #48	@ 0x30
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f007 fb04 	bl	800924a <memset>
  if(huart->Instance==USART1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a17      	ldr	r2, [pc, #92]	@ (8001ca4 <HAL_UART_MspInit+0x88>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d126      	bne.n	8001c9a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 f9ba 	bl	8003fd2 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c64:	f7ff fec2 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c68:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c6c:	f7ff ff20 	bl	8001ab0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff fed2 	bl	8001a1a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c96:	f000 fce9 	bl	800266c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3750      	adds	r7, #80	@ 0x50
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40013800 	.word	0x40013800

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <NMI_Handler+0x4>

08001cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfe:	f000 fac1 	bl	8002284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d0a:	f7ff f9b5 	bl	8001078 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <TIM1_BRK_IRQHandler+0x10>)
 8001d1a:	f002 fc6a 	bl	80045f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000230 	.word	0x20000230

08001d28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <TIM1_UP_IRQHandler+0x10>)
 8001d2e:	f002 fc60 	bl	80045f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000230 	.word	0x20000230

08001d3c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Communication Interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001d42:	f002 fc56 	bl	80045f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000230 	.word	0x20000230

08001d50 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM1_CC_IRQHandler+0x10>)
 8001d56:	f002 fc4c 	bl	80045f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000230 	.word	0x20000230

08001d64 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001d68:	f006 fdb6 	bl	80088d8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001d74:	f006 fde6 	bl	8008944 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d80:	f000 fe0e 	bl	80029a0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00a      	b.n	8001db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d9a:	f3af 8000 	nop.w
 8001d9e:	4601      	mov	r1, r0
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	b2ca      	uxtb	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf0      	blt.n	8001d9a <_read+0x12>
  }

  return len;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e009      	b.n	8001de8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fc33 	bl	8001648 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <_write+0x12>
  }
  return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_close>:

int _close(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e22:	605a      	str	r2, [r3, #4]
  return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_isatty>:

int _isatty(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f007 fa28 	bl	80092e8 <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	@ (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20003000 	.word	0x20003000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	20000310 	.word	0x20000310
 8001ecc:	20000830 	.word	0x20000830

08001ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001ed4:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <SystemInit+0x90>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eda:	4a21      	ldr	r2, [pc, #132]	@ (8001f60 <SystemInit+0x90>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001efc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <SystemInit+0x94>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f1a:	f023 0305 	bic.w	r3, r3, #5
 8001f1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f68 <SystemInit+0x98>)
 8001f3c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	faf6fefb 	.word	0xfaf6fefb
 8001f68:	22041000 	.word	0x22041000

08001f6c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f6c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f70:	3304      	adds	r3, #4

08001f72 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f72:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f74:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001f76:	d3f9      	bcc.n	8001f6c <CopyDataInit>
  bx lr
 8001f78:	4770      	bx	lr

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001f7a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001f7c:	3004      	adds	r0, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001f7e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>
  bx lr
 8001f82:	4770      	bx	lr

08001f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f84:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f88:	f7ff ffa2 	bl	8001ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001f8c:	480b      	ldr	r0, [pc, #44]	@ (8001fbc <LoopForever+0x6>)
 8001f8e:	490c      	ldr	r1, [pc, #48]	@ (8001fc0 <LoopForever+0xa>)
 8001f90:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <LoopForever+0xe>)
 8001f92:	2300      	movs	r3, #0
 8001f94:	f7ff ffed 	bl	8001f72 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f98:	480b      	ldr	r0, [pc, #44]	@ (8001fc8 <LoopForever+0x12>)
 8001f9a:	490c      	ldr	r1, [pc, #48]	@ (8001fcc <LoopForever+0x16>)
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd0 <LoopForever+0x1a>)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f7ff ffe7 	bl	8001f72 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001fa4:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <LoopForever+0x1e>)
 8001fa6:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <LoopForever+0x22>)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f7ff ffe8 	bl	8001f7e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fae:	f007 f9a1 	bl	80092f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fb2:	f7ff fb61 	bl	8001678 <main>

08001fb6 <LoopForever>:

LoopForever:
  b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
  ldr   r0, =_estack
 8001fb8:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	200000c8 	.word	0x200000c8
 8001fc4:	0800a258 	.word	0x0800a258
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001fc8:	200301e4 	.word	0x200301e4
 8001fcc:	20030a67 	.word	0x20030a67
 8001fd0:	0800a35e 	.word	0x0800a35e
  INIT_BSS _sbss, _ebss
 8001fd4:	20000114 	.word	0x20000114
 8001fd8:	2000082c 	.word	0x2000082c

08001fdc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_IRQHandler>

08001fde <LL_AHB2_GRP1_EnableClock>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ffa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4013      	ands	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800202a:	2002      	movs	r0, #2
 800202c:	f7ff ffd7 	bl	8001fde <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4a12      	ldr	r2, [pc, #72]	@ (800207c <BSP_LED_Init+0x6c>)
 8002034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002038:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <BSP_LED_Init+0x70>)
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	f107 020c 	add.w	r2, r7, #12
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fb09 	bl	800266c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4a08      	ldr	r2, [pc, #32]	@ (8002080 <BSP_LED_Init+0x70>)
 800205e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4a05      	ldr	r2, [pc, #20]	@ (800207c <BSP_LED_Init+0x6c>)
 8002066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800206a:	2200      	movs	r2, #0
 800206c:	4619      	mov	r1, r3
 800206e:	f000 fc65 	bl	800293c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0800a1a4 	.word	0x0800a1a4
 8002080:	20000018 	.word	0x20000018

08002084 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	460a      	mov	r2, r1
 800208e:	71fb      	strb	r3, [r7, #7]
 8002090:	4613      	mov	r3, r2
 8002092:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <BSP_PB_Init+0x2e>
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff ff97 	bl	8001fde <LL_AHB2_GRP1_EnableClock>
 80020b0:	e00c      	b.n	80020cc <BSP_PB_Init+0x48>
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d103      	bne.n	80020c0 <BSP_PB_Init+0x3c>
 80020b8:	2010      	movs	r0, #16
 80020ba:	f7ff ff90 	bl	8001fde <LL_AHB2_GRP1_EnableClock>
 80020be:	e005      	b.n	80020cc <BSP_PB_Init+0x48>
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d102      	bne.n	80020cc <BSP_PB_Init+0x48>
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff ff89 	bl	8001fde <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4a29      	ldr	r2, [pc, #164]	@ (8002174 <BSP_PB_Init+0xf0>)
 80020d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020da:	2302      	movs	r3, #2
 80020dc:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80020de:	79bb      	ldrb	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10c      	bne.n	80020fe <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4a23      	ldr	r2, [pc, #140]	@ (8002178 <BSP_PB_Init+0xf4>)
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	f107 020c 	add.w	r2, r7, #12
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fab8 	bl	800266c <HAL_GPIO_Init>
 80020fc:	e035      	b.n	800216a <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80020fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002102:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <BSP_PB_Init+0xf4>)
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	f107 020c 	add.w	r2, r7, #12
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f000 faaa 	bl	800266c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4a17      	ldr	r2, [pc, #92]	@ (800217c <BSP_PB_Init+0xf8>)
 800211e:	441a      	add	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	4917      	ldr	r1, [pc, #92]	@ (8002180 <BSP_PB_Init+0xfc>)
 8002124:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f000 fa89 	bl	8002642 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4a11      	ldr	r2, [pc, #68]	@ (800217c <BSP_PB_Init+0xf8>)
 8002136:	1898      	adds	r0, r3, r2
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <BSP_PB_Init+0x100>)
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	461a      	mov	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	f000 fa63 	bl	800260e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <BSP_PB_Init+0x104>)
 800214c:	56d0      	ldrsb	r0, [r2, r3]
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <BSP_PB_Init+0x108>)
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	2200      	movs	r2, #0
 8002158:	4619      	mov	r1, r3
 800215a:	f000 f9fa 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	4a09      	ldr	r2, [pc, #36]	@ (8002188 <BSP_PB_Init+0x104>)
 8002162:	56d3      	ldrsb	r3, [r2, r3]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fa0e 	bl	8002586 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	0800a1ac 	.word	0x0800a1ac
 8002178:	20000024 	.word	0x20000024
 800217c:	20000314 	.word	0x20000314
 8002180:	0800a1b8 	.word	0x0800a1b8
 8002184:	20000030 	.word	0x20000030
 8002188:	0800a1b4 	.word	0x0800a1b4
 800218c:	2000003c 	.word	0x2000003c

08002190 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff fff0 	bl	8002190 <BSP_PB_Callback>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7ff ffe9 	bl	8002190 <BSP_PB_Callback>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 80021c6:	2002      	movs	r0, #2
 80021c8:	f7ff ffe2 	bl	8002190 <BSP_PB_Callback>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021da:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_Init+0x3c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <HAL_Init+0x3c>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e6:	2003      	movs	r0, #3
 80021e8:	f000 f9a8 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ec:	2000      	movs	r0, #0
 80021ee:	f000 f80f 	bl	8002210 <HAL_InitTick>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	71fb      	strb	r3, [r7, #7]
 80021fc:	e001      	b.n	8002202 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021fe:	f7ff fc70 	bl	8001ae2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002202:	79fb      	ldrb	r3, [r7, #7]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	58004000 	.word	0x58004000

08002210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800221c:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_InitTick+0x6c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d024      	beq.n	800226e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002224:	f001 fcb0 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_InitTick+0x6c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002234:	fbb3 f3f1 	udiv	r3, r3, r1
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f9be 	bl	80025be <HAL_SYSTICK_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10f      	bne.n	8002268 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b0f      	cmp	r3, #15
 800224c:	d809      	bhi.n	8002262 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224e:	2200      	movs	r2, #0
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	f04f 30ff 	mov.w	r0, #4294967295
 8002256:	f000 f97c 	bl	8002552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225a:	4a09      	ldr	r2, [pc, #36]	@ (8002280 <HAL_InitTick+0x70>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e007      	b.n	8002272 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e004      	b.n	8002272 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e001      	b.n	8002272 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000004c 	.word	0x2000004c
 8002280:	20000048 	.word	0x20000048

08002284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	2000004c 	.word	0x2000004c
 80022a8:	2000032c 	.word	0x2000032c

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000032c 	.word	0x2000032c

080022c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_GetTickPrio+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000048 	.word	0x20000048

080022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002304:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4907      	ldr	r1, [pc, #28]	@ (8002378 <__NVIC_EnableIRQ+0x38>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000e100 	.word	0xe000e100

0800237c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db12      	blt.n	80023b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	490a      	ldr	r1, [pc, #40]	@ (80023c0 <__NVIC_DisableIRQ+0x44>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	3320      	adds	r3, #32
 80023a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80023a8:	f3bf 8f4f 	dsb	sy
}
 80023ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023ae:	f3bf 8f6f 	isb	sy
}
 80023b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000e100 	.word	0xe000e100

080023c4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0c      	blt.n	80023f0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	@ (80023fc <__NVIC_SetPendingIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	3340      	adds	r3, #64	@ 0x40
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db0c      	blt.n	800242c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4907      	ldr	r1, [pc, #28]	@ (8002438 <__NVIC_ClearPendingIRQ+0x38>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	3360      	adds	r3, #96	@ 0x60
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	@ (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	@ (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	@ 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	@ (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ff8e 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fec9 	bl	80022dc <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff fee0 	bl	8002324 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff90 	bl	8002490 <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5f 	bl	800243c <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fed3 	bl	8002340 <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fee3 	bl	800237c <__NVIC_DisableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ff96 	bl	80024f8 <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff feed 	bl	80023c4 <__NVIC_SetPendingIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fefd 	bl	8002400 <__NVIC_ClearPendingIRQ>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	460b      	mov	r3, r1
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	605a      	str	r2, [r3, #4]
      break;
 800262c:	e002      	b.n	8002634 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
      break;
 8002632:	bf00      	nop
  }

  return status;
 8002634:	7dfb      	ldrb	r3, [r7, #23]
}
 8002636:	4618      	mov	r0, r3
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e003      	b.n	800265e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267a:	e146      	b.n	800290a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8138 	beq.w	8002904 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d005      	beq.n	80026ac <HAL_GPIO_Init+0x40>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d130      	bne.n	800270e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026e2:	2201      	movs	r2, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0201 	and.w	r2, r3, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b03      	cmp	r3, #3
 8002718:	d017      	beq.n	800274a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d123      	bne.n	800279e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	6939      	ldr	r1, [r7, #16]
 800279a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0203 	and.w	r2, r3, #3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8092 	beq.w	8002904 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80027e0:	4a51      	ldr	r2, [pc, #324]	@ (8002928 <HAL_GPIO_Init+0x2bc>)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	3302      	adds	r3, #2
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800280a:	d013      	beq.n	8002834 <HAL_GPIO_Init+0x1c8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a47      	ldr	r2, [pc, #284]	@ (800292c <HAL_GPIO_Init+0x2c0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00d      	beq.n	8002830 <HAL_GPIO_Init+0x1c4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a46      	ldr	r2, [pc, #280]	@ (8002930 <HAL_GPIO_Init+0x2c4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <HAL_GPIO_Init+0x1c0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a45      	ldr	r2, [pc, #276]	@ (8002934 <HAL_GPIO_Init+0x2c8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d101      	bne.n	8002828 <HAL_GPIO_Init+0x1bc>
 8002824:	2304      	movs	r3, #4
 8002826:	e006      	b.n	8002836 <HAL_GPIO_Init+0x1ca>
 8002828:	2307      	movs	r3, #7
 800282a:	e004      	b.n	8002836 <HAL_GPIO_Init+0x1ca>
 800282c:	2302      	movs	r3, #2
 800282e:	e002      	b.n	8002836 <HAL_GPIO_Init+0x1ca>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_GPIO_Init+0x1ca>
 8002834:	2300      	movs	r3, #0
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	f002 0203 	and.w	r2, r2, #3
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	4093      	lsls	r3, r2
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002846:	4938      	ldr	r1, [pc, #224]	@ (8002928 <HAL_GPIO_Init+0x2bc>)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002854:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <HAL_GPIO_Init+0x2cc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002878:	4a2f      	ldr	r2, [pc, #188]	@ (8002938 <HAL_GPIO_Init+0x2cc>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800287e:	4b2e      	ldr	r3, [pc, #184]	@ (8002938 <HAL_GPIO_Init+0x2cc>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028a2:	4a25      	ldr	r2, [pc, #148]	@ (8002938 <HAL_GPIO_Init+0x2cc>)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028a8:	4b23      	ldr	r3, [pc, #140]	@ (8002938 <HAL_GPIO_Init+0x2cc>)
 80028aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002938 <HAL_GPIO_Init+0x2cc>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80028d6:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_GPIO_Init+0x2cc>)
 80028d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002938 <HAL_GPIO_Init+0x2cc>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f aeb1 	bne.w	800267c <HAL_GPIO_Init+0x10>
  }
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40010000 	.word	0x40010000
 800292c:	48000400 	.word	0x48000400
 8002930:	48000800 	.word	0x48000800
 8002934:	48001000 	.word	0x48001000
 8002938:	58000800 	.word	0x58000800

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002958:	e002      	b.n	8002960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43d9      	mvns	r1, r3
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	400b      	ands	r3, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	619a      	str	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_HSEM_IRQHandler+0x30>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80029ac:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <HAL_HSEM_IRQHandler+0x30>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4906      	ldr	r1, [pc, #24]	@ (80029d0 <HAL_HSEM_IRQHandler+0x30>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80029ba:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <HAL_HSEM_IRQHandler+0x30>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f807 	bl	80029d4 <HAL_HSEM_FreeCallback>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	58001500 	.word	0x58001500

080029d4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01e      	beq.n	8002a38 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80029fa:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <HAL_IPCC_Init+0x60>)
 80029fc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff f87a 	bl	8001b04 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002a10:	68b8      	ldr	r0, [r7, #8]
 8002a12:	f000 f85b 	bl	8002acc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f82c 	bl	8002a80 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002a36:	e001      	b.n	8002a3c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	58000c00 	.word	0x58000c00

08002a4c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	4613      	mov	r3, r2
 8002a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e00f      	b.n	8002aae <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac4 <IPCC_SetDefaultCallbacks+0x44>)
 8002a98:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3306      	adds	r3, #6
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <IPCC_SetDefaultCallbacks+0x48>)
 8002aa6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d9ec      	bls.n	8002a8e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	08002a4d 	.word	0x08002a4d
 8002ac8:	08002a67 	.word	0x08002a67

08002acc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	223f      	movs	r2, #63	@ 0x3f
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af8:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a04      	ldr	r2, [pc, #16]	@ (8002b10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	58000400 	.word	0x58000400

08002b14 <LL_PWR_EnableSRAM2Retention>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b22:	6093      	str	r3, [r2, #8]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	58000400 	.word	0x58000400

08002b34 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002b38:	f7ff ffec 	bl	8002b14 <LL_PWR_EnableSRAM2Retention>
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b52:	d101      	bne.n	8002b58 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_HSE_Enable>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_HSE_Disable>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_HSE_IsReady>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bb2:	d101      	bne.n	8002bb8 <LL_RCC_HSE_IsReady+0x18>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_RCC_HSE_IsReady+0x1a>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_RCC_HSI_Enable>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_HSI_Disable>:
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bf4:	6013      	str	r3, [r2, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_RCC_HSI_IsReady>:
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c12:	d101      	bne.n	8002c18 <LL_RCC_HSI_IsReady+0x18>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <LL_RCC_HSI_IsReady+0x1a>
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_LSE_Enable>:
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_LSE_Disable>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_LSE_EnableBypass>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_RCC_LSE_DisableBypass>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_LSE_IsReady>:
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d101      	bne.n	8002cee <LL_RCC_LSE_IsReady+0x18>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_RCC_LSE_IsReady+0x1a>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_RCC_LSI1_Enable>:
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_LSI1_Disable>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_RCC_LSI1_IsReady>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d101      	bne.n	8002d56 <LL_RCC_LSI1_IsReady+0x18>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_RCC_LSI1_IsReady+0x1a>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_RCC_LSI2_Enable>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_LSI2_Disable>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_LSI2_IsReady>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d101      	bne.n	8002dbe <LL_RCC_LSI2_IsReady+0x18>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_RCC_LSI2_IsReady+0x1a>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_RCC_LSI2_SetTrimming>:
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_RCC_MSI_Enable>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_RCC_MSI_Disable>:
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6013      	str	r3, [r2, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_RCC_MSI_IsReady>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d101      	bne.n	8002e4a <LL_RCC_MSI_IsReady+0x16>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <LL_RCC_MSI_IsReady+0x18>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_MSI_SetRange>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_MSI_GetRange>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2bb0      	cmp	r3, #176	@ 0xb0
 8002e94:	d901      	bls.n	8002e9a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002e96:	23b0      	movs	r3, #176	@ 0xb0
 8002e98:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002e9a:	687b      	ldr	r3, [r7, #4]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_SetSysClkSource>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 0203 	bic.w	r2, r3, #3
 8002ee4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_GetSysClkSource>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_SetAHBPrescaler>:
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_C2_RCC_SetAHBPrescaler>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_RCC_SetAHB4Prescaler>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_RCC_SetAPB1Prescaler>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_RCC_SetAPB2Prescaler>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_GetAHBPrescaler>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_GetAHB4Prescaler>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003004:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_RCC_GetAPB1Prescaler>:
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_RCC_GetAPB2Prescaler>:
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003078:	6013      	str	r3, [r2, #0]
}
 800307a:	bf00      	nop
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003096:	d101      	bne.n	800309c <LL_RCC_PLL_IsReady+0x18>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <LL_RCC_PLL_IsReady+0x1a>
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0303 	and.w	r3, r3, #3
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311c:	d101      	bne.n	8003122 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003136:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800313a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003142:	d101      	bne.n	8003148 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003168:	d101      	bne.n	800316e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800317e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800318c:	d101      	bne.n	8003192 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031b0:	d101      	bne.n	80031b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b08d      	sub	sp, #52	@ 0x34
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e324      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 808d 	beq.w	80032fe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e4:	f7ff fe89 	bl	8002efa <LL_RCC_GetSysClkSource>
 80031e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ea:	f7ff ff82 	bl	80030f2 <LL_RCC_PLL_GetMainSource>
 80031ee:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x3e>
 80031f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d147      	bne.n	800328c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d144      	bne.n	800328c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e308      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003212:	f7ff fe34 	bl	8002e7e <LL_RCC_MSI_GetRange>
 8003216:	4603      	mov	r3, r0
 8003218:	429c      	cmp	r4, r3
 800321a:	d914      	bls.n	8003246 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fcf1 	bl	8003c08 <RCC_SetFlashLatencyFromMSIRange>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e2f7      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe0e 	bl	8002e56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fe32 	bl	8002ea8 <LL_RCC_MSI_SetCalibTrimming>
 8003244:	e013      	b.n	800326e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fe03 	bl	8002e56 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fe27 	bl	8002ea8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fcd2 	bl	8003c08 <RCC_SetFlashLatencyFromMSIRange>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e2d8      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800326e:	f000 fc8b 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003272:	4603      	mov	r3, r0
 8003274:	4aa4      	ldr	r2, [pc, #656]	@ (8003508 <HAL_RCC_OscConfig+0x344>)
 8003276:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003278:	4ba4      	ldr	r3, [pc, #656]	@ (800350c <HAL_RCC_OscConfig+0x348>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe ffc7 	bl	8002210 <HAL_InitTick>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d039      	beq.n	80032fc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e2c9      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01e      	beq.n	80032d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003294:	f7ff fdb0 	bl	8002df8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003298:	f7ff f808 	bl	80022ac <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a0:	f7ff f804 	bl	80022ac <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e2b6      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80032b2:	f7ff fdbf 	bl	8002e34 <LL_RCC_MSI_IsReady>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f1      	beq.n	80032a0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fdc8 	bl	8002e56 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fdec 	bl	8002ea8 <LL_RCC_MSI_SetCalibTrimming>
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032d2:	f7ff fda0 	bl	8002e16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d6:	f7fe ffe9 	bl	80022ac <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032de:	f7fe ffe5 	bl	80022ac <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e297      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80032f0:	f7ff fda0 	bl	8002e34 <LL_RCC_MSI_IsReady>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f1      	bne.n	80032de <HAL_RCC_OscConfig+0x11a>
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032fc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d047      	beq.n	800339a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330a:	f7ff fdf6 	bl	8002efa <LL_RCC_GetSysClkSource>
 800330e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003310:	f7ff feef 	bl	80030f2 <LL_RCC_PLL_GetMainSource>
 8003314:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d005      	beq.n	8003328 <HAL_RCC_OscConfig+0x164>
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d108      	bne.n	8003334 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d105      	bne.n	8003334 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d134      	bne.n	800339a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e275      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333c:	d102      	bne.n	8003344 <HAL_RCC_OscConfig+0x180>
 800333e:	f7ff fc11 	bl	8002b64 <LL_RCC_HSE_Enable>
 8003342:	e001      	b.n	8003348 <HAL_RCC_OscConfig+0x184>
 8003344:	f7ff fc1d 	bl	8002b82 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe ffac 	bl	80022ac <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe ffa8 	bl	80022ac <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	@ 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e25a      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800336a:	f7ff fc19 	bl	8002ba0 <LL_RCC_HSE_IsReady>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f1      	beq.n	8003358 <HAL_RCC_OscConfig+0x194>
 8003374:	e011      	b.n	800339a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fe ff99 	bl	80022ac <HAL_GetTick>
 800337a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337e:	f7fe ff95 	bl	80022ac <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b64      	cmp	r3, #100	@ 0x64
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e247      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003390:	f7ff fc06 	bl	8002ba0 <LL_RCC_HSE_IsReady>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f1      	bne.n	800337e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d04c      	beq.n	8003440 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	f7ff fda8 	bl	8002efa <LL_RCC_GetSysClkSource>
 80033aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ac:	f7ff fea1 	bl	80030f2 <LL_RCC_PLL_GetMainSource>
 80033b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_OscConfig+0x200>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d10e      	bne.n	80033dc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d10b      	bne.n	80033dc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e227      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fc25 	bl	8002c24 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033da:	e031      	b.n	8003440 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d019      	beq.n	8003418 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	f7ff fbee 	bl	8002bc4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe ff60 	bl	80022ac <HAL_GetTick>
 80033ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f0:	f7fe ff5c 	bl	80022ac <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e20e      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003402:	f7ff fbfd 	bl	8002c00 <LL_RCC_HSI_IsReady>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f1      	beq.n	80033f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fc07 	bl	8002c24 <LL_RCC_HSI_SetCalibTrimming>
 8003416:	e013      	b.n	8003440 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003418:	f7ff fbe3 	bl	8002be2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe ff46 	bl	80022ac <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe ff42 	bl	80022ac <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1f4      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003436:	f7ff fbe3 	bl	8002c00 <LL_RCC_HSI_IsReady>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f1      	bne.n	8003424 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80a3 	beq.w	80035a0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d076      	beq.n	8003550 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d046      	beq.n	80034fc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800346e:	f7ff fc66 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d113      	bne.n	80034a0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003478:	f7ff fc3f 	bl	8002cfa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800347c:	f7fe ff16 	bl	80022ac <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003484:	f7fe ff12 	bl	80022ac <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1c4      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003496:	f7ff fc52 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f1      	beq.n	8003484 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80034a0:	f7ff fc5f 	bl	8002d62 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe ff02 	bl	80022ac <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034ac:	f7fe fefe 	bl	80022ac <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1b0      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034be:	f7ff fc72 	bl	8002da6 <LL_RCC_LSI2_IsReady>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f1      	beq.n	80034ac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fc7c 	bl	8002dca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80034d2:	f7ff fc23 	bl	8002d1c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fe fee9 	bl	80022ac <HAL_GetTick>
 80034da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034de:	f7fe fee5 	bl	80022ac <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e197      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034f0:	f7ff fc25 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f1      	bne.n	80034de <HAL_RCC_OscConfig+0x31a>
 80034fa:	e051      	b.n	80035a0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80034fc:	f7ff fbfd 	bl	8002cfa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fed4 	bl	80022ac <HAL_GetTick>
 8003504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003506:	e00c      	b.n	8003522 <HAL_RCC_OscConfig+0x35e>
 8003508:	20000014 	.word	0x20000014
 800350c:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003510:	f7fe fecc 	bl	80022ac <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e17e      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003522:	f7ff fc0c 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f1      	beq.n	8003510 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800352c:	f7ff fc2a 	bl	8002d84 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003532:	f7fe febb 	bl	80022ac <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b03      	cmp	r3, #3
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e16d      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003544:	f7ff fc2f 	bl	8002da6 <LL_RCC_LSI2_IsReady>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f1      	bne.n	8003532 <HAL_RCC_OscConfig+0x36e>
 800354e:	e027      	b.n	80035a0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003550:	f7ff fc18 	bl	8002d84 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe feaa 	bl	80022ac <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800355c:	f7fe fea6 	bl	80022ac <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b03      	cmp	r3, #3
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e158      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800356e:	f7ff fc1a 	bl	8002da6 <LL_RCC_LSI2_IsReady>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f1      	bne.n	800355c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003578:	f7ff fbd0 	bl	8002d1c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe fe96 	bl	80022ac <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003584:	f7fe fe92 	bl	80022ac <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e144      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003596:	f7ff fbd2 	bl	8002d3e <LL_RCC_LSI1_IsReady>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f1      	bne.n	8003584 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ac:	4b9e      	ldr	r3, [pc, #632]	@ (8003828 <HAL_RCC_OscConfig+0x664>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d114      	bne.n	80035e2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80035b8:	f7ff fa9c 	bl	8002af4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035bc:	f7fe fe76 	bl	80022ac <HAL_GetTick>
 80035c0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c4:	f7fe fe72 	bl	80022ac <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e124      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d6:	4b94      	ldr	r3, [pc, #592]	@ (8003828 <HAL_RCC_OscConfig+0x664>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <HAL_RCC_OscConfig+0x42c>
 80035ea:	f7ff fb30 	bl	8002c4e <LL_RCC_LSE_Enable>
 80035ee:	e00c      	b.n	800360a <HAL_RCC_OscConfig+0x446>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d104      	bne.n	8003602 <HAL_RCC_OscConfig+0x43e>
 80035f8:	f7ff fb4b 	bl	8002c92 <LL_RCC_LSE_EnableBypass>
 80035fc:	f7ff fb27 	bl	8002c4e <LL_RCC_LSE_Enable>
 8003600:	e003      	b.n	800360a <HAL_RCC_OscConfig+0x446>
 8003602:	f7ff fb35 	bl	8002c70 <LL_RCC_LSE_Disable>
 8003606:	f7ff fb55 	bl	8002cb4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d014      	beq.n	800363c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fe fe4b 	bl	80022ac <HAL_GetTick>
 8003616:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe fe47 	bl	80022ac <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0f7      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003630:	f7ff fb51 	bl	8002cd6 <LL_RCC_LSE_IsReady>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ef      	beq.n	800361a <HAL_RCC_OscConfig+0x456>
 800363a:	e013      	b.n	8003664 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe fe36 	bl	80022ac <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fe fe32 	bl	80022ac <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0e2      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800365a:	f7ff fb3c 	bl	8002cd6 <LL_RCC_LSE_IsReady>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ef      	bne.n	8003644 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80d8 	beq.w	800381e <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366e:	f7ff fc44 	bl	8002efa <LL_RCC_GetSysClkSource>
 8003672:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	2b02      	cmp	r3, #2
 8003682:	f040 80a6 	bne.w	80037d2 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	429a      	cmp	r2, r3
 8003692:	d123      	bne.n	80036dc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d11c      	bne.n	80036dc <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d114      	bne.n	80036dc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d10d      	bne.n	80036dc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d106      	bne.n	80036dc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d054      	beq.n	8003786 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d04f      	beq.n	8003782 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036e2:	f7ff fcc0 	bl	8003066 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036e6:	f7fe fde1 	bl	80022ac <HAL_GetTick>
 80036ea:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe fddd 	bl	80022ac <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e08f      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ef      	bne.n	80036ee <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4b45      	ldr	r3, [pc, #276]	@ (800382c <HAL_RCC_OscConfig+0x668>)
 8003716:	4013      	ands	r3, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003720:	4311      	orrs	r1, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003726:	0212      	lsls	r2, r2, #8
 8003728:	4311      	orrs	r1, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003734:	4311      	orrs	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800373a:	430a      	orrs	r2, r1
 800373c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003740:	4313      	orrs	r3, r2
 8003742:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003744:	f7ff fc80 	bl	8003048 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003758:	f7fe fda8 	bl	80022ac <HAL_GetTick>
 800375c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe fda4 	bl	80022ac <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e056      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ef      	beq.n	8003760 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003780:	e04d      	b.n	800381e <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e04c      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d144      	bne.n	800381e <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003794:	f7ff fc58 	bl	8003048 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037a8:	f7fe fd80 	bl	80022ac <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fd7c 	bl	80022ac <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e02e      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ef      	beq.n	80037b0 <HAL_RCC_OscConfig+0x5ec>
 80037d0:	e025      	b.n	800381e <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	d020      	beq.n	800381a <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	f7ff fc45 	bl	8003066 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe fd66 	bl	80022ac <HAL_GetTick>
 80037e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe fd62 	bl	80022ac <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e014      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ef      	bne.n	80037e4 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8003804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	60d3      	str	r3, [r2, #12]
 8003818:	e001      	b.n	800381e <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3734      	adds	r7, #52	@ 0x34
 8003824:	46bd      	mov	sp, r7
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	58000400 	.word	0x58000400
 800382c:	11c1808c 	.word	0x11c1808c

08003830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e12d      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b98      	ldr	r3, [pc, #608]	@ (8003aa8 <HAL_RCC_ClockConfig+0x278>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d91b      	bls.n	800388a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b95      	ldr	r3, [pc, #596]	@ (8003aa8 <HAL_RCC_ClockConfig+0x278>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 0207 	bic.w	r2, r3, #7
 800385a:	4993      	ldr	r1, [pc, #588]	@ (8003aa8 <HAL_RCC_ClockConfig+0x278>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003862:	f7fe fd23 	bl	80022ac <HAL_GetTick>
 8003866:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003868:	e008      	b.n	800387c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800386a:	f7fe fd1f 	bl	80022ac <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e111      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387c:	4b8a      	ldr	r3, [pc, #552]	@ (8003aa8 <HAL_RCC_ClockConfig+0x278>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d1ef      	bne.n	800386a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fb39 	bl	8002f12 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038a0:	f7fe fd04 	bl	80022ac <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038a8:	f7fe fd00 	bl	80022ac <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0f2      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038ba:	f7ff fc26 	bl	800310a <LL_RCC_IsActiveFlag_HPRE>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f1      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d016      	beq.n	80038fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fb30 	bl	8002f3a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038da:	f7fe fce7 	bl	80022ac <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038e2:	f7fe fce3 	bl	80022ac <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0d5      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80038f4:	f7ff fc1b 	bl	800312e <LL_RCC_IsActiveFlag_C2HPRE>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f1      	beq.n	80038e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fb29 	bl	8002f66 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003914:	f7fe fcca 	bl	80022ac <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800391c:	f7fe fcc6 	bl	80022ac <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0b8      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800392e:	f7ff fc11 	bl	8003154 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f1      	beq.n	800391c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fb23 	bl	8002f94 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800394e:	f7fe fcad 	bl	80022ac <HAL_GetTick>
 8003952:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003956:	f7fe fca9 	bl	80022ac <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e09b      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003968:	f7ff fc07 	bl	800317a <LL_RCC_IsActiveFlag_PPRE1>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f1      	beq.n	8003956 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fb19 	bl	8002fbc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800398a:	f7fe fc8f 	bl	80022ac <HAL_GetTick>
 800398e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003992:	f7fe fc8b 	bl	80022ac <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e07d      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039a4:	f7ff fbfb 	bl	800319e <LL_RCC_IsActiveFlag_PPRE2>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f1      	beq.n	8003992 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d043      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80039c2:	f7ff f8ed 	bl	8002ba0 <LL_RCC_HSE_IsReady>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11e      	bne.n	8003a0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e067      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80039d8:	f7ff fb54 	bl	8003084 <LL_RCC_PLL_IsReady>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d113      	bne.n	8003a0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e05c      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80039ee:	f7ff fa21 	bl	8002e34 <LL_RCC_MSI_IsReady>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d108      	bne.n	8003a0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e051      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80039fc:	f7ff f900 	bl	8002c00 <LL_RCC_HSI_IsReady>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e04a      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fa5f 	bl	8002ed2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fe fc4a 	bl	80022ac <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f7fe fc46 	bl	80022ac <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e036      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	f7ff fa62 	bl	8002efa <LL_RCC_GetSysClkSource>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d1ec      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a42:	4b19      	ldr	r3, [pc, #100]	@ (8003aa8 <HAL_RCC_ClockConfig+0x278>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d21b      	bcs.n	8003a88 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a50:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <HAL_RCC_ClockConfig+0x278>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 0207 	bic.w	r2, r3, #7
 8003a58:	4913      	ldr	r1, [pc, #76]	@ (8003aa8 <HAL_RCC_ClockConfig+0x278>)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fe fc24 	bl	80022ac <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a68:	f7fe fc20 	bl	80022ac <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e012      	b.n	8003aa0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <HAL_RCC_ClockConfig+0x278>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1ef      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a88:	f000 f87e 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4a07      	ldr	r2, [pc, #28]	@ (8003aac <HAL_RCC_ClockConfig+0x27c>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003a92:	f7fe fc17 	bl	80022c4 <HAL_GetTickPrio>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fbb9 	bl	8002210 <HAL_InitTick>
 8003a9e:	4603      	mov	r3, r0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	58004000 	.word	0x58004000
 8003aac:	20000014 	.word	0x20000014

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab6:	f7ff fa20 	bl	8002efa <LL_RCC_GetSysClkSource>
 8003aba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ac2:	f7ff f9dc 	bl	8002e7e <LL_RCC_MSI_GetRange>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e04b      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d102      	bne.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ade:	4b28      	ldr	r3, [pc, #160]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	e045      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d10a      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003aea:	f7ff f829 	bl	8002b40 <LL_RCC_HSE_IsEnabledDiv2>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d102      	bne.n	8003afa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003af4:	4b22      	ldr	r3, [pc, #136]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e03a      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003afa:	4b22      	ldr	r3, [pc, #136]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e037      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b00:	f7ff faf7 	bl	80030f2 <LL_RCC_PLL_GetMainSource>
 8003b04:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d003      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x64>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x6a>
 8003b12:	e00d      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b14:	4b1a      	ldr	r3, [pc, #104]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b16:	60bb      	str	r3, [r7, #8]
        break;
 8003b18:	e015      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b1a:	f7ff f811 	bl	8002b40 <LL_RCC_HSE_IsEnabledDiv2>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d102      	bne.n	8003b2a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b24:	4b16      	ldr	r3, [pc, #88]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b26:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003b28:	e00d      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003b2a:	4b16      	ldr	r3, [pc, #88]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b2c:	60bb      	str	r3, [r7, #8]
        break;
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b30:	f7ff f9a5 	bl	8002e7e <LL_RCC_MSI_GetRange>
 8003b34:	4603      	mov	r3, r0
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	60bb      	str	r3, [r7, #8]
        break;
 8003b44:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003b46:	f7ff faaf 	bl	80030a8 <LL_RCC_PLL_GetN>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	fb03 f402 	mul.w	r4, r3, r2
 8003b52:	f7ff fac2 	bl	80030da <LL_RCC_PLL_GetDivider>
 8003b56:	4603      	mov	r3, r0
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b60:	f7ff faaf 	bl	80030c2 <LL_RCC_PLL_GetR>
 8003b64:	4603      	mov	r3, r0
 8003b66:	0f5b      	lsrs	r3, r3, #29
 8003b68:	3301      	adds	r3, #1
 8003b6a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b6e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003b70:	68fb      	ldr	r3, [r7, #12]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0800a164 	.word	0x0800a164
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	01e84800 	.word	0x01e84800

08003b88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b88:	b598      	push	{r3, r4, r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003b8c:	f7ff ff90 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003b90:	4604      	mov	r4, r0
 8003b92:	f7ff fa27 	bl	8002fe4 <LL_RCC_GetAHBPrescaler>
 8003b96:	4603      	mov	r3, r0
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	4a03      	ldr	r2, [pc, #12]	@ (8003bac <HAL_RCC_GetHCLKFreq+0x24>)
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd98      	pop	{r3, r4, r7, pc}
 8003bac:	0800a104 	.word	0x0800a104

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b598      	push	{r3, r4, r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003bb4:	f7ff ffe8 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4604      	mov	r4, r0
 8003bba:	f7ff fa2d 	bl	8003018 <LL_RCC_GetAPB1Prescaler>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	4a04      	ldr	r2, [pc, #16]	@ (8003bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd98      	pop	{r3, r4, r7, pc}
 8003bd8:	0800a144 	.word	0x0800a144

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b598      	push	{r3, r4, r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003be0:	f7ff ffd2 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003be4:	4604      	mov	r4, r0
 8003be6:	f7ff fa23 	bl	8003030 <LL_RCC_GetAPB2Prescaler>
 8003bea:	4603      	mov	r3, r0
 8003bec:	0adb      	lsrs	r3, r3, #11
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	4a04      	ldr	r2, [pc, #16]	@ (8003c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd98      	pop	{r3, r4, r7, pc}
 8003c04:	0800a144 	.word	0x0800a144

08003c08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2bb0      	cmp	r3, #176	@ 0xb0
 8003c14:	d903      	bls.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003c16:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e007      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a10      	ldr	r2, [pc, #64]	@ (8003c68 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003c2e:	f7ff f9e5 	bl	8002ffc <LL_RCC_GetAHB4Prescaler>
 8003c32:	4603      	mov	r3, r0
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	0c9b      	lsrs	r3, r3, #18
 8003c52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f80c 	bl	8003c74 <RCC_SetFlashLatency>
 8003c5c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	0800a164 	.word	0x0800a164
 8003c6c:	0800a104 	.word	0x0800a104
 8003c70:	431bde83 	.word	0x431bde83

08003c74 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b08f      	sub	sp, #60	@ 0x3c
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003c7e:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <RCC_SetFlashLatency+0x9c>)
 8003c80:	f107 041c 	add.w	r4, r7, #28
 8003c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003c8a:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <RCC_SetFlashLatency+0xa0>)
 8003c8c:	f107 040c 	add.w	r4, r7, #12
 8003c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c96:	2300      	movs	r3, #0
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c9e:	e013      	b.n	8003cc8 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	3338      	adds	r3, #56	@ 0x38
 8003ca6:	443b      	add	r3, r7
 8003ca8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d807      	bhi.n	8003cc2 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	3338      	adds	r3, #56	@ 0x38
 8003cb8:	443b      	add	r3, r7
 8003cba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8003cc0:	e005      	b.n	8003cce <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d9e8      	bls.n	8003ca0 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003cce:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <RCC_SetFlashLatency+0xa4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 0207 	bic.w	r2, r3, #7
 8003cd6:	4910      	ldr	r1, [pc, #64]	@ (8003d18 <RCC_SetFlashLatency+0xa4>)
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003cde:	f7fe fae5 	bl	80022ac <HAL_GetTick>
 8003ce2:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ce4:	e008      	b.n	8003cf8 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ce6:	f7fe fae1 	bl	80022ac <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e007      	b.n	8003d08 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003cf8:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <RCC_SetFlashLatency+0xa4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d1ef      	bne.n	8003ce6 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	373c      	adds	r7, #60	@ 0x3c
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd90      	pop	{r4, r7, pc}
 8003d10:	08009f40 	.word	0x08009f40
 8003d14:	08009f50 	.word	0x08009f50
 8003d18:	58004000 	.word	0x58004000

08003d1c <LL_RCC_LSE_IsEnabled>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <LL_RCC_LSE_IsEnabled+0x18>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <LL_RCC_LSE_IsEnabled+0x1a>
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_RCC_LSE_IsReady>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d101      	bne.n	8003d58 <LL_RCC_LSE_IsReady+0x18>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <LL_RCC_LSE_IsReady+0x1a>
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_RCC_MSI_EnablePLLMode>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d72:	f043 0304 	orr.w	r3, r3, #4
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_RCC_SetRFWKPClockSource>:
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_RCC_SetSMPSClockSource>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	f023 0203 	bic.w	r2, r3, #3
 8003dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <LL_RCC_SetSMPSPrescaler>:
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003de8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_RCC_SetUSARTClockSource>:
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_SetLPUARTClockSource>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_RCC_SetI2CClockSource>:
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e62:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	401a      	ands	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_RCC_SetLPTIMClockSource>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_RCC_SetRNGClockSource>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003ed8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <LL_RCC_SetCLK48ClockSource>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_SetADCClockSource>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_SetRTCClockSource>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_GetRTCClockSource>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_ForceBackupDomainReset>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b088      	sub	sp, #32
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fda:	2300      	movs	r3, #0
 8003fdc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003fde:	2300      	movs	r3, #0
 8003fe0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d046      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003fee:	f7ff ffc1 	bl	8003f74 <LL_RCC_GetRTCClockSource>
 8003ff2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d03c      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003ffe:	f7fe fd79 	bl	8002af4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff9b 	bl	8003f48 <LL_RCC_SetRTCClockSource>
 8004012:	e02e      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800401e:	f7ff ffb6 	bl	8003f8e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004022:	f7ff ffc5 	bl	8003fb0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800403e:	f7ff fe6d 	bl	8003d1c <LL_RCC_LSE_IsEnabled>
 8004042:	4603      	mov	r3, r0
 8004044:	2b01      	cmp	r3, #1
 8004046:	d114      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004048:	f7fe f930 	bl	80022ac <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800404e:	e00b      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fe f92c 	bl	80022ac <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d902      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	77fb      	strb	r3, [r7, #31]
              break;
 8004066:	e004      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004068:	f7ff fe6a 	bl	8003d40 <LL_RCC_LSE_IsReady>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	d1ee      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004072:	7ffb      	ldrb	r3, [r7, #31]
 8004074:	77bb      	strb	r3, [r7, #30]
 8004076:	e001      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	7ffb      	ldrb	r3, [r7, #31]
 800407a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff feb6 	bl	8003dfe <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fec1 	bl	8003e2a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fee9 	bl	8003e90 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fede 	bl	8003e90 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff feb6 	bl	8003e56 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02b      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fe:	d008      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004108:	d003      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fed4 	bl	8003ec4 <LL_RCC_SetRNGClockSource>
 800411c:	e00a      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	2000      	movs	r0, #0
 800412a:	f7ff fecb 	bl	8003ec4 <LL_RCC_SetRNGClockSource>
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff fede 	bl	8003ef0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800413c:	d107      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800413e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004148:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800414c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004156:	2b00      	cmp	r3, #0
 8004158:	d011      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fedc 	bl	8003f1c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800416c:	d107      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800416e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417c:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fdf7 	bl	8003d82 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fe16 	bl	8003dd6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fdfd 	bl	8003dae <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80041b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3720      	adds	r7, #32
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80041c2:	f7ff fdcf 	bl	8003d64 <LL_RCC_MSI_EnablePLLMode>
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e09f      	b.n	800431e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd fcaa 	bl	8001b4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004200:	4b49      	ldr	r3, [pc, #292]	@ (8004328 <HAL_RTC_Init+0x15c>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b10      	cmp	r3, #16
 800420a:	d07e      	beq.n	800430a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	22ca      	movs	r2, #202	@ 0xca
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2253      	movs	r2, #83	@ 0x53
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f8ab 	bl	8004378 <RTC_EnterInitMode>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	22ff      	movs	r2, #255	@ 0xff
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2204      	movs	r2, #4
 8004234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e067      	b.n	800430e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800424c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004250:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6899      	ldr	r1, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68d2      	ldr	r2, [r2, #12]
 8004278:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6919      	ldr	r1, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	041a      	lsls	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800429c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0202 	bic.w	r2, r2, #2
 80042ac:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d113      	bne.n	80042fc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f829 	bl	800432c <HAL_RTC_WaitForSynchro>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	22ff      	movs	r2, #255	@ 0xff
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2204      	movs	r2, #4
 80042ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e010      	b.n	800431e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	22ff      	movs	r2, #255	@ 0xff
 8004302:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	e001      	b.n	800430e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40002800 	.word	0x40002800

0800432c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004342:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004344:	f7fd ffb2 	bl	80022ac <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800434a:	e009      	b.n	8004360 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800434c:	f7fd ffae 	bl	80022ac <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800435a:	d901      	bls.n	8004360 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e007      	b.n	8004370 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ee      	beq.n	800434c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d119      	bne.n	80043c2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f04f 32ff 	mov.w	r2, #4294967295
 8004396:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004398:	f7fd ff88 	bl	80022ac <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800439e:	e009      	b.n	80043b4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043a0:	f7fd ff84 	bl	80022ac <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043ae:	d901      	bls.n	80043b4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e007      	b.n	80043c4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ee      	beq.n	80043a0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e0a8      	b.n	8004538 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	22ca      	movs	r2, #202	@ 0xca
 80043fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2253      	movs	r2, #83	@ 0x53
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004414:	f7fd ff4a 	bl	80022ac <HAL_GetTick>
 8004418:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800441a:	e015      	b.n	8004448 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800441c:	f7fd ff46 	bl	80022ac <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800442a:	d90d      	bls.n	8004448 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	22ff      	movs	r2, #255	@ 0xff
 8004432:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2203      	movs	r2, #3
 8004438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e077      	b.n	8004538 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e2      	bne.n	800441c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004464:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004476:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004478:	f7fd ff18 	bl	80022ac <HAL_GetTick>
 800447c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800447e:	e015      	b.n	80044ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004480:	f7fd ff14 	bl	80022ac <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800448e:	d90d      	bls.n	80044ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	22ff      	movs	r2, #255	@ 0xff
 8004496:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2203      	movs	r2, #3
 800449c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e045      	b.n	8004538 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0e2      	beq.n	8004480 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0207 	bic.w	r2, r2, #7
 80044d0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6899      	ldr	r1, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80044e2:	4b17      	ldr	r3, [pc, #92]	@ (8004540 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e8:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044ee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80044f2:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a12      	ldr	r2, [pc, #72]	@ (8004540 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044fc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800450c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800451c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	22ff      	movs	r2, #255	@ 0xff
 8004524:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	58000800 	.word	0x58000800

08004544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e049      	b.n	80045ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd fb22 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 fa2e 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01b      	beq.n	8004656 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0202 	mvn.w	r2, #2
 8004626:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f9b2 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004642:	e005      	b.n	8004650 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f9a4 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f9b5 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01b      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0204 	mvn.w	r2, #4
 8004672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f98c 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 800468e:	e005      	b.n	800469c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f97e 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f98f 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01b      	beq.n	80046ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f06f 0208 	mvn.w	r2, #8
 80046be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2204      	movs	r2, #4
 80046c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f966 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 80046da:	e005      	b.n	80046e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f958 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f969 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01b      	beq.n	800473a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f06f 0210 	mvn.w	r2, #16
 800470a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2208      	movs	r2, #8
 8004710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f940 	bl	80049a6 <HAL_TIM_IC_CaptureCallback>
 8004726:	e005      	b.n	8004734 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f932 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f943 	bl	80049ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00c      	beq.n	800475e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f06f 0201 	mvn.w	r2, #1
 8004756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fd f933 	bl	80019c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa8e 	bl	8004ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00c      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa86 	bl	8004cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8fd 	bl	80049ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0220 	mvn.w	r2, #32
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa4e 	bl	8004c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIM_ConfigClockSource+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e0b6      	b.n	800498a <HAL_TIM_ConfigClockSource+0x18a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800483a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800483e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004858:	d03e      	beq.n	80048d8 <HAL_TIM_ConfigClockSource+0xd8>
 800485a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800485e:	f200 8087 	bhi.w	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004866:	f000 8086 	beq.w	8004976 <HAL_TIM_ConfigClockSource+0x176>
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486e:	d87f      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004870:	2b70      	cmp	r3, #112	@ 0x70
 8004872:	d01a      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0xaa>
 8004874:	2b70      	cmp	r3, #112	@ 0x70
 8004876:	d87b      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004878:	2b60      	cmp	r3, #96	@ 0x60
 800487a:	d050      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x11e>
 800487c:	2b60      	cmp	r3, #96	@ 0x60
 800487e:	d877      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004880:	2b50      	cmp	r3, #80	@ 0x50
 8004882:	d03c      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0xfe>
 8004884:	2b50      	cmp	r3, #80	@ 0x50
 8004886:	d873      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004888:	2b40      	cmp	r3, #64	@ 0x40
 800488a:	d058      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x13e>
 800488c:	2b40      	cmp	r3, #64	@ 0x40
 800488e:	d86f      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004890:	2b30      	cmp	r3, #48	@ 0x30
 8004892:	d064      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15e>
 8004894:	2b30      	cmp	r3, #48	@ 0x30
 8004896:	d86b      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 8004898:	2b20      	cmp	r3, #32
 800489a:	d060      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15e>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d867      	bhi.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d05c      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15e>
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d05a      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x15e>
 80048a8:	e062      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ba:	f000 f96b 	bl	8004b94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	609a      	str	r2, [r3, #8]
      break;
 80048d6:	e04f      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048e8:	f000 f954 	bl	8004b94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048fa:	609a      	str	r2, [r3, #8]
      break;
 80048fc:	e03c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490a:	461a      	mov	r2, r3
 800490c:	f000 f8c6 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2150      	movs	r1, #80	@ 0x50
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f91f 	bl	8004b5a <TIM_ITRx_SetConfig>
      break;
 800491c:	e02c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800492a:	461a      	mov	r2, r3
 800492c:	f000 f8e5 	bl	8004afa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2160      	movs	r1, #96	@ 0x60
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f90f 	bl	8004b5a <TIM_ITRx_SetConfig>
      break;
 800493c:	e01c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800494a:	461a      	mov	r2, r3
 800494c:	f000 f8a6 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2140      	movs	r1, #64	@ 0x40
 8004956:	4618      	mov	r0, r3
 8004958:	f000 f8ff 	bl	8004b5a <TIM_ITRx_SetConfig>
      break;
 800495c:	e00c      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f000 f8f6 	bl	8004b5a <TIM_ITRx_SetConfig>
      break;
 800496e:	e003      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      break;
 8004974:	e000      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a28      	ldr	r2, [pc, #160]	@ (8004a98 <TIM_Base_SetConfig+0xb4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0x20>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a02:	d108      	bne.n	8004a16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1f      	ldr	r2, [pc, #124]	@ (8004a98 <TIM_Base_SetConfig+0xb4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_Base_SetConfig+0x42>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a24:	d108      	bne.n	8004a38 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a98 <TIM_Base_SetConfig+0xb4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d103      	bne.n	8004a6c <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <TIM_Base_SetConfig+0xa6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f023 0201 	bic.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40012c00 	.word	0x40012c00

08004a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 030a 	bic.w	r3, r3, #10
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b087      	sub	sp, #28
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	f023 0210 	bic.w	r2, r3, #16
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f043 0307 	orr.w	r3, r3, #7
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	609a      	str	r2, [r3, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e04a      	b.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1f      	ldr	r2, [pc, #124]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d108      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a12      	ldr	r2, [pc, #72]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c54:	d10c      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00

08004c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <LL_RCC_GetUSARTClockSource>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4013      	ands	r3, r2
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_GetLPUARTClockSource>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4013      	ands	r3, r2
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e042      	b.n	8004da8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7fc ff71 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2224      	movs	r2, #36	@ 0x24
 8004d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0201 	bic.w	r2, r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fade 	bl	800531c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8b3 	bl	8004ecc <UART_SetConfig>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e01b      	b.n	8004da8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fb5d 	bl	8005460 <UART_CheckIdleState>
 8004da6:	4603      	mov	r3, r0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	@ 0x28
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d17b      	bne.n	8004ec2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_UART_Transmit+0x26>
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e074      	b.n	8004ec4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2221      	movs	r2, #33	@ 0x21
 8004de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dea:	f7fd fa5f 	bl	80022ac <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e08:	d108      	bne.n	8004e1c <HAL_UART_Transmit+0x6c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e003      	b.n	8004e24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e24:	e030      	b.n	8004e88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2180      	movs	r1, #128	@ 0x80
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fbbf 	bl	80055b4 <UART_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e03d      	b.n	8004ec4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	3302      	adds	r3, #2
 8004e62:	61bb      	str	r3, [r7, #24]
 8004e64:	e007      	b.n	8004e76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	781a      	ldrb	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	3301      	adds	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1c8      	bne.n	8004e26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2140      	movs	r1, #64	@ 0x40
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fb88 	bl	80055b4 <UART_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e006      	b.n	8004ec4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed0:	b08c      	sub	sp, #48	@ 0x30
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4baf      	ldr	r3, [pc, #700]	@ (80051b8 <UART_SetConfig+0x2ec>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4aa4      	ldr	r2, [pc, #656]	@ (80051bc <UART_SetConfig+0x2f0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f34:	4313      	orrs	r3, r2
 8004f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	f023 010f 	bic.w	r1, r3, #15
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a95      	ldr	r2, [pc, #596]	@ (80051c0 <UART_SetConfig+0x2f4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d125      	bne.n	8004fbc <UART_SetConfig+0xf0>
 8004f70:	2003      	movs	r0, #3
 8004f72:	f7ff fead 	bl	8004cd0 <LL_RCC_GetUSARTClockSource>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d81b      	bhi.n	8004fb4 <UART_SetConfig+0xe8>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <UART_SetConfig+0xb8>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004fa5 	.word	0x08004fa5
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9a:	e042      	b.n	8005022 <UART_SetConfig+0x156>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa2:	e03e      	b.n	8005022 <UART_SetConfig+0x156>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004faa:	e03a      	b.n	8005022 <UART_SetConfig+0x156>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb2:	e036      	b.n	8005022 <UART_SetConfig+0x156>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fba:	e032      	b.n	8005022 <UART_SetConfig+0x156>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a7e      	ldr	r2, [pc, #504]	@ (80051bc <UART_SetConfig+0x2f0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d12a      	bne.n	800501c <UART_SetConfig+0x150>
 8004fc6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004fca:	f7ff fe91 	bl	8004cf0 <LL_RCC_GetLPUARTClockSource>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fd4:	d01a      	beq.n	800500c <UART_SetConfig+0x140>
 8004fd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fda:	d81b      	bhi.n	8005014 <UART_SetConfig+0x148>
 8004fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe0:	d00c      	beq.n	8004ffc <UART_SetConfig+0x130>
 8004fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe6:	d815      	bhi.n	8005014 <UART_SetConfig+0x148>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <UART_SetConfig+0x128>
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff0:	d008      	beq.n	8005004 <UART_SetConfig+0x138>
 8004ff2:	e00f      	b.n	8005014 <UART_SetConfig+0x148>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffa:	e012      	b.n	8005022 <UART_SetConfig+0x156>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005002:	e00e      	b.n	8005022 <UART_SetConfig+0x156>
 8005004:	2304      	movs	r3, #4
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500a:	e00a      	b.n	8005022 <UART_SetConfig+0x156>
 800500c:	2308      	movs	r3, #8
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005012:	e006      	b.n	8005022 <UART_SetConfig+0x156>
 8005014:	2310      	movs	r3, #16
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501a:	e002      	b.n	8005022 <UART_SetConfig+0x156>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a65      	ldr	r2, [pc, #404]	@ (80051bc <UART_SetConfig+0x2f0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	f040 8097 	bne.w	800515c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800502e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005032:	2b08      	cmp	r3, #8
 8005034:	d823      	bhi.n	800507e <UART_SetConfig+0x1b2>
 8005036:	a201      	add	r2, pc, #4	@ (adr r2, 800503c <UART_SetConfig+0x170>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005061 	.word	0x08005061
 8005040:	0800507f 	.word	0x0800507f
 8005044:	08005069 	.word	0x08005069
 8005048:	0800507f 	.word	0x0800507f
 800504c:	0800506f 	.word	0x0800506f
 8005050:	0800507f 	.word	0x0800507f
 8005054:	0800507f 	.word	0x0800507f
 8005058:	0800507f 	.word	0x0800507f
 800505c:	08005077 	.word	0x08005077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7fe fda6 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8005064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005066:	e010      	b.n	800508a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005068:	4b56      	ldr	r3, [pc, #344]	@ (80051c4 <UART_SetConfig+0x2f8>)
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800506c:	e00d      	b.n	800508a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506e:	f7fe fd1f 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8005072:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005074:	e009      	b.n	800508a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800507c:	e005      	b.n	800508a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 812b 	beq.w	80052e8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	4a4c      	ldr	r2, [pc, #304]	@ (80051c8 <UART_SetConfig+0x2fc>)
 8005098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509c:	461a      	mov	r2, r3
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	4413      	add	r3, r2
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d305      	bcc.n	80050c2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d903      	bls.n	80050ca <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050c8:	e10e      	b.n	80052e8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	2200      	movs	r2, #0
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	60fa      	str	r2, [r7, #12]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	4a3c      	ldr	r2, [pc, #240]	@ (80051c8 <UART_SetConfig+0x2fc>)
 80050d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2200      	movs	r2, #0
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ec:	f7fb f8a0 	bl	8000230 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4610      	mov	r0, r2
 80050f6:	4619      	mov	r1, r3
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	020b      	lsls	r3, r1, #8
 8005102:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005106:	0202      	lsls	r2, r0, #8
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	6849      	ldr	r1, [r1, #4]
 800510c:	0849      	lsrs	r1, r1, #1
 800510e:	2000      	movs	r0, #0
 8005110:	460c      	mov	r4, r1
 8005112:	4605      	mov	r5, r0
 8005114:	eb12 0804 	adds.w	r8, r2, r4
 8005118:	eb43 0905 	adc.w	r9, r3, r5
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	469a      	mov	sl, r3
 8005124:	4693      	mov	fp, r2
 8005126:	4652      	mov	r2, sl
 8005128:	465b      	mov	r3, fp
 800512a:	4640      	mov	r0, r8
 800512c:	4649      	mov	r1, r9
 800512e:	f7fb f87f 	bl	8000230 <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4613      	mov	r3, r2
 8005138:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005140:	d308      	bcc.n	8005154 <UART_SetConfig+0x288>
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005148:	d204      	bcs.n	8005154 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	e0c9      	b.n	80052e8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800515a:	e0c5      	b.n	80052e8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005164:	d16d      	bne.n	8005242 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005166:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800516a:	3b01      	subs	r3, #1
 800516c:	2b07      	cmp	r3, #7
 800516e:	d82d      	bhi.n	80051cc <UART_SetConfig+0x300>
 8005170:	a201      	add	r2, pc, #4	@ (adr r2, 8005178 <UART_SetConfig+0x2ac>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	08005199 	.word	0x08005199
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051cd 	.word	0x080051cd
 8005184:	080051a7 	.word	0x080051a7
 8005188:	080051cd 	.word	0x080051cd
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051cd 	.word	0x080051cd
 8005194:	080051af 	.word	0x080051af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005198:	f7fe fd20 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 800519c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800519e:	e01b      	b.n	80051d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a0:	4b08      	ldr	r3, [pc, #32]	@ (80051c4 <UART_SetConfig+0x2f8>)
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051a4:	e018      	b.n	80051d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051a6:	f7fe fc83 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 80051aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051ac:	e014      	b.n	80051d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051b4:	e010      	b.n	80051d8 <UART_SetConfig+0x30c>
 80051b6:	bf00      	nop
 80051b8:	cfff69f3 	.word	0xcfff69f3
 80051bc:	40008000 	.word	0x40008000
 80051c0:	40013800 	.word	0x40013800
 80051c4:	00f42400 	.word	0x00f42400
 80051c8:	0800a1c4 	.word	0x0800a1c4
      default:
        pclk = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8084 	beq.w	80052e8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005314 <UART_SetConfig+0x448>)
 80051e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ea:	461a      	mov	r2, r3
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f2:	005a      	lsls	r2, r3, #1
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	441a      	add	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	2b0f      	cmp	r3, #15
 800520a:	d916      	bls.n	800523a <UART_SetConfig+0x36e>
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005212:	d212      	bcs.n	800523a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f023 030f 	bic.w	r3, r3, #15
 800521c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	b29b      	uxth	r3, r3
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	b29a      	uxth	r2, r3
 800522a:	8bfb      	ldrh	r3, [r7, #30]
 800522c:	4313      	orrs	r3, r2
 800522e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	8bfa      	ldrh	r2, [r7, #30]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e056      	b.n	80052e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005240:	e052      	b.n	80052e8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005242:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005246:	3b01      	subs	r3, #1
 8005248:	2b07      	cmp	r3, #7
 800524a:	d822      	bhi.n	8005292 <UART_SetConfig+0x3c6>
 800524c:	a201      	add	r2, pc, #4	@ (adr r2, 8005254 <UART_SetConfig+0x388>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	08005275 	.word	0x08005275
 8005258:	0800527d 	.word	0x0800527d
 800525c:	08005293 	.word	0x08005293
 8005260:	08005283 	.word	0x08005283
 8005264:	08005293 	.word	0x08005293
 8005268:	08005293 	.word	0x08005293
 800526c:	08005293 	.word	0x08005293
 8005270:	0800528b 	.word	0x0800528b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7fe fcb2 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8005278:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800527a:	e010      	b.n	800529e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800527c:	4b26      	ldr	r3, [pc, #152]	@ (8005318 <UART_SetConfig+0x44c>)
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005280:	e00d      	b.n	800529e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005282:	f7fe fc15 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8005286:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005288:	e009      	b.n	800529e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800528e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005290:	e005      	b.n	800529e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800529c:	bf00      	nop
    }

    if (pclk != 0U)
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d021      	beq.n	80052e8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005314 <UART_SetConfig+0x448>)
 80052aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	441a      	add	r2, r3
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	d909      	bls.n	80052e2 <UART_SetConfig+0x416>
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d4:	d205      	bcs.n	80052e2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60da      	str	r2, [r3, #12]
 80052e0:	e002      	b.n	80052e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005304:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005308:	4618      	mov	r0, r3
 800530a:	3730      	adds	r7, #48	@ 0x30
 800530c:	46bd      	mov	sp, r7
 800530e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005312:	bf00      	nop
 8005314:	0800a1c4 	.word	0x0800a1c4
 8005318:	00f42400 	.word	0x00f42400

0800531c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01a      	beq.n	8005432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800541a:	d10a      	bne.n	8005432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b098      	sub	sp, #96	@ 0x60
 8005464:	af02      	add	r7, sp, #8
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005470:	f7fc ff1c 	bl	80022ac <HAL_GetTick>
 8005474:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b08      	cmp	r3, #8
 8005482:	d12f      	bne.n	80054e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005484:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548c:	2200      	movs	r2, #0
 800548e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f88e 	bl	80055b4 <UART_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d022      	beq.n	80054e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e6      	bne.n	800549e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e063      	b.n	80055ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d149      	bne.n	8005586 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054fa:	2200      	movs	r2, #0
 80054fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f857 	bl	80055b4 <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d03c      	beq.n	8005586 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	623b      	str	r3, [r7, #32]
   return(result);
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800552a:	633b      	str	r3, [r7, #48]	@ 0x30
 800552c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e6      	bne.n	800550c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	60fb      	str	r3, [r7, #12]
   return(result);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3308      	adds	r3, #8
 800555c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800555e:	61fa      	str	r2, [r7, #28]
 8005560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	69b9      	ldr	r1, [r7, #24]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	617b      	str	r3, [r7, #20]
   return(result);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e012      	b.n	80055ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3758      	adds	r7, #88	@ 0x58
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c4:	e04f      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d04b      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ce:	f7fc fe6d 	bl	80022ac <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d302      	bcc.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e04e      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d037      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b80      	cmp	r3, #128	@ 0x80
 80055fa:	d034      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d031      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d110      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2208      	movs	r2, #8
 8005616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f838 	bl	800568e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2208      	movs	r2, #8
 8005622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e029      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005640:	d111      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800564a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f81e 	bl	800568e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e00f      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	429a      	cmp	r2, r3
 8005682:	d0a0      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800568e:	b480      	push	{r7}
 8005690:	b095      	sub	sp, #84	@ 0x54
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e6      	bne.n	8005696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3308      	adds	r3, #8
 80056ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3308      	adds	r3, #8
 80056ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e3      	bne.n	80056c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d118      	bne.n	800573a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	60bb      	str	r3, [r7, #8]
   return(result);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f023 0310 	bic.w	r3, r3, #16
 800571c:	647b      	str	r3, [r7, #68]	@ 0x44
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6979      	ldr	r1, [r7, #20]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	613b      	str	r3, [r7, #16]
   return(result);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e6      	bne.n	8005708 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800574e:	bf00      	nop
 8005750:	3754      	adds	r7, #84	@ 0x54
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_UARTEx_DisableFifoMode+0x16>
 800576c:	2302      	movs	r3, #2
 800576e:	e027      	b.n	80057c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	@ 0x24
 800577c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800579e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e02d      	b.n	8005840 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	@ 0x24
 80057f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f84f 	bl	80058c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800585c:	2302      	movs	r3, #2
 800585e:	e02d      	b.n	80058bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2224      	movs	r2, #36	@ 0x24
 800586c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f811 	bl	80058c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058e4:	e031      	b.n	800594a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058e6:	2308      	movs	r3, #8
 80058e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058ea:	2308      	movs	r3, #8
 80058ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	0e5b      	lsrs	r3, r3, #25
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	0f5b      	lsrs	r3, r3, #29
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	7b3a      	ldrb	r2, [r7, #12]
 8005912:	4911      	ldr	r1, [pc, #68]	@ (8005958 <UARTEx_SetNbDataToProcess+0x94>)
 8005914:	5c8a      	ldrb	r2, [r1, r2]
 8005916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800591a:	7b3a      	ldrb	r2, [r7, #12]
 800591c:	490f      	ldr	r1, [pc, #60]	@ (800595c <UARTEx_SetNbDataToProcess+0x98>)
 800591e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005920:	fb93 f3f2 	sdiv	r3, r3, r2
 8005924:	b29a      	uxth	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	7b7a      	ldrb	r2, [r7, #13]
 8005930:	4909      	ldr	r1, [pc, #36]	@ (8005958 <UARTEx_SetNbDataToProcess+0x94>)
 8005932:	5c8a      	ldrb	r2, [r1, r2]
 8005934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005938:	7b7a      	ldrb	r2, [r7, #13]
 800593a:	4908      	ldr	r1, [pc, #32]	@ (800595c <UARTEx_SetNbDataToProcess+0x98>)
 800593c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800593e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	0800a1dc 	.word	0x0800a1dc
 800595c:	0800a1e4 	.word	0x0800a1e4

08005960 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	2218      	movs	r2, #24
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f001 f92d 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005978:	233f      	movs	r3, #63	@ 0x3f
 800597a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800597c:	2381      	movs	r3, #129	@ 0x81
 800597e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005980:	1dfb      	adds	r3, r7, #7
 8005982:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005984:	2301      	movs	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005988:	f107 0308 	add.w	r3, r7, #8
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f001 fba8 	bl	80070e4 <hci_send_req>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	da01      	bge.n	800599e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800599a:	23ff      	movs	r3, #255	@ 0xff
 800599c:	e000      	b.n	80059a0 <aci_gap_set_non_discoverable+0x40>
  return status;
 800599e:	79fb      	ldrb	r3, [r7, #7]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b0ce      	sub	sp, #312	@ 0x138
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4605      	mov	r5, r0
 80059b0:	460c      	mov	r4, r1
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059ba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80059be:	462a      	mov	r2, r5
 80059c0:	701a      	strb	r2, [r3, #0]
 80059c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80059ca:	4622      	mov	r2, r4
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059d2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80059d6:	4602      	mov	r2, r0
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80059de:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80059e2:	460a      	mov	r2, r1
 80059e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80059e6:	f107 0310 	add.w	r3, r7, #16
 80059ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80059ee:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80059f2:	3308      	adds	r3, #8
 80059f4:	f107 0210 	add.w	r2, r7, #16
 80059f8:	4413      	add	r3, r2
 80059fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80059fe:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005a02:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005a06:	4413      	add	r3, r2
 8005a08:	3309      	adds	r3, #9
 8005a0a:	f107 0210 	add.w	r2, r7, #16
 8005a0e:	4413      	add	r3, r2
 8005a10:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005a14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a18:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005a26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a2a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005a2e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005a32:	7812      	ldrb	r2, [r2, #0]
 8005a34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a44:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005a48:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005a4c:	8812      	ldrh	r2, [r2, #0]
 8005a4e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a56:	3302      	adds	r3, #2
 8005a58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005a5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a60:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005a64:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005a68:	8812      	ldrh	r2, [r2, #0]
 8005a6a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a72:	3302      	adds	r3, #2
 8005a74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005a78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a7c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005a80:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005a92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a96:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005a9a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005aa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005aaa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005aae:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005ab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005aba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005abe:	3308      	adds	r3, #8
 8005ac0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005ac4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 f872 	bl	8006bb2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005ace:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005ad2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005adc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ae0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005ae4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005aea:	3301      	adds	r3, #1
 8005aec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005af0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005af4:	3301      	adds	r3, #1
 8005af6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005afa:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f857 	bl	8006bb2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005b04:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005b08:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b16:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005b1a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b20:	3302      	adds	r3, #2
 8005b22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b2a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005b2e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b34:	3302      	adds	r3, #2
 8005b36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b3e:	2218      	movs	r2, #24
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 f845 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b48:	233f      	movs	r3, #63	@ 0x3f
 8005b4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005b4e:	2383      	movs	r3, #131	@ 0x83
 8005b50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005b54:	f107 0310 	add.w	r3, r7, #16
 8005b58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005b64:	f107 030f 	add.w	r3, r7, #15
 8005b68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b76:	2100      	movs	r1, #0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 fab3 	bl	80070e4 <hci_send_req>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da01      	bge.n	8005b88 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005b84:	23ff      	movs	r3, #255	@ 0xff
 8005b86:	e004      	b.n	8005b92 <aci_gap_set_discoverable+0x1ea>
  return status;
 8005b88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005b8c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005b90:	781b      	ldrb	r3, [r3, #0]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bdb0      	pop	{r4, r5, r7, pc}

08005b9c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b0cc      	sub	sp, #304	@ 0x130
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ba8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005bac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005bae:	f107 0310 	add.w	r3, r7, #16
 8005bb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005bb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bcc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bd0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005be6:	2218      	movs	r2, #24
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fff1 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005bf0:	233f      	movs	r3, #63	@ 0x3f
 8005bf2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8005bf6:	2385      	movs	r3, #133	@ 0x85
 8005bf8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005bfc:	f107 0310 	add.w	r3, r7, #16
 8005c00:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005c0c:	f107 030f 	add.w	r3, r7, #15
 8005c10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 fa5f 	bl	80070e4 <hci_send_req>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	da01      	bge.n	8005c30 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005c2c:	23ff      	movs	r3, #255	@ 0xff
 8005c2e:	e004      	b.n	8005c3a <aci_gap_set_io_capability+0x9e>
  return status;
 8005c30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c34:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005c38:	781b      	ldrb	r3, [r3, #0]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005c44:	b5b0      	push	{r4, r5, r7, lr}
 8005c46:	b0cc      	sub	sp, #304	@ 0x130
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c56:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c62:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005c66:	4622      	mov	r2, r4
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c6e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005c72:	4602      	mov	r2, r0
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005c7e:	460a      	mov	r2, r1
 8005c80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005c82:	f107 0310 	add.w	r3, r7, #16
 8005c86:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005c8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c8e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ca0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ca4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005cbe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8005cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cd4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005cd8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005cdc:	7812      	ldrb	r2, [r2, #0]
 8005cde:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005cf2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d08:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005d0c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d12:	3301      	adds	r3, #1
 8005d14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d1c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005d20:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d26:	3301      	adds	r3, #1
 8005d28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d30:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005d34:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d44:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005d48:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d50:	3304      	adds	r3, #4
 8005d52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d5a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005d5e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005d60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d64:	3301      	adds	r3, #1
 8005d66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d6e:	2218      	movs	r2, #24
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 ff2d 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d78:	233f      	movs	r3, #63	@ 0x3f
 8005d7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005d7e:	2386      	movs	r3, #134	@ 0x86
 8005d80:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005d84:	f107 0310 	add.w	r3, r7, #16
 8005d88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005d94:	f107 030f 	add.w	r3, r7, #15
 8005d98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005da2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 f99b 	bl	80070e4 <hci_send_req>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	da01      	bge.n	8005db8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005db4:	23ff      	movs	r3, #255	@ 0xff
 8005db6:	e004      	b.n	8005dc2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005db8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dbc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005dc0:	781b      	ldrb	r3, [r3, #0]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bdb0      	pop	{r4, r5, r7, pc}

08005dcc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0cc      	sub	sp, #304	@ 0x130
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dd8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005ddc:	6019      	str	r1, [r3, #0]
 8005dde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005de2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005de6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005de8:	f107 0310 	add.w	r3, r7, #16
 8005dec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005df0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005df4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e0a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005e0e:	8812      	ldrh	r2, [r2, #0]
 8005e10:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e16:	3302      	adds	r3, #2
 8005e18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e24:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e32:	3304      	adds	r3, #4
 8005e34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e3c:	2218      	movs	r2, #24
 8005e3e:	2100      	movs	r1, #0
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fec6 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e46:	233f      	movs	r3, #63	@ 0x3f
 8005e48:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005e4c:	2388      	movs	r3, #136	@ 0x88
 8005e4e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e52:	f107 0310 	add.w	r3, r7, #16
 8005e56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005e62:	f107 030f 	add.w	r3, r7, #15
 8005e66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 f934 	bl	80070e4 <hci_send_req>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da01      	bge.n	8005e86 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005e82:	23ff      	movs	r3, #255	@ 0xff
 8005e84:	e004      	b.n	8005e90 <aci_gap_pass_key_resp+0xc4>
  return status;
 8005e86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e8a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e8e:	781b      	ldrb	r3, [r3, #0]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005e9a:	b590      	push	{r4, r7, lr}
 8005e9c:	b0cd      	sub	sp, #308	@ 0x134
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005eaa:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eb4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005eb8:	4622      	mov	r2, r4
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ec0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ecc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005ed0:	460a      	mov	r2, r1
 8005ed2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005edc:	f107 0308 	add.w	r3, r7, #8
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fe74 	bl	8006bd2 <Osal_MemSet>
  int index_input = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ef4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ef8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005efc:	7812      	ldrb	r2, [r2, #0]
 8005efe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f04:	3301      	adds	r3, #1
 8005f06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f0e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f12:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f1e:	3301      	adds	r3, #1
 8005f20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f2c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f42:	2218      	movs	r2, #24
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fe43 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f4c:	233f      	movs	r3, #63	@ 0x3f
 8005f4e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8005f52:	238a      	movs	r3, #138	@ 0x8a
 8005f54:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005f58:	f107 0310 	add.w	r3, r7, #16
 8005f5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005f68:	f107 0308 	add.w	r3, r7, #8
 8005f6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005f70:	2307      	movs	r3, #7
 8005f72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 f8b1 	bl	80070e4 <hci_send_req>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da01      	bge.n	8005f8c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005f88:	23ff      	movs	r3, #255	@ 0xff
 8005f8a:	e02e      	b.n	8005fea <aci_gap_init+0x150>
  if ( resp.Status )
 8005f8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f90:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <aci_gap_init+0x10c>
    return resp.Status;
 8005f9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	e021      	b.n	8005fea <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005fa6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005faa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005fae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fb8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005fc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fc4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005fc8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005fd2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005fd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fd8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005fdc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005fe6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b0cc      	sub	sp, #304	@ 0x130
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006000:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006004:	6019      	str	r1, [r3, #0]
 8006006:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800600a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800600e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006010:	f107 0310 	add.w	r3, r7, #16
 8006014:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006018:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800601c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006020:	2200      	movs	r2, #0
 8006022:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800602a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800602e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006032:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800603a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800603e:	3301      	adds	r3, #1
 8006040:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006044:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006048:	1c58      	adds	r0, r3, #1
 800604a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800604e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006058:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	f000 fda8 	bl	8006bb2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006062:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006066:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006070:	4413      	add	r3, r2
 8006072:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006076:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800607a:	2218      	movs	r2, #24
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fda7 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006084:	233f      	movs	r3, #63	@ 0x3f
 8006086:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800608a:	238e      	movs	r3, #142	@ 0x8e
 800608c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006098:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800609c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80060a0:	f107 030f 	add.w	r3, r7, #15
 80060a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 f815 	bl	80070e4 <hci_send_req>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	da01      	bge.n	80060c4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80060c0:	23ff      	movs	r3, #255	@ 0xff
 80060c2:	e004      	b.n	80060ce <aci_gap_update_adv_data+0xda>
  return status;
 80060c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80060cc:	781b      	ldrb	r3, [r3, #0]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	2218      	movs	r2, #24
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fd71 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80060f0:	233f      	movs	r3, #63	@ 0x3f
 80060f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80060f4:	2392      	movs	r3, #146	@ 0x92
 80060f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80060f8:	1dfb      	adds	r3, r7, #7
 80060fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80060fc:	2301      	movs	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006100:	f107 0308 	add.w	r3, r7, #8
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f000 ffec 	bl	80070e4 <hci_send_req>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	da01      	bge.n	8006116 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006112:	23ff      	movs	r3, #255	@ 0xff
 8006114:	e000      	b.n	8006118 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8006116:	79fb      	ldrb	r3, [r7, #7]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b0cc      	sub	sp, #304	@ 0x130
 8006124:	af00      	add	r7, sp, #0
 8006126:	4602      	mov	r2, r0
 8006128:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800612c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006136:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800613a:	460a      	mov	r2, r1
 800613c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800613e:	f107 0310 	add.w	r3, r7, #16
 8006142:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006146:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800614a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800614e:	2200      	movs	r2, #0
 8006150:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006158:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800615c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006160:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006164:	8812      	ldrh	r2, [r2, #0]
 8006166:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006168:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800616c:	3302      	adds	r3, #2
 800616e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006176:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800617a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006182:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800618c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006190:	2218      	movs	r2, #24
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fd1c 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800619a:	233f      	movs	r3, #63	@ 0x3f
 800619c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80061a0:	23a5      	movs	r3, #165	@ 0xa5
 80061a2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80061a6:	f107 0310 	add.w	r3, r7, #16
 80061aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80061ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80061b6:	f107 030f 	add.w	r3, r7, #15
 80061ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80061be:	2301      	movs	r3, #1
 80061c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 ff8a 	bl	80070e4 <hci_send_req>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da01      	bge.n	80061da <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80061d6:	23ff      	movs	r3, #255	@ 0xff
 80061d8:	e004      	b.n	80061e4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80061da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80061e2:	781b      	ldrb	r3, [r3, #0]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b088      	sub	sp, #32
 80061f2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061f8:	f107 0308 	add.w	r3, r7, #8
 80061fc:	2218      	movs	r2, #24
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fce6 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006206:	233f      	movs	r3, #63	@ 0x3f
 8006208:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800620a:	f240 1301 	movw	r3, #257	@ 0x101
 800620e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006210:	1dfb      	adds	r3, r7, #7
 8006212:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006214:	2301      	movs	r3, #1
 8006216:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	2100      	movs	r1, #0
 800621e:	4618      	mov	r0, r3
 8006220:	f000 ff60 	bl	80070e4 <hci_send_req>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	da01      	bge.n	800622e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800622a:	23ff      	movs	r3, #255	@ 0xff
 800622c:	e000      	b.n	8006230 <aci_gatt_init+0x42>
  return status;
 800622e:	79fb      	ldrb	r3, [r7, #7]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b0cf      	sub	sp, #316	@ 0x13c
 800623c:	af00      	add	r7, sp, #0
 800623e:	4604      	mov	r4, r0
 8006240:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8006244:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8006248:	6001      	str	r1, [r0, #0]
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006252:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006256:	4622      	mov	r2, r4
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800625e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006262:	4602      	mov	r2, r0
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800626a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800626e:	460a      	mov	r2, r1
 8006270:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006272:	f107 0310 	add.w	r3, r7, #16
 8006276:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800627a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800627e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d00a      	beq.n	800629e <aci_gatt_add_service+0x66>
 8006288:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800628c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d101      	bne.n	800629a <aci_gatt_add_service+0x62>
 8006296:	2311      	movs	r3, #17
 8006298:	e002      	b.n	80062a0 <aci_gatt_add_service+0x68>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <aci_gatt_add_service+0x68>
 800629e:	2303      	movs	r3, #3
 80062a0:	f107 0210 	add.w	r2, r7, #16
 80062a4:	4413      	add	r3, r2
 80062a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80062aa:	f107 030c 	add.w	r3, r7, #12
 80062ae:	2203      	movs	r2, #3
 80062b0:	2100      	movs	r1, #0
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fc8d 	bl	8006bd2 <Osal_MemSet>
  int index_input = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80062be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80062c2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80062c6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80062ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062d2:	3301      	adds	r3, #1
 80062d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80062d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80062dc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d002      	beq.n	80062ec <aci_gatt_add_service+0xb4>
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d004      	beq.n	80062f4 <aci_gatt_add_service+0xbc>
 80062ea:	e007      	b.n	80062fc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80062f2:	e005      	b.n	8006300 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80062f4:	2310      	movs	r3, #16
 80062f6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80062fa:	e001      	b.n	8006300 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80062fc:	2397      	movs	r3, #151	@ 0x97
 80062fe:	e06c      	b.n	80063da <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006300:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006304:	1c58      	adds	r0, r3, #1
 8006306:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800630a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800630e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006312:	6819      	ldr	r1, [r3, #0]
 8006314:	f000 fc4d 	bl	8006bb2 <Osal_MemCpy>
    index_input += size;
 8006318:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800631c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006320:	4413      	add	r3, r2
 8006322:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8006326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800632a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800632e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006336:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800633a:	3301      	adds	r3, #1
 800633c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006340:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006344:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006348:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006350:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006354:	3301      	adds	r3, #1
 8006356:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800635a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800635e:	2218      	movs	r2, #24
 8006360:	2100      	movs	r1, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fc35 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006368:	233f      	movs	r3, #63	@ 0x3f
 800636a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800636e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006372:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006376:	f107 0310 	add.w	r3, r7, #16
 800637a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800637e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006382:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006386:	f107 030c 	add.w	r3, r7, #12
 800638a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800638e:	2303      	movs	r3, #3
 8006390:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006394:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fea2 	bl	80070e4 <hci_send_req>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da01      	bge.n	80063aa <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80063a6:	23ff      	movs	r3, #255	@ 0xff
 80063a8:	e017      	b.n	80063da <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80063aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80063b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	e00a      	b.n	80063da <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80063c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80063cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80063d6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd90      	pop	{r4, r7, pc}

080063e4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b0d1      	sub	sp, #324	@ 0x144
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80063f2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80063f6:	600a      	str	r2, [r1, #0]
 80063f8:	4619      	mov	r1, r3
 80063fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063fe:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006402:	4622      	mov	r2, r4
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800640a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800640e:	4602      	mov	r2, r0
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006416:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800641a:	460a      	mov	r2, r1
 800641c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800641e:	f107 0318 	add.w	r3, r7, #24
 8006422:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006426:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800642a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d00a      	beq.n	800644a <aci_gatt_add_char+0x66>
 8006434:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006438:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d101      	bne.n	8006446 <aci_gatt_add_char+0x62>
 8006442:	2313      	movs	r3, #19
 8006444:	e002      	b.n	800644c <aci_gatt_add_char+0x68>
 8006446:	2303      	movs	r3, #3
 8006448:	e000      	b.n	800644c <aci_gatt_add_char+0x68>
 800644a:	2305      	movs	r3, #5
 800644c:	f107 0218 	add.w	r2, r7, #24
 8006450:	4413      	add	r3, r2
 8006452:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006456:	f107 0314 	add.w	r3, r7, #20
 800645a:	2203      	movs	r2, #3
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fbb7 	bl	8006bd2 <Osal_MemSet>
  int index_input = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800646a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800646e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006472:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006476:	8812      	ldrh	r2, [r2, #0]
 8006478:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800647a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800647e:	3302      	adds	r3, #2
 8006480:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006484:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006488:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800648c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006494:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006498:	3301      	adds	r3, #1
 800649a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800649e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064a2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d002      	beq.n	80064b2 <aci_gatt_add_char+0xce>
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d004      	beq.n	80064ba <aci_gatt_add_char+0xd6>
 80064b0:	e007      	b.n	80064c2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80064b2:	2302      	movs	r3, #2
 80064b4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80064b8:	e005      	b.n	80064c6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80064ba:	2310      	movs	r3, #16
 80064bc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80064c0:	e001      	b.n	80064c6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80064c2:	2397      	movs	r3, #151	@ 0x97
 80064c4:	e091      	b.n	80065ea <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80064c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80064ca:	1cd8      	adds	r0, r3, #3
 80064cc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80064d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064d4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80064d8:	6819      	ldr	r1, [r3, #0]
 80064da:	f000 fb6a 	bl	8006bb2 <Osal_MemCpy>
    index_input += size;
 80064de:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80064e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80064e6:	4413      	add	r3, r2
 80064e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80064ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80064f4:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80064f8:	8812      	ldrh	r2, [r2, #0]
 80064fa:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80064fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006500:	3302      	adds	r3, #2
 8006502:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006506:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800650a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800650e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006510:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006514:	3301      	adds	r3, #1
 8006516:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800651a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800651e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006522:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006524:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006528:	3301      	adds	r3, #1
 800652a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800652e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006532:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8006536:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006538:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800653c:	3301      	adds	r3, #1
 800653e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006542:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006546:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800654a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800654c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006550:	3301      	adds	r3, #1
 8006552:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006556:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800655a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800655e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006560:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006564:	3301      	adds	r3, #1
 8006566:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800656a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800656e:	2218      	movs	r2, #24
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fb2d 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006578:	233f      	movs	r3, #63	@ 0x3f
 800657a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800657e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006582:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8006586:	f107 0318 	add.w	r3, r7, #24
 800658a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800658e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006592:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8006596:	f107 0314 	add.w	r3, r7, #20
 800659a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800659e:	2303      	movs	r3, #3
 80065a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fd9a 	bl	80070e4 <hci_send_req>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da01      	bge.n	80065ba <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80065b6:	23ff      	movs	r3, #255	@ 0xff
 80065b8:	e017      	b.n	80065ea <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80065ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80065be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80065c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80065cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	e00a      	b.n	80065ea <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80065d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80065d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80065dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80065e6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd90      	pop	{r4, r7, pc}

080065f4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80065f4:	b5b0      	push	{r4, r5, r7, lr}
 80065f6:	b0cc      	sub	sp, #304	@ 0x130
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4605      	mov	r5, r0
 80065fc:	460c      	mov	r4, r1
 80065fe:	4610      	mov	r0, r2
 8006600:	4619      	mov	r1, r3
 8006602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006606:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800660a:	462a      	mov	r2, r5
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006612:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006616:	4622      	mov	r2, r4
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800661e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006622:	4602      	mov	r2, r0
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800662a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800662e:	460a      	mov	r2, r1
 8006630:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006632:	f107 0310 	add.w	r3, r7, #16
 8006636:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800663a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800663e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800664c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006650:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006654:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006658:	8812      	ldrh	r2, [r2, #0]
 800665a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800665c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006660:	3302      	adds	r3, #2
 8006662:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006666:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800666a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800666e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006672:	8812      	ldrh	r2, [r2, #0]
 8006674:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006676:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800667a:	3302      	adds	r3, #2
 800667c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8006680:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006684:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006688:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800668c:	7812      	ldrb	r2, [r2, #0]
 800668e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006690:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006694:	3301      	adds	r3, #1
 8006696:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800669a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800669e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066a2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80066a6:	7812      	ldrb	r2, [r2, #0]
 80066a8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80066aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066ae:	3301      	adds	r3, #1
 80066b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80066b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066b8:	1d98      	adds	r0, r3, #6
 80066ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066be:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80066ca:	f000 fa72 	bl	8006bb2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80066ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066d2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80066dc:	4413      	add	r3, r2
 80066de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066e6:	2218      	movs	r2, #24
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fa71 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80066f0:	233f      	movs	r3, #63	@ 0x3f
 80066f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80066f6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80066fa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80066fe:	f107 0310 	add.w	r3, r7, #16
 8006702:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006706:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800670a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800670e:	f107 030f 	add.w	r3, r7, #15
 8006712:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006716:	2301      	movs	r3, #1
 8006718:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800671c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006720:	2100      	movs	r1, #0
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fcde 	bl	80070e4 <hci_send_req>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	da01      	bge.n	8006732 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800672e:	23ff      	movs	r3, #255	@ 0xff
 8006730:	e004      	b.n	800673c <aci_gatt_update_char_value+0x148>
  return status;
 8006732:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006736:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800673a:	781b      	ldrb	r3, [r3, #0]
}
 800673c:	4618      	mov	r0, r3
 800673e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006742:	46bd      	mov	sp, r7
 8006744:	bdb0      	pop	{r4, r5, r7, pc}

08006746 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b0cc      	sub	sp, #304	@ 0x130
 800674a:	af00      	add	r7, sp, #0
 800674c:	4602      	mov	r2, r0
 800674e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006752:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006756:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8006758:	f107 0310 	add.w	r3, r7, #16
 800675c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006760:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006764:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006772:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006776:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800677a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800677e:	8812      	ldrh	r2, [r2, #0]
 8006780:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006782:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006786:	3302      	adds	r3, #2
 8006788:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800678c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006790:	2218      	movs	r2, #24
 8006792:	2100      	movs	r1, #0
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fa1c 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800679a:	233f      	movs	r3, #63	@ 0x3f
 800679c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80067a0:	f240 1325 	movw	r3, #293	@ 0x125
 80067a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80067a8:	f107 0310 	add.w	r3, r7, #16
 80067ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80067b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80067b8:	f107 030f 	add.w	r3, r7, #15
 80067bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fc89 	bl	80070e4 <hci_send_req>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	da01      	bge.n	80067dc <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80067d8:	23ff      	movs	r3, #255	@ 0xff
 80067da:	e004      	b.n	80067e6 <aci_gatt_confirm_indication+0xa0>
  return status;
 80067dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80067e4:	781b      	ldrb	r3, [r3, #0]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b0cc      	sub	sp, #304	@ 0x130
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006804:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006808:	4602      	mov	r2, r0
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006810:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006814:	460a      	mov	r2, r1
 8006816:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006818:	f107 0310 	add.w	r3, r7, #16
 800681c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006820:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006824:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006832:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006836:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800683a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006842:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006846:	3301      	adds	r3, #1
 8006848:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800684c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006850:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006854:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006858:	7812      	ldrb	r2, [r2, #0]
 800685a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800685c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006860:	3301      	adds	r3, #1
 8006862:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006866:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800686a:	1c98      	adds	r0, r3, #2
 800686c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006870:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800687a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	f000 f997 	bl	8006bb2 <Osal_MemCpy>
  index_input += Length;
 8006884:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006888:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006892:	4413      	add	r3, r2
 8006894:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006898:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800689c:	2218      	movs	r2, #24
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 f996 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80068a6:	233f      	movs	r3, #63	@ 0x3f
 80068a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80068ac:	230c      	movs	r3, #12
 80068ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80068b2:	f107 0310 	add.w	r3, r7, #16
 80068b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80068ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80068c2:	f107 030f 	add.w	r3, r7, #15
 80068c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068d4:	2100      	movs	r1, #0
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fc04 	bl	80070e4 <hci_send_req>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da01      	bge.n	80068e6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80068e2:	23ff      	movs	r3, #255	@ 0xff
 80068e4:	e004      	b.n	80068f0 <aci_hal_write_config_data+0x100>
  return status;
 80068e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80068ee:	781b      	ldrb	r3, [r3, #0]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b0cc      	sub	sp, #304	@ 0x130
 80068fe:	af00      	add	r7, sp, #0
 8006900:	4602      	mov	r2, r0
 8006902:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006906:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006910:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006914:	460a      	mov	r2, r1
 8006916:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006918:	f107 0310 	add.w	r3, r7, #16
 800691c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006920:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006924:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8006932:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006936:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800693a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006942:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006946:	3301      	adds	r3, #1
 8006948:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800694c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006950:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006954:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800695c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006960:	3301      	adds	r3, #1
 8006962:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800696a:	2218      	movs	r2, #24
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f92f 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006974:	233f      	movs	r3, #63	@ 0x3f
 8006976:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800697a:	230f      	movs	r3, #15
 800697c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006980:	f107 0310 	add.w	r3, r7, #16
 8006984:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800698c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006990:	f107 030f 	add.w	r3, r7, #15
 8006994:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006998:	2301      	movs	r3, #1
 800699a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800699e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fb9d 	bl	80070e4 <hci_send_req>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da01      	bge.n	80069b4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80069b0:	23ff      	movs	r3, #255	@ 0xff
 80069b2:	e004      	b.n	80069be <aci_hal_set_tx_power_level+0xc4>
  return status;
 80069b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80069bc:	781b      	ldrb	r3, [r3, #0]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b0cc      	sub	sp, #304	@ 0x130
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4602      	mov	r2, r0
 80069d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069d4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80069d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80069da:	f107 0310 	add.w	r3, r7, #16
 80069de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80069e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80069ea:	2200      	movs	r2, #0
 80069ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80069f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80069f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80069fc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006a00:	8812      	ldrh	r2, [r2, #0]
 8006a02:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a08:	3302      	adds	r3, #2
 8006a0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a12:	2218      	movs	r2, #24
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f8db 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a1c:	233f      	movs	r3, #63	@ 0x3f
 8006a1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8006a22:	2318      	movs	r3, #24
 8006a24:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006a28:	f107 0310 	add.w	r3, r7, #16
 8006a2c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006a30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006a38:	f107 030f 	add.w	r3, r7, #15
 8006a3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 fb49 	bl	80070e4 <hci_send_req>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	da01      	bge.n	8006a5c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006a58:	23ff      	movs	r3, #255	@ 0xff
 8006a5a:	e004      	b.n	8006a66 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006a5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a60:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a64:	781b      	ldrb	r3, [r3, #0]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	2218      	movs	r2, #24
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 f8a5 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x03;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006a90:	1dfb      	adds	r3, r7, #7
 8006a92:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006a94:	2301      	movs	r3, #1
 8006a96:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a98:	f107 0308 	add.w	r3, r7, #8
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fb20 	bl	80070e4 <hci_send_req>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da01      	bge.n	8006aae <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006aaa:	23ff      	movs	r3, #255	@ 0xff
 8006aac:	e000      	b.n	8006ab0 <hci_reset+0x40>
  return status;
 8006aae:	79fb      	ldrb	r3, [r7, #7]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b0cd      	sub	sp, #308	@ 0x134
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ac8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006acc:	4622      	mov	r2, r4
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ad4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006ad8:	4602      	mov	r2, r0
 8006ada:	701a      	strb	r2, [r3, #0]
 8006adc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ae0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006ae8:	f107 0310 	add.w	r3, r7, #16
 8006aec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006af0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006af4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006af8:	2200      	movs	r2, #0
 8006afa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006b0a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b16:	3301      	adds	r3, #1
 8006b18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006b24:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006b28:	7812      	ldrb	r2, [r2, #0]
 8006b2a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b30:	3301      	adds	r3, #1
 8006b32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006b3e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b54:	2218      	movs	r2, #24
 8006b56:	2100      	movs	r1, #0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 f83a 	bl	8006bd2 <Osal_MemSet>
  rq.ogf = 0x08;
 8006b5e:	2308      	movs	r3, #8
 8006b60:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8006b64:	2331      	movs	r3, #49	@ 0x31
 8006b66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006b6a:	f107 0310 	add.w	r3, r7, #16
 8006b6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006b7a:	f107 030f 	add.w	r3, r7, #15
 8006b7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 faa8 	bl	80070e4 <hci_send_req>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	da01      	bge.n	8006b9e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006b9a:	23ff      	movs	r3, #255	@ 0xff
 8006b9c:	e004      	b.n	8006ba8 <hci_le_set_default_phy+0xf0>
  return status;
 8006b9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ba2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ba6:	781b      	ldrb	r3, [r3, #0]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd90      	pop	{r4, r7, pc}

08006bb2 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f002 fbbd 	bl	8009342 <memcpy>
 8006bc8:	4603      	mov	r3, r0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f002 fb31 	bl	800924a <memset>
 8006be8:	4603      	mov	r3, r0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	af00      	add	r7, sp, #0
  return;
 8006bf6:	bf00      	nop
}
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  return;
 8006c04:	bf00      	nop
}
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006c0e:	b480      	push	{r7}
 8006c10:	af00      	add	r7, sp, #0
  return;
 8006c12:	bf00      	nop
}
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  return;
 8006c20:	bf00      	nop
}
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	af00      	add	r7, sp, #0
  return;
 8006c2e:	bf00      	nop
}
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return;
 8006c3c:	bf00      	nop
}
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006c46:	b480      	push	{r7}
 8006c48:	af00      	add	r7, sp, #0
  return;
 8006c4a:	bf00      	nop
}
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  return;
 8006c58:	bf00      	nop
}
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006c62:	b480      	push	{r7}
 8006c64:	af00      	add	r7, sp, #0
  return;
 8006c66:	bf00      	nop
}
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  return;
 8006c74:	bf00      	nop
}
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006c7e:	b480      	push	{r7}
 8006c80:	af00      	add	r7, sp, #0
  return;
 8006c82:	bf00      	nop
}
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  return;
 8006c90:	bf00      	nop
}
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	af00      	add	r7, sp, #0
  return;
 8006c9e:	bf00      	nop
}
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  return;
 8006cac:	bf00      	nop
}
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	af00      	add	r7, sp, #0
  return;
 8006cba:	bf00      	nop
}
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  return;
 8006cc8:	bf00      	nop
}
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	af00      	add	r7, sp, #0
  return;
 8006cd6:	bf00      	nop
}
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006ce4:	4b04      	ldr	r3, [pc, #16]	@ (8006cf8 <SVCCTL_Init+0x18>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006cea:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <SVCCTL_Init+0x1c>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006cf0:	f000 f806 	bl	8006d00 <SVCCTL_SvcInit>

  return;
 8006cf4:	bf00      	nop
}
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	200000c8 	.word	0x200000c8
 8006cfc:	200000e8 	.word	0x200000e8

08006d00 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  BAS_Init();
 8006d04:	f7ff ff75 	bl	8006bf2 <BAS_Init>

  BLS_Init();
 8006d08:	f7ff ff7a 	bl	8006c00 <BLS_Init>

  CRS_STM_Init();
 8006d0c:	f7ff ff7f 	bl	8006c0e <CRS_STM_Init>

  DIS_Init();
 8006d10:	f7ff ff84 	bl	8006c1c <DIS_Init>

  EDS_STM_Init();
 8006d14:	f7ff ff89 	bl	8006c2a <EDS_STM_Init>

  HIDS_Init();
 8006d18:	f7ff ff8e 	bl	8006c38 <HIDS_Init>

  HRS_Init();
 8006d1c:	f7ff ff93 	bl	8006c46 <HRS_Init>

  HTS_Init();
 8006d20:	f7ff ff98 	bl	8006c54 <HTS_Init>

  IAS_Init();
 8006d24:	f7ff ff9d 	bl	8006c62 <IAS_Init>

  LLS_Init();
 8006d28:	f7ff ffa2 	bl	8006c70 <LLS_Init>

  TPS_Init();
 8006d2c:	f7ff ffa7 	bl	8006c7e <TPS_Init>

  MOTENV_STM_Init();
 8006d30:	f7ff ffac 	bl	8006c8c <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006d34:	f7ff ffb1 	bl	8006c9a <P2PS_STM_Init>

  ZDD_STM_Init();
 8006d38:	f7ff ffb6 	bl	8006ca8 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006d3c:	f7ff ffbb 	bl	8006cb6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006d40:	f7ff ffc7 	bl	8006cd2 <BVOPUS_STM_Init>

  MESH_Init();
 8006d44:	f7ff ffbe 	bl	8006cc4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006d48:	f001 fbd2 	bl	80084f0 <SVCCTL_InitCustomSvc>
  
  return;
 8006d4c:	bf00      	nop
}
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006d58:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <SVCCTL_RegisterSvcHandler+0x30>)
 8006d5a:	7f1b      	ldrb	r3, [r3, #28]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4a08      	ldr	r2, [pc, #32]	@ (8006d80 <SVCCTL_RegisterSvcHandler+0x30>)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006d66:	4b06      	ldr	r3, [pc, #24]	@ (8006d80 <SVCCTL_RegisterSvcHandler+0x30>)
 8006d68:	7f1b      	ldrb	r3, [r3, #28]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <SVCCTL_RegisterSvcHandler+0x30>)
 8006d70:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006d72:	bf00      	nop
}
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	200000c8 	.word	0x200000c8

08006d84 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2bff      	cmp	r3, #255	@ 0xff
 8006d9c:	d125      	bne.n	8006dea <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3302      	adds	r3, #2
 8006da2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006dae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006db2:	d118      	bne.n	8006de6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006db4:	2300      	movs	r3, #0
 8006db6:	757b      	strb	r3, [r7, #21]
 8006db8:	e00d      	b.n	8006dd6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006dba:	7d7b      	ldrb	r3, [r7, #21]
 8006dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8006e28 <SVCCTL_UserEvtRx+0xa4>)
 8006dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d108      	bne.n	8006de2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006dd0:	7d7b      	ldrb	r3, [r7, #21]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	757b      	strb	r3, [r7, #21]
 8006dd6:	4b14      	ldr	r3, [pc, #80]	@ (8006e28 <SVCCTL_UserEvtRx+0xa4>)
 8006dd8:	7f1b      	ldrb	r3, [r3, #28]
 8006dda:	7d7a      	ldrb	r2, [r7, #21]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d3ec      	bcc.n	8006dba <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006de0:	e002      	b.n	8006de8 <SVCCTL_UserEvtRx+0x64>
              break;
 8006de2:	bf00      	nop
          break;
 8006de4:	e000      	b.n	8006de8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006de6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006de8:	e000      	b.n	8006dec <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006dea:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d00f      	beq.n	8006e12 <SVCCTL_UserEvtRx+0x8e>
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	dc10      	bgt.n	8006e18 <SVCCTL_UserEvtRx+0x94>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <SVCCTL_UserEvtRx+0x7c>
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d006      	beq.n	8006e0c <SVCCTL_UserEvtRx+0x88>
 8006dfe:	e00b      	b.n	8006e18 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 ff9b 	bl	8007d3c <SVCCTL_App_Notification>
 8006e06:	4603      	mov	r3, r0
 8006e08:	75bb      	strb	r3, [r7, #22]
      break;
 8006e0a:	e008      	b.n	8006e1e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	75bb      	strb	r3, [r7, #22]
      break;
 8006e10:	e005      	b.n	8006e1e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006e12:	2300      	movs	r3, #0
 8006e14:	75bb      	strb	r3, [r7, #22]
      break;
 8006e16:	e002      	b.n	8006e1e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	75bb      	strb	r3, [r7, #22]
      break;
 8006e1c:	bf00      	nop
  }

  return (return_status);
 8006e1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	200000c8 	.word	0x200000c8

08006e2c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006e34:	f107 030c 	add.w	r3, r7, #12
 8006e38:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	212e      	movs	r1, #46	@ 0x2e
 8006e44:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006e48:	f000 fae8 	bl	800741c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	330b      	adds	r3, #11
 8006e50:	78db      	ldrb	r3, [r3, #3]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b088      	sub	sp, #32
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	210f      	movs	r1, #15
 8006e72:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006e76:	f000 fad1 	bl	800741c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	330b      	adds	r3, #11
 8006e7e:	78db      	ldrb	r3, [r3, #3]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006e90:	f107 030c 	add.w	r3, r7, #12
 8006e94:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	2110      	movs	r1, #16
 8006e9c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006ea0:	f000 fabc 	bl	800741c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	330b      	adds	r3, #11
 8006ea8:	78db      	ldrb	r3, [r3, #3]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3720      	adds	r7, #32
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b08b      	sub	sp, #44	@ 0x2c
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006edc:	4b4a      	ldr	r3, [pc, #296]	@ (8007008 <SHCI_GetWirelessFwInfo+0x154>)
 8006ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006ee4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006eee:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a44      	ldr	r2, [pc, #272]	@ (800700c <SHCI_GetWirelessFwInfo+0x158>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10f      	bne.n	8006f20 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e01a      	b.n	8006f56 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006f28:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006f2c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	0e1b      	lsrs	r3, r3, #24
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	0c1b      	lsrs	r3, r3, #16
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	0a1b      	lsrs	r3, r3, #8
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	091b      	lsrs	r3, r3, #4
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f003 030f 	and.w	r3, r3, #15
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	0e1b      	lsrs	r3, r3, #24
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	0c1b      	lsrs	r3, r3, #16
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	0a1b      	lsrs	r3, r3, #8
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	0e1b      	lsrs	r3, r3, #24
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	0c1b      	lsrs	r3, r3, #16
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	0e1b      	lsrs	r3, r3, #24
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	372c      	adds	r7, #44	@ 0x2c
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	58004000 	.word	0x58004000
 800700c:	a94656b9 	.word	0xa94656b9

08007010 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	4a08      	ldr	r2, [pc, #32]	@ (8007040 <hci_init+0x30>)
 8007020:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007022:	4a08      	ldr	r2, [pc, #32]	@ (8007044 <hci_init+0x34>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007028:	4806      	ldr	r0, [pc, #24]	@ (8007044 <hci_init+0x34>)
 800702a:	f000 f979 	bl	8007320 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 f8da 	bl	80071ec <TlInit>

  return;
 8007038:	bf00      	nop
}
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000358 	.word	0x20000358
 8007044:	20000330 	.word	0x20000330

08007048 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800704e:	4822      	ldr	r0, [pc, #136]	@ (80070d8 <hci_user_evt_proc+0x90>)
 8007050:	f000 fd32 	bl	8007ab8 <LST_is_empty>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d12b      	bne.n	80070b2 <hci_user_evt_proc+0x6a>
 800705a:	4b20      	ldr	r3, [pc, #128]	@ (80070dc <hci_user_evt_proc+0x94>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d027      	beq.n	80070b2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007062:	f107 030c 	add.w	r3, r7, #12
 8007066:	4619      	mov	r1, r3
 8007068:	481b      	ldr	r0, [pc, #108]	@ (80070d8 <hci_user_evt_proc+0x90>)
 800706a:	f000 fdb4 	bl	8007bd6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800706e:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <hci_user_evt_proc+0x98>)
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800707a:	2301      	movs	r3, #1
 800707c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800707e:	4b18      	ldr	r3, [pc, #96]	@ (80070e0 <hci_user_evt_proc+0x98>)
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	1d3a      	adds	r2, r7, #4
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007088:	793a      	ldrb	r2, [r7, #4]
 800708a:	4b14      	ldr	r3, [pc, #80]	@ (80070dc <hci_user_evt_proc+0x94>)
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	e002      	b.n	8007096 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007090:	4b12      	ldr	r3, [pc, #72]	@ (80070dc <hci_user_evt_proc+0x94>)
 8007092:	2201      	movs	r2, #1
 8007094:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007096:	4b11      	ldr	r3, [pc, #68]	@ (80070dc <hci_user_evt_proc+0x94>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fc0d 	bl	80078c0 <TL_MM_EvtDone>
 80070a6:	e004      	b.n	80070b2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4619      	mov	r1, r3
 80070ac:	480a      	ldr	r0, [pc, #40]	@ (80070d8 <hci_user_evt_proc+0x90>)
 80070ae:	f000 fd25 	bl	8007afc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80070b2:	4809      	ldr	r0, [pc, #36]	@ (80070d8 <hci_user_evt_proc+0x90>)
 80070b4:	f000 fd00 	bl	8007ab8 <LST_is_empty>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d107      	bne.n	80070ce <hci_user_evt_proc+0x86>
 80070be:	4b07      	ldr	r3, [pc, #28]	@ (80070dc <hci_user_evt_proc+0x94>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80070c6:	4804      	ldr	r0, [pc, #16]	@ (80070d8 <hci_user_evt_proc+0x90>)
 80070c8:	f001 f86c 	bl	80081a4 <hci_notify_asynch_evt>
  }


  return;
 80070cc:	bf00      	nop
 80070ce:	bf00      	nop
}
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	200000f0 	.word	0x200000f0
 80070dc:	200000fc 	.word	0x200000fc
 80070e0:	20000330 	.word	0x20000330

080070e4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80070f0:	2000      	movs	r0, #0
 80070f2:	f000 f8d1 	bl	8007298 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80070f6:	2300      	movs	r3, #0
 80070f8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	885b      	ldrh	r3, [r3, #2]
 80070fe:	b21b      	sxth	r3, r3
 8007100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007104:	b21a      	sxth	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	029b      	lsls	r3, r3, #10
 800710c:	b21b      	sxth	r3, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	b21b      	sxth	r3, r3
 8007112:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007114:	4b33      	ldr	r3, [pc, #204]	@ (80071e4 <hci_send_req+0x100>)
 8007116:	2201      	movs	r2, #1
 8007118:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	b2d9      	uxtb	r1, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	8bbb      	ldrh	r3, [r7, #28]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 f890 	bl	800724c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800712c:	e04e      	b.n	80071cc <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800712e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007132:	f001 f84e 	bl	80081d2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007136:	e043      	b.n	80071c0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	4619      	mov	r1, r3
 800713e:	482a      	ldr	r0, [pc, #168]	@ (80071e8 <hci_send_req+0x104>)
 8007140:	f000 fd49 	bl	8007bd6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	7a5b      	ldrb	r3, [r3, #9]
 8007148:	2b0f      	cmp	r3, #15
 800714a:	d114      	bne.n	8007176 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	330b      	adds	r3, #11
 8007150:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	885b      	ldrh	r3, [r3, #2]
 8007156:	b29b      	uxth	r3, r3
 8007158:	8bba      	ldrh	r2, [r7, #28]
 800715a:	429a      	cmp	r2, r3
 800715c:	d104      	bne.n	8007168 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	7812      	ldrb	r2, [r2, #0]
 8007166:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d027      	beq.n	80071c0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007170:	2301      	movs	r3, #1
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e024      	b.n	80071c0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	330b      	adds	r3, #11
 800717a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007182:	b29b      	uxth	r3, r3
 8007184:	8bba      	ldrh	r2, [r7, #28]
 8007186:	429a      	cmp	r2, r3
 8007188:	d114      	bne.n	80071b4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	7a9b      	ldrb	r3, [r3, #10]
 800718e:	3b03      	subs	r3, #3
 8007190:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	429a      	cmp	r2, r3
 800719a:	bfa8      	it	ge
 800719c:	461a      	movge	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6918      	ldr	r0, [r3, #16]
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	1cd9      	adds	r1, r3, #3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f002 f8c7 	bl	8009342 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80071bc:	2301      	movs	r3, #1
 80071be:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80071c0:	4809      	ldr	r0, [pc, #36]	@ (80071e8 <hci_send_req+0x104>)
 80071c2:	f000 fc79 	bl	8007ab8 <LST_is_empty>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0b5      	beq.n	8007138 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80071cc:	7ffb      	ldrb	r3, [r7, #31]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0ad      	beq.n	800712e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80071d2:	2001      	movs	r0, #1
 80071d4:	f000 f860 	bl	8007298 <NotifyCmdStatus>

  return 0;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3720      	adds	r7, #32
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	2000035c 	.word	0x2000035c
 80071e8:	20000350 	.word	0x20000350

080071ec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80071f4:	480f      	ldr	r0, [pc, #60]	@ (8007234 <TlInit+0x48>)
 80071f6:	f000 fc4f 	bl	8007a98 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80071fa:	4a0f      	ldr	r2, [pc, #60]	@ (8007238 <TlInit+0x4c>)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007200:	480e      	ldr	r0, [pc, #56]	@ (800723c <TlInit+0x50>)
 8007202:	f000 fc49 	bl	8007a98 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007206:	4b0e      	ldr	r3, [pc, #56]	@ (8007240 <TlInit+0x54>)
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800720c:	4b0d      	ldr	r3, [pc, #52]	@ (8007244 <TlInit+0x58>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007218:	4b0b      	ldr	r3, [pc, #44]	@ (8007248 <TlInit+0x5c>)
 800721a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800721c:	4b09      	ldr	r3, [pc, #36]	@ (8007244 <TlInit+0x58>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f107 0208 	add.w	r2, r7, #8
 8007224:	4610      	mov	r0, r2
 8007226:	4798      	blx	r3
  }

  return;
 8007228:	bf00      	nop
 800722a:	bf00      	nop
}
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000350 	.word	0x20000350
 8007238:	200000f8 	.word	0x200000f8
 800723c:	200000f0 	.word	0x200000f0
 8007240:	200000fc 	.word	0x200000fc
 8007244:	20000330 	.word	0x20000330
 8007248:	080072d9 	.word	0x080072d9

0800724c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	603a      	str	r2, [r7, #0]
 8007256:	80fb      	strh	r3, [r7, #6]
 8007258:	460b      	mov	r3, r1
 800725a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800725c:	4b0c      	ldr	r3, [pc, #48]	@ (8007290 <SendCmd+0x44>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007266:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <SendCmd+0x44>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	797a      	ldrb	r2, [r7, #5]
 800726c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800726e:	4b08      	ldr	r3, [pc, #32]	@ (8007290 <SendCmd+0x44>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	797a      	ldrb	r2, [r7, #5]
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f002 f862 	bl	8009342 <memcpy>

  hciContext.io.Send(0,0);
 800727e:	4b05      	ldr	r3, [pc, #20]	@ (8007294 <SendCmd+0x48>)
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2100      	movs	r1, #0
 8007284:	2000      	movs	r0, #0
 8007286:	4798      	blx	r3

  return;
 8007288:	bf00      	nop
}
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	200000f8 	.word	0x200000f8
 8007294:	20000330 	.word	0x20000330

08007298 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d108      	bne.n	80072ba <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80072a8:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <NotifyCmdStatus+0x3c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80072b0:	4b08      	ldr	r3, [pc, #32]	@ (80072d4 <NotifyCmdStatus+0x3c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2000      	movs	r0, #0
 80072b6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80072b8:	e008      	b.n	80072cc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80072ba:	4b06      	ldr	r3, [pc, #24]	@ (80072d4 <NotifyCmdStatus+0x3c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80072c2:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <NotifyCmdStatus+0x3c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2001      	movs	r0, #1
 80072c8:	4798      	blx	r3
  return;
 80072ca:	bf00      	nop
 80072cc:	bf00      	nop
}
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000358 	.word	0x20000358

080072d8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7a5b      	ldrb	r3, [r3, #9]
 80072e4:	2b0f      	cmp	r3, #15
 80072e6:	d003      	beq.n	80072f0 <TlEvtReceived+0x18>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7a5b      	ldrb	r3, [r3, #9]
 80072ec:	2b0e      	cmp	r3, #14
 80072ee:	d107      	bne.n	8007300 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	4809      	ldr	r0, [pc, #36]	@ (8007318 <TlEvtReceived+0x40>)
 80072f4:	f000 fc28 	bl	8007b48 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80072f8:	2000      	movs	r0, #0
 80072fa:	f000 ff5f 	bl	80081bc <hci_cmd_resp_release>
 80072fe:	e006      	b.n	800730e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	4806      	ldr	r0, [pc, #24]	@ (800731c <TlEvtReceived+0x44>)
 8007304:	f000 fc20 	bl	8007b48 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007308:	4804      	ldr	r0, [pc, #16]	@ (800731c <TlEvtReceived+0x44>)
 800730a:	f000 ff4b 	bl	80081a4 <hci_notify_asynch_evt>
  }

  return;
 800730e:	bf00      	nop
}
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000350 	.word	0x20000350
 800731c:	200000f0 	.word	0x200000f0

08007320 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a05      	ldr	r2, [pc, #20]	@ (8007340 <hci_register_io_bus+0x20>)
 800732c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a04      	ldr	r2, [pc, #16]	@ (8007344 <hci_register_io_bus+0x24>)
 8007332:	611a      	str	r2, [r3, #16]

  return;
 8007334:	bf00      	nop
}
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	08007639 	.word	0x08007639
 8007344:	080076a1 	.word	0x080076a1

08007348 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	4a08      	ldr	r2, [pc, #32]	@ (8007378 <shci_init+0x30>)
 8007358:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800735a:	4a08      	ldr	r2, [pc, #32]	@ (800737c <shci_init+0x34>)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007360:	4806      	ldr	r0, [pc, #24]	@ (800737c <shci_init+0x34>)
 8007362:	f000 f915 	bl	8007590 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 f898 	bl	80074a0 <TlInit>

  return;
 8007370:	bf00      	nop
}
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20000380 	.word	0x20000380
 800737c:	20000360 	.word	0x20000360

08007380 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007386:	4822      	ldr	r0, [pc, #136]	@ (8007410 <shci_user_evt_proc+0x90>)
 8007388:	f000 fb96 	bl	8007ab8 <LST_is_empty>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d12b      	bne.n	80073ea <shci_user_evt_proc+0x6a>
 8007392:	4b20      	ldr	r3, [pc, #128]	@ (8007414 <shci_user_evt_proc+0x94>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d027      	beq.n	80073ea <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800739a:	f107 030c 	add.w	r3, r7, #12
 800739e:	4619      	mov	r1, r3
 80073a0:	481b      	ldr	r0, [pc, #108]	@ (8007410 <shci_user_evt_proc+0x90>)
 80073a2:	f000 fc18 	bl	8007bd6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80073a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007418 <shci_user_evt_proc+0x98>)
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80073b2:	2301      	movs	r3, #1
 80073b4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80073b6:	4b18      	ldr	r3, [pc, #96]	@ (8007418 <shci_user_evt_proc+0x98>)
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	1d3a      	adds	r2, r7, #4
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80073c0:	793a      	ldrb	r2, [r7, #4]
 80073c2:	4b14      	ldr	r3, [pc, #80]	@ (8007414 <shci_user_evt_proc+0x94>)
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	e002      	b.n	80073ce <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80073c8:	4b12      	ldr	r3, [pc, #72]	@ (8007414 <shci_user_evt_proc+0x94>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80073ce:	4b11      	ldr	r3, [pc, #68]	@ (8007414 <shci_user_evt_proc+0x94>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fa71 	bl	80078c0 <TL_MM_EvtDone>
 80073de:	e004      	b.n	80073ea <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4619      	mov	r1, r3
 80073e4:	480a      	ldr	r0, [pc, #40]	@ (8007410 <shci_user_evt_proc+0x90>)
 80073e6:	f000 fb89 	bl	8007afc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80073ea:	4809      	ldr	r0, [pc, #36]	@ (8007410 <shci_user_evt_proc+0x90>)
 80073ec:	f000 fb64 	bl	8007ab8 <LST_is_empty>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d107      	bne.n	8007406 <shci_user_evt_proc+0x86>
 80073f6:	4b07      	ldr	r3, [pc, #28]	@ (8007414 <shci_user_evt_proc+0x94>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80073fe:	4804      	ldr	r0, [pc, #16]	@ (8007410 <shci_user_evt_proc+0x90>)
 8007400:	f7f9 facb 	bl	800099a <shci_notify_asynch_evt>
  }


  return;
 8007404:	bf00      	nop
 8007406:	bf00      	nop
}
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000100 	.word	0x20000100
 8007414:	20000110 	.word	0x20000110
 8007418:	20000360 	.word	0x20000360

0800741c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	60ba      	str	r2, [r7, #8]
 8007424:	607b      	str	r3, [r7, #4]
 8007426:	4603      	mov	r3, r0
 8007428:	81fb      	strh	r3, [r7, #14]
 800742a:	460b      	mov	r3, r1
 800742c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800742e:	2000      	movs	r0, #0
 8007430:	f000 f868 	bl	8007504 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007434:	4b17      	ldr	r3, [pc, #92]	@ (8007494 <shci_send+0x78>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	89fa      	ldrh	r2, [r7, #14]
 800743a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800743e:	4b15      	ldr	r3, [pc, #84]	@ (8007494 <shci_send+0x78>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	7b7a      	ldrb	r2, [r7, #13]
 8007444:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007446:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <shci_send+0x78>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	330c      	adds	r3, #12
 800744c:	7b7a      	ldrb	r2, [r7, #13]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	4618      	mov	r0, r3
 8007452:	f001 ff76 	bl	8009342 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8007456:	4b10      	ldr	r3, [pc, #64]	@ (8007498 <shci_send+0x7c>)
 8007458:	2201      	movs	r2, #1
 800745a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800745c:	4b0f      	ldr	r3, [pc, #60]	@ (800749c <shci_send+0x80>)
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2100      	movs	r1, #0
 8007462:	2000      	movs	r0, #0
 8007464:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007466:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800746a:	f7f9 faad 	bl	80009c8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f103 0008 	add.w	r0, r3, #8
 8007474:	4b07      	ldr	r3, [pc, #28]	@ (8007494 <shci_send+0x78>)
 8007476:	6819      	ldr	r1, [r3, #0]
 8007478:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <shci_send+0x78>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	789b      	ldrb	r3, [r3, #2]
 800747e:	3303      	adds	r3, #3
 8007480:	461a      	mov	r2, r3
 8007482:	f001 ff5e 	bl	8009342 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007486:	2001      	movs	r0, #1
 8007488:	f000 f83c 	bl	8007504 <Cmd_SetStatus>

  return;
 800748c:	bf00      	nop
}
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	2000010c 	.word	0x2000010c
 8007498:	20000384 	.word	0x20000384
 800749c:	20000360 	.word	0x20000360

080074a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80074a8:	4a10      	ldr	r2, [pc, #64]	@ (80074ec <TlInit+0x4c>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80074ae:	4810      	ldr	r0, [pc, #64]	@ (80074f0 <TlInit+0x50>)
 80074b0:	f000 faf2 	bl	8007a98 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80074b4:	2001      	movs	r0, #1
 80074b6:	f000 f825 	bl	8007504 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80074ba:	4b0e      	ldr	r3, [pc, #56]	@ (80074f4 <TlInit+0x54>)
 80074bc:	2201      	movs	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80074c0:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <TlInit+0x58>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00c      	beq.n	80074e2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80074cc:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <TlInit+0x5c>)
 80074ce:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80074d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <TlInit+0x60>)
 80074d2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80074d4:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <TlInit+0x58>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f107 020c 	add.w	r2, r7, #12
 80074dc:	4610      	mov	r0, r2
 80074de:	4798      	blx	r3
  }

  return;
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
}
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	2000010c 	.word	0x2000010c
 80074f0:	20000100 	.word	0x20000100
 80074f4:	20000110 	.word	0x20000110
 80074f8:	20000360 	.word	0x20000360
 80074fc:	08007555 	.word	0x08007555
 8007500:	0800756d 	.word	0x0800756d

08007504 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007514:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <Cmd_SetStatus+0x48>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800751c:	4b0b      	ldr	r3, [pc, #44]	@ (800754c <Cmd_SetStatus+0x48>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2000      	movs	r0, #0
 8007522:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007524:	4b0a      	ldr	r3, [pc, #40]	@ (8007550 <Cmd_SetStatus+0x4c>)
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800752a:	e00b      	b.n	8007544 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800752c:	4b08      	ldr	r3, [pc, #32]	@ (8007550 <Cmd_SetStatus+0x4c>)
 800752e:	2201      	movs	r2, #1
 8007530:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007532:	4b06      	ldr	r3, [pc, #24]	@ (800754c <Cmd_SetStatus+0x48>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d004      	beq.n	8007544 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800753a:	4b04      	ldr	r3, [pc, #16]	@ (800754c <Cmd_SetStatus+0x48>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2001      	movs	r0, #1
 8007540:	4798      	blx	r3
  return;
 8007542:	bf00      	nop
 8007544:	bf00      	nop
}
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20000380 	.word	0x20000380
 8007550:	20000108 	.word	0x20000108

08007554 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800755c:	2000      	movs	r0, #0
 800755e:	f7f9 fa28 	bl	80009b2 <shci_cmd_resp_release>

  return;
 8007562:	bf00      	nop
}
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007574:	6879      	ldr	r1, [r7, #4]
 8007576:	4805      	ldr	r0, [pc, #20]	@ (800758c <TlUserEvtReceived+0x20>)
 8007578:	f000 fae6 	bl	8007b48 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800757c:	4803      	ldr	r0, [pc, #12]	@ (800758c <TlUserEvtReceived+0x20>)
 800757e:	f7f9 fa0c 	bl	800099a <shci_notify_asynch_evt>

  return;
 8007582:	bf00      	nop
}
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20000100 	.word	0x20000100

08007590 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a05      	ldr	r2, [pc, #20]	@ (80075b0 <shci_register_io_bus+0x20>)
 800759c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a04      	ldr	r2, [pc, #16]	@ (80075b4 <shci_register_io_bus+0x24>)
 80075a2:	611a      	str	r2, [r3, #16]

  return;
 80075a4:	bf00      	nop
}
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	0800774d 	.word	0x0800774d
 80075b4:	080077a1 	.word	0x080077a1

080075b8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80075bc:	f001 f9f8 	bl	80089b0 <HW_IPCC_Enable>

  return;
 80075c0:	bf00      	nop
}
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <TL_Init>:


void TL_Init( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80075c8:	4b10      	ldr	r3, [pc, #64]	@ (800760c <TL_Init+0x48>)
 80075ca:	4a11      	ldr	r2, [pc, #68]	@ (8007610 <TL_Init+0x4c>)
 80075cc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80075ce:	4b0f      	ldr	r3, [pc, #60]	@ (800760c <TL_Init+0x48>)
 80075d0:	4a10      	ldr	r2, [pc, #64]	@ (8007614 <TL_Init+0x50>)
 80075d2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80075d4:	4b0d      	ldr	r3, [pc, #52]	@ (800760c <TL_Init+0x48>)
 80075d6:	4a10      	ldr	r2, [pc, #64]	@ (8007618 <TL_Init+0x54>)
 80075d8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80075da:	4b0c      	ldr	r3, [pc, #48]	@ (800760c <TL_Init+0x48>)
 80075dc:	4a0f      	ldr	r2, [pc, #60]	@ (800761c <TL_Init+0x58>)
 80075de:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80075e0:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <TL_Init+0x48>)
 80075e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007620 <TL_Init+0x5c>)
 80075e4:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80075e6:	4b09      	ldr	r3, [pc, #36]	@ (800760c <TL_Init+0x48>)
 80075e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007624 <TL_Init+0x60>)
 80075ea:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80075ec:	4b07      	ldr	r3, [pc, #28]	@ (800760c <TL_Init+0x48>)
 80075ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007628 <TL_Init+0x64>)
 80075f0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80075f2:	4b06      	ldr	r3, [pc, #24]	@ (800760c <TL_Init+0x48>)
 80075f4:	4a0d      	ldr	r2, [pc, #52]	@ (800762c <TL_Init+0x68>)
 80075f6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <TL_Init+0x48>)
 80075fa:	4a0d      	ldr	r2, [pc, #52]	@ (8007630 <TL_Init+0x6c>)
 80075fc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80075fe:	4b03      	ldr	r3, [pc, #12]	@ (800760c <TL_Init+0x48>)
 8007600:	4a0c      	ldr	r2, [pc, #48]	@ (8007634 <TL_Init+0x70>)
 8007602:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007604:	f001 f9e8 	bl	80089d8 <HW_IPCC_Init>

  return;
 8007608:	bf00      	nop
}
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20030000 	.word	0x20030000
 8007610:	20030028 	.word	0x20030028
 8007614:	20030048 	.word	0x20030048
 8007618:	20030058 	.word	0x20030058
 800761c:	20030068 	.word	0x20030068
 8007620:	20030070 	.word	0x20030070
 8007624:	20030078 	.word	0x20030078
 8007628:	20030080 	.word	0x20030080
 800762c:	2003009c 	.word	0x2003009c
 8007630:	200300a0 	.word	0x200300a0
 8007634:	200300ac 	.word	0x200300ac

08007638 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007644:	4811      	ldr	r0, [pc, #68]	@ (800768c <TL_BLE_Init+0x54>)
 8007646:	f000 fa27 	bl	8007a98 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800764a:	4b11      	ldr	r3, [pc, #68]	@ (8007690 <TL_BLE_Init+0x58>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4a0c      	ldr	r2, [pc, #48]	@ (8007694 <TL_BLE_Init+0x5c>)
 8007664:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4a08      	ldr	r2, [pc, #32]	@ (800768c <TL_BLE_Init+0x54>)
 800766a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800766c:	f001 f9ca 	bl	8008a04 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a08      	ldr	r2, [pc, #32]	@ (8007698 <TL_BLE_Init+0x60>)
 8007676:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4a07      	ldr	r2, [pc, #28]	@ (800769c <TL_BLE_Init+0x64>)
 800767e:	6013      	str	r3, [r2, #0]

  return 0;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	200300c8 	.word	0x200300c8
 8007690:	20030000 	.word	0x20030000
 8007694:	20030a58 	.word	0x20030a58
 8007698:	20000390 	.word	0x20000390
 800769c:	20000394 	.word	0x20000394

080076a0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80076ac:	4b09      	ldr	r3, [pc, #36]	@ (80076d4 <TL_BLE_SendCmd+0x34>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2201      	movs	r2, #1
 80076b4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80076b6:	4b07      	ldr	r3, [pc, #28]	@ (80076d4 <TL_BLE_SendCmd+0x34>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	2001      	movs	r0, #1
 80076c0:	f000 f96c 	bl	800799c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80076c4:	f001 f9a8 	bl	8008a18 <HW_IPCC_BLE_SendCmd>

  return 0;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20030000 	.word	0x20030000

080076d8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80076de:	e01c      	b.n	800771a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80076e0:	1d3b      	adds	r3, r7, #4
 80076e2:	4619      	mov	r1, r3
 80076e4:	4812      	ldr	r0, [pc, #72]	@ (8007730 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80076e6:	f000 fa76 	bl	8007bd6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7a5b      	ldrb	r3, [r3, #9]
 80076ee:	2b0f      	cmp	r3, #15
 80076f0:	d003      	beq.n	80076fa <HW_IPCC_BLE_RxEvtNot+0x22>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7a5b      	ldrb	r3, [r3, #9]
 80076f6:	2b0e      	cmp	r3, #14
 80076f8:	d105      	bne.n	8007706 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4619      	mov	r1, r3
 80076fe:	2002      	movs	r0, #2
 8007700:	f000 f94c 	bl	800799c <OutputDbgTrace>
 8007704:	e004      	b.n	8007710 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4619      	mov	r1, r3
 800770a:	2003      	movs	r0, #3
 800770c:	f000 f946 	bl	800799c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007710:	4b08      	ldr	r3, [pc, #32]	@ (8007734 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	4610      	mov	r0, r2
 8007718:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800771a:	4805      	ldr	r0, [pc, #20]	@ (8007730 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800771c:	f000 f9cc 	bl	8007ab8 <LST_is_empty>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0dc      	beq.n	80076e0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007726:	bf00      	nop
}
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200300c8 	.word	0x200300c8
 8007734:	20000390 	.word	0x20000390

08007738 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800773c:	4b02      	ldr	r3, [pc, #8]	@ (8007748 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4798      	blx	r3

  return;
 8007742:	bf00      	nop
}
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000394 	.word	0x20000394

0800774c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007758:	480d      	ldr	r0, [pc, #52]	@ (8007790 <TL_SYS_Init+0x44>)
 800775a:	f000 f99d 	bl	8007a98 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <TL_SYS_Init+0x48>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4a08      	ldr	r2, [pc, #32]	@ (8007790 <TL_SYS_Init+0x44>)
 8007770:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007772:	f001 f973 	bl	8008a5c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a07      	ldr	r2, [pc, #28]	@ (8007798 <TL_SYS_Init+0x4c>)
 800777c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	4a06      	ldr	r2, [pc, #24]	@ (800779c <TL_SYS_Init+0x50>)
 8007784:	6013      	str	r3, [r2, #0]

  return 0;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	200300d0 	.word	0x200300d0
 8007794:	20030000 	.word	0x20030000
 8007798:	20000398 	.word	0x20000398
 800779c:	2000039c 	.word	0x2000039c

080077a0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80077ac:	4b09      	ldr	r3, [pc, #36]	@ (80077d4 <TL_SYS_SendCmd+0x34>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2210      	movs	r2, #16
 80077b4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80077b6:	4b07      	ldr	r3, [pc, #28]	@ (80077d4 <TL_SYS_SendCmd+0x34>)
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4619      	mov	r1, r3
 80077be:	2004      	movs	r0, #4
 80077c0:	f000 f8ec 	bl	800799c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80077c4:	f001 f954 	bl	8008a70 <HW_IPCC_SYS_SendCmd>

  return 0;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20030000 	.word	0x20030000

080077d8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80077dc:	4b07      	ldr	r3, [pc, #28]	@ (80077fc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4619      	mov	r1, r3
 80077e4:	2005      	movs	r0, #5
 80077e6:	f000 f8d9 	bl	800799c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80077ea:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a03      	ldr	r2, [pc, #12]	@ (80077fc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80077f0:	68d2      	ldr	r2, [r2, #12]
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3

  return;
 80077f8:	bf00      	nop
}
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20030000 	.word	0x20030000
 8007800:	20000398 	.word	0x20000398

08007804 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800780a:	e00e      	b.n	800782a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800780c:	1d3b      	adds	r3, r7, #4
 800780e:	4619      	mov	r1, r3
 8007810:	480b      	ldr	r0, [pc, #44]	@ (8007840 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007812:	f000 f9e0 	bl	8007bd6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4619      	mov	r1, r3
 800781a:	2006      	movs	r0, #6
 800781c:	f000 f8be 	bl	800799c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007820:	4b08      	ldr	r3, [pc, #32]	@ (8007844 <HW_IPCC_SYS_EvtNot+0x40>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	4610      	mov	r0, r2
 8007828:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800782a:	4805      	ldr	r0, [pc, #20]	@ (8007840 <HW_IPCC_SYS_EvtNot+0x3c>)
 800782c:	f000 f944 	bl	8007ab8 <LST_is_empty>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0ea      	beq.n	800780c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007836:	bf00      	nop
}
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200300d0 	.word	0x200300d0
 8007844:	2000039c 	.word	0x2000039c

08007848 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007850:	4817      	ldr	r0, [pc, #92]	@ (80078b0 <TL_MM_Init+0x68>)
 8007852:	f000 f921 	bl	8007a98 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007856:	4817      	ldr	r0, [pc, #92]	@ (80078b4 <TL_MM_Init+0x6c>)
 8007858:	f000 f91e 	bl	8007a98 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800785c:	4b16      	ldr	r3, [pc, #88]	@ (80078b8 <TL_MM_Init+0x70>)
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	4a16      	ldr	r2, [pc, #88]	@ (80078bc <TL_MM_Init+0x74>)
 8007862:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007864:	4b15      	ldr	r3, [pc, #84]	@ (80078bc <TL_MM_Init+0x74>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6892      	ldr	r2, [r2, #8]
 800786c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800786e:	4b13      	ldr	r3, [pc, #76]	@ (80078bc <TL_MM_Init+0x74>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	68d2      	ldr	r2, [r2, #12]
 8007876:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007878:	4b10      	ldr	r3, [pc, #64]	@ (80078bc <TL_MM_Init+0x74>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a0c      	ldr	r2, [pc, #48]	@ (80078b0 <TL_MM_Init+0x68>)
 800787e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007880:	4b0e      	ldr	r3, [pc, #56]	@ (80078bc <TL_MM_Init+0x74>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800788a:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <TL_MM_Init+0x74>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6852      	ldr	r2, [r2, #4]
 8007892:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007894:	4b09      	ldr	r3, [pc, #36]	@ (80078bc <TL_MM_Init+0x74>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6912      	ldr	r2, [r2, #16]
 800789c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800789e:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <TL_MM_Init+0x74>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6952      	ldr	r2, [r2, #20]
 80078a6:	619a      	str	r2, [r3, #24]

  return;
 80078a8:	bf00      	nop
}
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200300b8 	.word	0x200300b8
 80078b4:	20000388 	.word	0x20000388
 80078b8:	20030000 	.word	0x20030000
 80078bc:	200003a0 	.word	0x200003a0

080078c0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4807      	ldr	r0, [pc, #28]	@ (80078e8 <TL_MM_EvtDone+0x28>)
 80078cc:	f000 f93c 	bl	8007b48 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80078d0:	6879      	ldr	r1, [r7, #4]
 80078d2:	2000      	movs	r0, #0
 80078d4:	f000 f862 	bl	800799c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80078d8:	4804      	ldr	r0, [pc, #16]	@ (80078ec <TL_MM_EvtDone+0x2c>)
 80078da:	f001 f8ef 	bl	8008abc <HW_IPCC_MM_SendFreeBuf>

  return;
 80078de:	bf00      	nop
}
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000388 	.word	0x20000388
 80078ec:	080078f1 	.word	0x080078f1

080078f0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80078f6:	e00c      	b.n	8007912 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80078f8:	1d3b      	adds	r3, r7, #4
 80078fa:	4619      	mov	r1, r3
 80078fc:	480a      	ldr	r0, [pc, #40]	@ (8007928 <SendFreeBuf+0x38>)
 80078fe:	f000 f96a 	bl	8007bd6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007902:	4b0a      	ldr	r3, [pc, #40]	@ (800792c <SendFreeBuf+0x3c>)
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f000 f91b 	bl	8007b48 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007912:	4805      	ldr	r0, [pc, #20]	@ (8007928 <SendFreeBuf+0x38>)
 8007914:	f000 f8d0 	bl	8007ab8 <LST_is_empty>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0ec      	beq.n	80078f8 <SendFreeBuf+0x8>
  }

  return;
 800791e:	bf00      	nop
}
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000388 	.word	0x20000388
 800792c:	20030000 	.word	0x20030000

08007930 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007934:	4805      	ldr	r0, [pc, #20]	@ (800794c <TL_TRACES_Init+0x1c>)
 8007936:	f000 f8af 	bl	8007a98 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800793a:	4b05      	ldr	r3, [pc, #20]	@ (8007950 <TL_TRACES_Init+0x20>)
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	4a03      	ldr	r2, [pc, #12]	@ (800794c <TL_TRACES_Init+0x1c>)
 8007940:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007942:	f001 f8f1 	bl	8008b28 <HW_IPCC_TRACES_Init>

  return;
 8007946:	bf00      	nop
}
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200300c0 	.word	0x200300c0
 8007950:	20030000 	.word	0x20030000

08007954 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800795a:	e008      	b.n	800796e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800795c:	1d3b      	adds	r3, r7, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4808      	ldr	r0, [pc, #32]	@ (8007984 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007962:	f000 f938 	bl	8007bd6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f80d 	bl	8007988 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800796e:	4805      	ldr	r0, [pc, #20]	@ (8007984 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007970:	f000 f8a2 	bl	8007ab8 <LST_is_empty>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f0      	beq.n	800795c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800797a:	bf00      	nop
}
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	200300c0 	.word	0x200300c0

08007988 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d845      	bhi.n	8007a3a <OutputDbgTrace+0x9e>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <OutputDbgTrace+0x18>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079d1 	.word	0x080079d1
 80079b8:	080079f5 	.word	0x080079f5
 80079bc:	080079fb 	.word	0x080079fb
 80079c0:	08007a0f 	.word	0x08007a0f
 80079c4:	08007a1b 	.word	0x08007a1b
 80079c8:	08007a21 	.word	0x08007a21
 80079cc:	08007a2f 	.word	0x08007a2f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	7a5b      	ldrb	r3, [r3, #9]
 80079d8:	2bff      	cmp	r3, #255	@ 0xff
 80079da:	d005      	beq.n	80079e8 <OutputDbgTrace+0x4c>
 80079dc:	2bff      	cmp	r3, #255	@ 0xff
 80079de:	dc05      	bgt.n	80079ec <OutputDbgTrace+0x50>
 80079e0:	2b0e      	cmp	r3, #14
 80079e2:	d005      	beq.n	80079f0 <OutputDbgTrace+0x54>
 80079e4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80079e6:	e001      	b.n	80079ec <OutputDbgTrace+0x50>
          break;
 80079e8:	bf00      	nop
 80079ea:	e027      	b.n	8007a3c <OutputDbgTrace+0xa0>
          break;
 80079ec:	bf00      	nop
 80079ee:	e025      	b.n	8007a3c <OutputDbgTrace+0xa0>
          break;
 80079f0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80079f2:	e023      	b.n	8007a3c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80079f8:	e020      	b.n	8007a3c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	7a5b      	ldrb	r3, [r3, #9]
 8007a02:	2b0e      	cmp	r3, #14
 8007a04:	d001      	beq.n	8007a0a <OutputDbgTrace+0x6e>
 8007a06:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007a08:	e000      	b.n	8007a0c <OutputDbgTrace+0x70>
          break;
 8007a0a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007a0c:	e016      	b.n	8007a3c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	7a5b      	ldrb	r3, [r3, #9]
 8007a16:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007a18:	e010      	b.n	8007a3c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007a1e:	e00d      	b.n	8007a3c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8007a2a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007a2c:	e006      	b.n	8007a3c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	7a5b      	ldrb	r3, [r3, #9]
 8007a36:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007a38:	e000      	b.n	8007a3c <OutputDbgTrace+0xa0>

    default:
      break;
 8007a3a:	bf00      	nop
  }

  return;
 8007a3c:	bf00      	nop
}
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007a52:	4b0f      	ldr	r3, [pc, #60]	@ (8007a90 <OTP_Read+0x48>)
 8007a54:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007a56:	e002      	b.n	8007a5e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3b08      	subs	r3, #8
 8007a5c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3307      	adds	r3, #7
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	79fa      	ldrb	r2, [r7, #7]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d003      	beq.n	8007a72 <OTP_Read+0x2a>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4a09      	ldr	r2, [pc, #36]	@ (8007a94 <OTP_Read+0x4c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d1f2      	bne.n	8007a58 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3307      	adds	r3, #7
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	79fa      	ldrb	r2, [r7, #7]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d001      	beq.n	8007a82 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	1fff73f8 	.word	0x1fff73f8
 8007a94:	1fff7000 	.word	0x1fff7000

08007a98 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	605a      	str	r2, [r3, #4]
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ac8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007aca:	b672      	cpsid	i
}
 8007acc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d102      	bne.n	8007ade <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
 8007adc:	e001      	b.n	8007ae2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f383 8810 	msr	PRIMASK, r3
}
 8007aec:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b06:	f3ef 8310 	mrs	r3, PRIMASK
 8007b0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b10:	b672      	cpsid	i
}
 8007b12:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	605a      	str	r2, [r3, #4]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f383 8810 	msr	PRIMASK, r3
}
 8007b3a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b52:	f3ef 8310 	mrs	r3, PRIMASK
 8007b56:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b58:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b5c:	b672      	cpsid	i
}
 8007b5e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f383 8810 	msr	PRIMASK, r3
}
 8007b86:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ba6:	b672      	cpsid	i
}
 8007ba8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6852      	ldr	r2, [r2, #4]
 8007bbc:	605a      	str	r2, [r3, #4]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f383 8810 	msr	PRIMASK, r3
}
 8007bc8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be0:	f3ef 8310 	mrs	r3, PRIMASK
 8007be4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007be6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007be8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bea:	b672      	cpsid	i
}
 8007bec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff ffca 	bl	8007b94 <LST_remove_node>
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f383 8810 	msr	PRIMASK, r3
}
 8007c0a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007c0c:	bf00      	nop
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007c18:	4b03      	ldr	r3, [pc, #12]	@ (8007c28 <LL_FLASH_GetUDN+0x14>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	1fff7580 	.word	0x1fff7580

08007c2c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007c30:	4b03      	ldr	r3, [pc, #12]	@ (8007c40 <LL_FLASH_GetDeviceID+0x14>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	b2db      	uxtb	r3, r3
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	1fff7584 	.word	0x1fff7584

08007c44 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007c48:	4b03      	ldr	r3, [pc, #12]	@ (8007c58 <LL_FLASH_GetSTCompanyID+0x14>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	0a1b      	lsrs	r3, r3, #8
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	1fff7584 	.word	0x1fff7584

08007c5c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007c5c:	b5b0      	push	{r4, r5, r7, lr}
 8007c5e:	b090      	sub	sp, #64	@ 0x40
 8007c60:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007c62:	2392      	movs	r3, #146	@ 0x92
 8007c64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
UTIL_SEQ_RegTask(1<<CFG_TASK, UTIL_SEQ_RFU, Task);
 8007c68:	4a2e      	ldr	r2, [pc, #184]	@ (8007d24 <APP_BLE_Init+0xc8>)
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	2004      	movs	r0, #4
 8007c6e:	f001 f8af 	bl	8008dd0 <UTIL_SEQ_RegTask>
UTIL_SEQ_SetTask(1<<CFG_TASK, CFG_SCH_PRIO_0);
 8007c72:	2100      	movs	r1, #0
 8007c74:	2004      	movs	r0, #4
 8007c76:	f001 f8cd 	bl	8008e14 <UTIL_SEQ_SetTask>

UTIL_SEQ_RegTask(1 << CFG_TASK_TIMER_SECOND_ID, UTIL_SEQ_RFU, Task_Timer_Second);
 8007c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8007d28 <APP_BLE_Init+0xcc>)
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	2008      	movs	r0, #8
 8007c80:	f001 f8a6 	bl	8008dd0 <UTIL_SEQ_RegTask>
UTIL_SEQ_SetTask(1 << CFG_TASK_TIMER_SECOND_ID, CFG_SCH_PRIO_0);
 8007c84:	2100      	movs	r1, #0
 8007c86:	2008      	movs	r0, #8
 8007c88:	f001 f8c4 	bl	8008e14 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007c8c:	4b27      	ldr	r3, [pc, #156]	@ (8007d2c <APP_BLE_Init+0xd0>)
 8007c8e:	1d3c      	adds	r4, r7, #4
 8007c90:	461d      	mov	r5, r3
 8007c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007ca2:	c403      	stmia	r4!, {r0, r1}
 8007ca4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007ca6:	f000 f925 	bl	8007ef4 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007caa:	2101      	movs	r1, #1
 8007cac:	2002      	movs	r0, #2
 8007cae:	f000 ff63 	bl	8008b78 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d30 <APP_BLE_Init+0xd4>)
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	2002      	movs	r0, #2
 8007cb8:	f001 f88a 	bl	8008dd0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007cbc:	1d3b      	adds	r3, r7, #4
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff f8b4 	bl	8006e2c <SHCI_C2_BLE_Init>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007cca:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <APP_BLE_Init+0x7a>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007cd2:	f7f9 fe8b 	bl	80019ec <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007cd6:	f000 f923 	bl	8007f20 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007cda:	f7ff f801 	bl	8006ce0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007cde:	4b15      	ldr	r3, [pc, #84]	@ (8007d34 <APP_BLE_Init+0xd8>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007ce6:	4b13      	ldr	r3, [pc, #76]	@ (8007d34 <APP_BLE_Init+0xd8>)
 8007ce8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cec:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007cee:	4a12      	ldr	r2, [pc, #72]	@ (8007d38 <APP_BLE_Init+0xdc>)
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f001 f86c 	bl	8008dd0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007cf8:	2006      	movs	r0, #6
 8007cfa:	f7fe fe65 	bl	80069c8 <aci_hal_set_radio_activity_mask>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007d04:	f000 fae8 	bl	80082d8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007d08:	4b0a      	ldr	r3, [pc, #40]	@ (8007d34 <APP_BLE_Init+0xd8>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007d0e:	4b09      	ldr	r3, [pc, #36]	@ (8007d34 <APP_BLE_Init+0xd8>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007d14:	2001      	movs	r0, #1
 8007d16:	f000 f9b7 	bl	8008088 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007d1a:	bf00      	nop
}
 8007d1c:	3740      	adds	r7, #64	@ 0x40
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bdb0      	pop	{r4, r5, r7, pc}
 8007d22:	bf00      	nop
 8007d24:	08008257 	.word	0x08008257
 8007d28:	08008265 	.word	0x08008265
 8007d2c:	08009f60 	.word	0x08009f60
 8007d30:	08007049 	.word	0x08007049
 8007d34:	200003ac 	.word	0x200003ac
 8007d38:	08008171 	.word	0x08008171

08007d3c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08c      	sub	sp, #48	@ 0x30
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007d44:	2392      	movs	r3, #146	@ 0x92
 8007d46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8007d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2bff      	cmp	r3, #255	@ 0xff
 8007d56:	d05c      	beq.n	8007e12 <SVCCTL_App_Notification+0xd6>
 8007d58:	2bff      	cmp	r3, #255	@ 0xff
 8007d5a:	f300 80bd 	bgt.w	8007ed8 <SVCCTL_App_Notification+0x19c>
 8007d5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d60:	d02b      	beq.n	8007dba <SVCCTL_App_Notification+0x7e>
 8007d62:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d64:	f300 80b8 	bgt.w	8007ed8 <SVCCTL_App_Notification+0x19c>
 8007d68:	2b05      	cmp	r3, #5
 8007d6a:	d002      	beq.n	8007d72 <SVCCTL_App_Notification+0x36>
 8007d6c:	2b10      	cmp	r3, #16
 8007d6e:	d020      	beq.n	8007db2 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007d70:	e0b2      	b.n	8007ed8 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	3302      	adds	r3, #2
 8007d76:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	4b59      	ldr	r3, [pc, #356]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007d82:	8adb      	ldrh	r3, [r3, #22]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d106      	bne.n	8007d96 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007d88:	4b57      	ldr	r3, [pc, #348]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007d8e:	4b56      	ldr	r3, [pc, #344]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007d96:	2001      	movs	r0, #1
 8007d98:	f000 f976 	bl	8008088 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007d9c:	4b53      	ldr	r3, [pc, #332]	@ (8007eec <SVCCTL_App_Notification+0x1b0>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007da2:	4b51      	ldr	r3, [pc, #324]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007da4:	8ada      	ldrh	r2, [r3, #22]
 8007da6:	4b51      	ldr	r3, [pc, #324]	@ (8007eec <SVCCTL_App_Notification+0x1b0>)
 8007da8:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007daa:	4850      	ldr	r0, [pc, #320]	@ (8007eec <SVCCTL_App_Notification+0x1b0>)
 8007dac:	f000 fa80 	bl	80082b0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007db0:	e095      	b.n	8007ede <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8007db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db4:	3302      	adds	r3, #2
 8007db6:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8007db8:	e091      	b.n	8007ede <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d001      	beq.n	8007dcc <SVCCTL_App_Notification+0x90>
 8007dc8:	2b03      	cmp	r3, #3
          break;
 8007dca:	e021      	b.n	8007e10 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007dd2:	4b45      	ldr	r3, [pc, #276]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d104      	bne.n	8007de6 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007ddc:	4b42      	ldr	r3, [pc, #264]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007dde:	2206      	movs	r2, #6
 8007de0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007de4:	e003      	b.n	8007dee <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007de6:	4b40      	ldr	r3, [pc, #256]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007de8:	2205      	movs	r2, #5
 8007dea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	4b3c      	ldr	r3, [pc, #240]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007df8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8007eec <SVCCTL_App_Notification+0x1b0>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007e00:	4b39      	ldr	r3, [pc, #228]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007e02:	8ada      	ldrh	r2, [r3, #22]
 8007e04:	4b39      	ldr	r3, [pc, #228]	@ (8007eec <SVCCTL_App_Notification+0x1b0>)
 8007e06:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007e08:	4838      	ldr	r0, [pc, #224]	@ (8007eec <SVCCTL_App_Notification+0x1b0>)
 8007e0a:	f000 fa51 	bl	80082b0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007e0e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007e10:	e065      	b.n	8007ede <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e14:	3302      	adds	r3, #2
 8007e16:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8007e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d048      	beq.n	8007eb8 <SVCCTL_App_Notification+0x17c>
 8007e26:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	dc56      	bgt.n	8007edc <SVCCTL_App_Notification+0x1a0>
 8007e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e32:	d04b      	beq.n	8007ecc <SVCCTL_App_Notification+0x190>
 8007e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e38:	dc50      	bgt.n	8007edc <SVCCTL_App_Notification+0x1a0>
 8007e3a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	dc4c      	bgt.n	8007edc <SVCCTL_App_Notification+0x1a0>
 8007e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e46:	dc04      	bgt.n	8007e52 <SVCCTL_App_Notification+0x116>
 8007e48:	2b04      	cmp	r3, #4
 8007e4a:	d041      	beq.n	8007ed0 <SVCCTL_App_Notification+0x194>
 8007e4c:	2b06      	cmp	r3, #6
 8007e4e:	d039      	beq.n	8007ec4 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007e50:	e044      	b.n	8007edc <SVCCTL_App_Notification+0x1a0>
 8007e52:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007e56:	2b09      	cmp	r3, #9
 8007e58:	d840      	bhi.n	8007edc <SVCCTL_App_Notification+0x1a0>
 8007e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <SVCCTL_App_Notification+0x124>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007eb1 	.word	0x08007eb1
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007edd 	.word	0x08007edd
 8007e6c:	08007edd 	.word	0x08007edd
 8007e70:	08007edd 	.word	0x08007edd
 8007e74:	08007edd 	.word	0x08007edd
 8007e78:	08007ed5 	.word	0x08007ed5
 8007e7c:	08007edd 	.word	0x08007edd
 8007e80:	08007e9d 	.word	0x08007e9d
 8007e84:	08007ed5 	.word	0x08007ed5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007e88:	4b17      	ldr	r3, [pc, #92]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007e8a:	8adb      	ldrh	r3, [r3, #22]
 8007e8c:	4918      	ldr	r1, [pc, #96]	@ (8007ef0 <SVCCTL_App_Notification+0x1b4>)
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fd ff9c 	bl	8005dcc <aci_gap_pass_key_resp>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007e9a:	e01c      	b.n	8007ed6 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007e9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007e9e:	8adb      	ldrh	r3, [r3, #22]
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe f93c 	bl	8006120 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007eae:	e012      	b.n	8007ed6 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	623b      	str	r3, [r7, #32]
          break;
 8007eb6:	e00e      	b.n	8007ed6 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <SVCCTL_App_Notification+0x1ac>)
 8007eba:	8adb      	ldrh	r3, [r3, #22]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe fc42 	bl	8006746 <aci_gatt_confirm_indication>
        break;
 8007ec2:	e008      	b.n	8007ed6 <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	61fb      	str	r3, [r7, #28]
          break;
 8007eca:	e004      	b.n	8007ed6 <SVCCTL_App_Notification+0x19a>
          break;
 8007ecc:	bf00      	nop
 8007ece:	e005      	b.n	8007edc <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007ed0:	bf00      	nop
 8007ed2:	e003      	b.n	8007edc <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007ed4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007ed6:	e001      	b.n	8007edc <SVCCTL_App_Notification+0x1a0>
      break;
 8007ed8:	bf00      	nop
 8007eda:	e000      	b.n	8007ede <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007edc:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007ede:	2301      	movs	r3, #1
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3730      	adds	r7, #48	@ 0x30
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	200003ac 	.word	0x200003ac
 8007eec:	20000430 	.word	0x20000430
 8007ef0:	0001b207 	.word	0x0001b207

08007ef4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007efa:	4b06      	ldr	r3, [pc, #24]	@ (8007f14 <Ble_Tl_Init+0x20>)
 8007efc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007efe:	4b06      	ldr	r3, [pc, #24]	@ (8007f18 <Ble_Tl_Init+0x24>)
 8007f00:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007f02:	463b      	mov	r3, r7
 8007f04:	4619      	mov	r1, r3
 8007f06:	4805      	ldr	r0, [pc, #20]	@ (8007f1c <Ble_Tl_Init+0x28>)
 8007f08:	f7ff f882 	bl	8007010 <hci_init>

  return;
 8007f0c:	bf00      	nop
}
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	200300d8 	.word	0x200300d8
 8007f18:	08008221 	.word	0x08008221
 8007f1c:	080081e9 	.word	0x080081e9

08007f20 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f22:	b08d      	sub	sp, #52	@ 0x34
 8007f24:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007f26:	2300      	movs	r3, #0
 8007f28:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007f2a:	2392      	movs	r3, #146	@ 0x92
 8007f2c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007f2e:	f7fe fd9f 	bl	8006a70 <hci_reset>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007f36:	f000 f8d7 	bl	80080e8 <BleGetBdAddress>
 8007f3a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	2106      	movs	r1, #6
 8007f40:	2000      	movs	r0, #0
 8007f42:	f7fe fc55 	bl	80067f0 <aci_hal_write_config_data>
 8007f46:	4603      	mov	r3, r0
 8007f48:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8008074 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007f4c:	2110      	movs	r1, #16
 8007f4e:	2018      	movs	r0, #24
 8007f50:	f7fe fc4e 	bl	80067f0 <aci_hal_write_config_data>
 8007f54:	4603      	mov	r3, r0
 8007f56:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007f58:	4a47      	ldr	r2, [pc, #284]	@ (8008078 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007f5a:	2110      	movs	r1, #16
 8007f5c:	2008      	movs	r0, #8
 8007f5e:	f7fe fc47 	bl	80067f0 <aci_hal_write_config_data>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007f66:	2118      	movs	r1, #24
 8007f68:	2001      	movs	r0, #1
 8007f6a:	f7fe fcc6 	bl	80068fa <aci_hal_set_tx_power_level>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007f72:	f7fe f93c 	bl	80061ee <aci_gatt_init>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	f043 0301 	orr.w	r3, r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01f      	beq.n	8007fcc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800807c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007f8e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007f90:	1dba      	adds	r2, r7, #6
 8007f92:	7bf8      	ldrb	r0, [r7, #15]
 8007f94:	1cbb      	adds	r3, r7, #2
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	1d3b      	adds	r3, r7, #4
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	f7fd ff7a 	bl	8005e9a <aci_gap_init>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007faa:	88fc      	ldrh	r4, [r7, #6]
 8007fac:	88bd      	ldrh	r5, [r7, #4]
 8007fae:	68b8      	ldr	r0, [r7, #8]
 8007fb0:	f7f8 f8e6 	bl	8000180 <strlen>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f7fe fb16 	bl	80065f4 <aci_gatt_update_char_value>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007fcc:	88f8      	ldrh	r0, [r7, #6]
 8007fce:	8879      	ldrh	r1, [r7, #2]
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f7fe fb0c 	bl	80065f4 <aci_gatt_update_char_value>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	2102      	movs	r1, #2
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	f7fe fd67 	bl	8006ab8 <hci_le_set_default_phy>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007fee:	4b24      	ldr	r3, [pc, #144]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007ff4:	4b22      	ldr	r3, [pc, #136]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fd fdcf 	bl	8005b9c <aci_gap_set_io_capability>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008002:	4b1f      	ldr	r3, [pc, #124]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008004:	2201      	movs	r2, #1
 8008006:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008008:	4b1d      	ldr	r3, [pc, #116]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800800a:	2208      	movs	r2, #8
 800800c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800800e:	4b1c      	ldr	r3, [pc, #112]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008010:	2210      	movs	r2, #16
 8008012:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008014:	4b1a      	ldr	r3, [pc, #104]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008016:	2200      	movs	r2, #0
 8008018:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800801a:	4b19      	ldr	r3, [pc, #100]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800801c:	4a19      	ldr	r2, [pc, #100]	@ (8008084 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800801e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008020:	4b17      	ldr	r3, [pc, #92]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008022:	2200      	movs	r2, #0
 8008024:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008026:	4b16      	ldr	r3, [pc, #88]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008028:	789c      	ldrb	r4, [r3, #2]
 800802a:	4b15      	ldr	r3, [pc, #84]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800802c:	785d      	ldrb	r5, [r3, #1]
 800802e:	4b14      	ldr	r3, [pc, #80]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	4a13      	ldr	r2, [pc, #76]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008034:	7952      	ldrb	r2, [r2, #5]
 8008036:	4912      	ldr	r1, [pc, #72]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008038:	78c9      	ldrb	r1, [r1, #3]
 800803a:	4811      	ldr	r0, [pc, #68]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800803c:	6880      	ldr	r0, [r0, #8]
 800803e:	2600      	movs	r6, #0
 8008040:	9604      	str	r6, [sp, #16]
 8008042:	9003      	str	r0, [sp, #12]
 8008044:	9102      	str	r1, [sp, #8]
 8008046:	9201      	str	r2, [sp, #4]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	2300      	movs	r3, #0
 800804c:	2201      	movs	r2, #1
 800804e:	4629      	mov	r1, r5
 8008050:	4620      	mov	r0, r4
 8008052:	f7fd fdf7 	bl	8005c44 <aci_gap_set_authentication_requirement>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800805a:	4b09      	ldr	r3, [pc, #36]	@ (8008080 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800805c:	789b      	ldrb	r3, [r3, #2]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008062:	f7fe f839 	bl	80060d8 <aci_gap_configure_filter_accept_list>
 8008066:	4603      	mov	r3, r0
 8008068:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008072:	bf00      	nop
 8008074:	0800a1f4 	.word	0x0800a1f4
 8008078:	0800a204 	.word	0x0800a204
 800807c:	08009f9c 	.word	0x08009f9c
 8008080:	200003ac 	.word	0x200003ac
 8008084:	0001b207 	.word	0x0001b207

08008088 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08c      	sub	sp, #48	@ 0x30
 800808c:	af08      	add	r7, sp, #32
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008092:	2392      	movs	r3, #146	@ 0x92
 8008094:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008096:	4a12      	ldr	r2, [pc, #72]	@ (80080e0 <Adv_Request+0x58>)
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800809e:	2300      	movs	r3, #0
 80080a0:	9306      	str	r3, [sp, #24]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9305      	str	r3, [sp, #20]
 80080a6:	2300      	movs	r3, #0
 80080a8:	9304      	str	r3, [sp, #16]
 80080aa:	2300      	movs	r3, #0
 80080ac:	9303      	str	r3, [sp, #12]
 80080ae:	2300      	movs	r3, #0
 80080b0:	9302      	str	r3, [sp, #8]
 80080b2:	2300      	movs	r3, #0
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	2300      	movs	r3, #0
 80080bc:	22a0      	movs	r2, #160	@ 0xa0
 80080be:	2180      	movs	r1, #128	@ 0x80
 80080c0:	2000      	movs	r0, #0
 80080c2:	f7fd fc71 	bl	80059a8 <aci_gap_set_discoverable>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80080ca:	4906      	ldr	r1, [pc, #24]	@ (80080e4 <Adv_Request+0x5c>)
 80080cc:	200e      	movs	r0, #14
 80080ce:	f7fd ff91 	bl	8005ff4 <aci_gap_update_adv_data>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80080d6:	bf00      	nop
}
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200003ac 	.word	0x200003ac
 80080e4:	20000050 	.word	0x20000050

080080e8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80080ee:	f7ff fd91 	bl	8007c14 <LL_FLASH_GetUDN>
 80080f2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fa:	d023      	beq.n	8008144 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80080fc:	f7ff fda2 	bl	8007c44 <LL_FLASH_GetSTCompanyID>
 8008100:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008102:	f7ff fd93 	bl	8007c2c <LL_FLASH_GetDeviceID>
 8008106:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	b2da      	uxtb	r2, r3
 800810c:	4b16      	ldr	r3, [pc, #88]	@ (8008168 <BleGetBdAddress+0x80>)
 800810e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	b2da      	uxtb	r2, r3
 8008116:	4b14      	ldr	r3, [pc, #80]	@ (8008168 <BleGetBdAddress+0x80>)
 8008118:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	b2da      	uxtb	r2, r3
 800811e:	4b12      	ldr	r3, [pc, #72]	@ (8008168 <BleGetBdAddress+0x80>)
 8008120:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	b2da      	uxtb	r2, r3
 8008126:	4b10      	ldr	r3, [pc, #64]	@ (8008168 <BleGetBdAddress+0x80>)
 8008128:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	b2da      	uxtb	r2, r3
 8008130:	4b0d      	ldr	r3, [pc, #52]	@ (8008168 <BleGetBdAddress+0x80>)
 8008132:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	0c1b      	lsrs	r3, r3, #16
 8008138:	b2da      	uxtb	r2, r3
 800813a:	4b0b      	ldr	r3, [pc, #44]	@ (8008168 <BleGetBdAddress+0x80>)
 800813c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800813e:	4b0a      	ldr	r3, [pc, #40]	@ (8008168 <BleGetBdAddress+0x80>)
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e00b      	b.n	800815c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008144:	2000      	movs	r0, #0
 8008146:	f7ff fc7f 	bl	8007a48 <OTP_Read>
 800814a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	e001      	b.n	800815c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008158:	4b04      	ldr	r3, [pc, #16]	@ (800816c <BleGetBdAddress+0x84>)
 800815a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800815c:	697b      	ldr	r3, [r7, #20]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	200003a4 	.word	0x200003a4
 800816c:	0800a1ec 	.word	0x0800a1ec

08008170 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008176:	4b0a      	ldr	r3, [pc, #40]	@ (80081a0 <Adv_Cancel+0x30>)
 8008178:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800817c:	2b05      	cmp	r3, #5
 800817e:	d00a      	beq.n	8008196 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008180:	2392      	movs	r3, #146	@ 0x92
 8008182:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008184:	f7fd fbec 	bl	8005960 <aci_gap_set_non_discoverable>
 8008188:	4603      	mov	r3, r0
 800818a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800818c:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <Adv_Cancel+0x30>)
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008194:	bf00      	nop
 8008196:	bf00      	nop
}
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	200003ac 	.word	0x200003ac

080081a4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80081ac:	2100      	movs	r1, #0
 80081ae:	2002      	movs	r0, #2
 80081b0:	f000 fe30 	bl	8008e14 <UTIL_SEQ_SetTask>

  return;
 80081b4:	bf00      	nop
}
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80081c4:	2001      	movs	r0, #1
 80081c6:	f000 fe91 	bl	8008eec <UTIL_SEQ_SetEvt>

  return;
 80081ca:	bf00      	nop
}
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80081da:	2001      	movs	r0, #1
 80081dc:	f000 fea6 	bl	8008f2c <UTIL_SEQ_WaitEvt>

  return;
 80081e0:	bf00      	nop
}
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	3308      	adds	r3, #8
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fdc2 	bl	8006d84 <SVCCTL_UserEvtRx>
 8008200:	4603      	mov	r3, r0
 8008202:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008210:	e003      	b.n	800821a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	701a      	strb	r2, [r3, #0]
  return;
 8008218:	bf00      	nop
}
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <BLE_StatusNot+0x16>
 8008230:	2b01      	cmp	r3, #1
 8008232:	d006      	beq.n	8008242 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008234:	e00b      	b.n	800824e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008236:	230f      	movs	r3, #15
 8008238:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 fe16 	bl	8008e6c <UTIL_SEQ_PauseTask>
      break;
 8008240:	e005      	b.n	800824e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008242:	230f      	movs	r3, #15
 8008244:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fe30 	bl	8008eac <UTIL_SEQ_ResumeTask>
      break;
 800824c:	bf00      	nop
  }

  return;
 800824e:	bf00      	nop
}
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <Task>:
void Custom_Mycharnotify_Update_Char(void);
void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void Task(void)
{
 8008256:	b480      	push	{r7}
 8008258:	af00      	add	r7, sp, #0
//	{
//		UpdateCharData[0] ^= 0x1;
//		Custom_Mycharnotify_Update_Char();
//	}
//	UTIL_SEQ_SetTask(1 << CFG_TASK, CFG_SCH_PRIO_0);
}
 800825a:	bf00      	nop
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <Task_Timer_Second>:


void Task_Timer_Second(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
	//Custom_Mycharnotify_Send_Notification();
	Custom_Mycharnotify_Update_Char();
 8008268:	f000 f83e 	bl	80082e8 <Custom_Mycharnotify_Update_Char>
	UTIL_SEQ_SetTask(1 << CFG_TASK_TIMER_SECOND_ID, CFG_SCH_PRIO_0);
 800826c:	2100      	movs	r1, #0
 800826e:	2008      	movs	r0, #8
 8008270:	f000 fdd0 	bl	8008e14 <UTIL_SEQ_SetTask>
}
 8008274:	bf00      	nop
 8008276:	bd80      	pop	{r7, pc}

08008278 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d80b      	bhi.n	80082a0 <Custom_STM_App_Notification+0x28>
 8008288:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <Custom_STM_App_Notification+0x18>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082a1 	.word	0x080082a1
 8008298:	080082a1 	.word	0x080082a1
 800829c:	080082a1 	.word	0x080082a1

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80082a0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80082a2:	bf00      	nop
}
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop

080082b0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <Custom_APP_Notification+0x16>
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d002      	beq.n	80082ca <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80082c4:	e002      	b.n	80082cc <Custom_APP_Notification+0x1c>
      break;
 80082c6:	bf00      	nop
 80082c8:	e000      	b.n	80082cc <Custom_APP_Notification+0x1c>
      break;
 80082ca:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80082cc:	bf00      	nop
}
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80082dc:	bf00      	nop
}
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySvc */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	71fb      	strb	r3, [r7, #7]
  uint32_t current_time_seconds = HAL_GetTick() / 1000;
 80082f6:	f7f9 ffd9 	bl	80022ac <HAL_GetTick>
 80082fa:	4603      	mov	r3, r0
 80082fc:	4a11      	ldr	r2, [pc, #68]	@ (8008344 <Custom_Mycharnotify_Update_Char+0x5c>)
 80082fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008302:	099b      	lsrs	r3, r3, #6
 8008304:	603b      	str	r3, [r7, #0]

  // Przekształć czas na bajty i zapisz w UpdateCharData
  UpdateCharData[0] = (uint8_t)(current_time_seconds & 0xFF);        // Bajt młodszy
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	b2da      	uxtb	r2, r3
 800830a:	4b0f      	ldr	r3, [pc, #60]	@ (8008348 <Custom_Mycharnotify_Update_Char+0x60>)
 800830c:	701a      	strb	r2, [r3, #0]
  UpdateCharData[1] = (uint8_t)((current_time_seconds >> 8) & 0xFF); // Bajt starszy
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	0a1b      	lsrs	r3, r3, #8
 8008312:	b2da      	uxtb	r2, r3
 8008314:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <Custom_Mycharnotify_Update_Char+0x60>)
 8008316:	705a      	strb	r2, [r3, #1]
  UpdateCharData[2] = (uint8_t)((current_time_seconds >> 16) & 0xFF);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	0c1b      	lsrs	r3, r3, #16
 800831c:	b2da      	uxtb	r2, r3
 800831e:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <Custom_Mycharnotify_Update_Char+0x60>)
 8008320:	709a      	strb	r2, [r3, #2]
  UpdateCharData[3] = (uint8_t)((current_time_seconds >> 24) & 0xFF);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	0e1b      	lsrs	r3, r3, #24
 8008326:	b2da      	uxtb	r2, r3
 8008328:	4b07      	ldr	r3, [pc, #28]	@ (8008348 <Custom_Mycharnotify_Update_Char+0x60>)
 800832a:	70da      	strb	r2, [r3, #3]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <Custom_Mycharnotify_Update_Char+0x54>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8008332:	4905      	ldr	r1, [pc, #20]	@ (8008348 <Custom_Mycharnotify_Update_Char+0x60>)
 8008334:	2001      	movs	r0, #1
 8008336:	f000 f98b 	bl	8008650 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 800833a:	bf00      	nop
 800833c:	bf00      	nop
}
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	10624dd3 	.word	0x10624dd3
 8008348:	20000434 	.word	0x20000434

0800834c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08e      	sub	sp, #56	@ 0x38
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008354:	2300      	movs	r3, #0
 8008356:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3301      	adds	r3, #1
 800835e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8008360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2bff      	cmp	r3, #255	@ 0xff
 8008366:	f040 80b3 	bne.w	80084d0 <Custom_STM_Event_Handler+0x184>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800836a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836c:	3302      	adds	r3, #2
 800836e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8008370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800837a:	2b1a      	cmp	r3, #26
 800837c:	f200 80a4 	bhi.w	80084c8 <Custom_STM_Event_Handler+0x17c>
 8008380:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <Custom_STM_Event_Handler+0x3c>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	080083f5 	.word	0x080083f5
 800838c:	080084c9 	.word	0x080084c9
 8008390:	080084c9 	.word	0x080084c9
 8008394:	080084c9 	.word	0x080084c9
 8008398:	080084c9 	.word	0x080084c9
 800839c:	080084c9 	.word	0x080084c9
 80083a0:	080084c9 	.word	0x080084c9
 80083a4:	080084c9 	.word	0x080084c9
 80083a8:	080084c9 	.word	0x080084c9
 80083ac:	080084c9 	.word	0x080084c9
 80083b0:	080084c9 	.word	0x080084c9
 80083b4:	080084c9 	.word	0x080084c9
 80083b8:	080084c9 	.word	0x080084c9
 80083bc:	080084c9 	.word	0x080084c9
 80083c0:	080084c9 	.word	0x080084c9
 80083c4:	080084c9 	.word	0x080084c9
 80083c8:	080084c9 	.word	0x080084c9
 80083cc:	080084c9 	.word	0x080084c9
 80083d0:	080084c9 	.word	0x080084c9
 80083d4:	080084c9 	.word	0x080084c9
 80083d8:	080084c9 	.word	0x080084c9
 80083dc:	080084c9 	.word	0x080084c9
 80083e0:	080084c9 	.word	0x080084c9
 80083e4:	080084c9 	.word	0x080084c9
 80083e8:	080084c9 	.word	0x080084c9
 80083ec:	080084c9 	.word	0x080084c9
 80083f0:	080084ab 	.word	0x080084ab
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80083f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f6:	3302      	adds	r3, #2
 80083f8:	627b      	str	r3, [r7, #36]	@ 0x24
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	885b      	ldrh	r3, [r3, #2]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	461a      	mov	r2, r3
 8008402:	4b37      	ldr	r3, [pc, #220]	@ (80084e0 <Custom_STM_Event_Handler+0x194>)
 8008404:	889b      	ldrh	r3, [r3, #4]
 8008406:	3302      	adds	r3, #2
 8008408:	429a      	cmp	r2, r3
 800840a:	d119      	bne.n	8008440 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008414:	7a1b      	ldrb	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <Custom_STM_Event_Handler+0xd4>
 800841a:	2b01      	cmp	r3, #1
 800841c:	d008      	beq.n	8008430 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800841e:	e043      	b.n	80084a8 <Custom_STM_Event_Handler+0x15c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8008420:	2302      	movs	r3, #2
 8008422:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff ff25 	bl	8008278 <Custom_STM_App_Notification>
                break;
 800842e:	e03b      	b.n	80084a8 <Custom_STM_Event_Handler+0x15c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8008430:	2301      	movs	r3, #1
 8008432:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008434:	f107 0308 	add.w	r3, r7, #8
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff ff1d 	bl	8008278 <Custom_STM_App_Notification>
                break;
 800843e:	e033      	b.n	80084a8 <Custom_STM_Event_Handler+0x15c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	885b      	ldrh	r3, [r3, #2]
 8008444:	b29b      	uxth	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	4b25      	ldr	r3, [pc, #148]	@ (80084e0 <Custom_STM_Event_Handler+0x194>)
 800844a:	885b      	ldrh	r3, [r3, #2]
 800844c:	3301      	adds	r3, #1
 800844e:	429a      	cmp	r2, r3
 8008450:	d13c      	bne.n	80084cc <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008452:	2301      	movs	r3, #1
 8008454:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            uint8_t *bluetooth_data = attribute_modified->Attr_Data;
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	3308      	adds	r3, #8
 800845c:	623b      	str	r3, [r7, #32]
            uint16_t data_length = attribute_modified->Attr_Data_Length;
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	799a      	ldrb	r2, [r3, #6]
 8008462:	79db      	ldrb	r3, [r3, #7]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	4313      	orrs	r3, r2
 8008468:	83fb      	strh	r3, [r7, #30]
            printf("Received BLE Data (Length: %d): ", data_length);
 800846a:	8bfb      	ldrh	r3, [r7, #30]
 800846c:	4619      	mov	r1, r3
 800846e:	481d      	ldr	r0, [pc, #116]	@ (80084e4 <Custom_STM_Event_Handler+0x198>)
 8008470:	f000 fe8e 	bl	8009190 <iprintf>
            for (uint16_t i = 0; i < data_length; i++) {
 8008474:	2300      	movs	r3, #0
 8008476:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008478:	e00a      	b.n	8008490 <Custom_STM_Event_Handler+0x144>
              printf("%02X ", bluetooth_data[i]); // Heksadecymalny format
 800847a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800847c:	6a3a      	ldr	r2, [r7, #32]
 800847e:	4413      	add	r3, r2
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	4818      	ldr	r0, [pc, #96]	@ (80084e8 <Custom_STM_Event_Handler+0x19c>)
 8008486:	f000 fe83 	bl	8009190 <iprintf>
            for (uint16_t i = 0; i < data_length; i++) {
 800848a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800848c:	3301      	adds	r3, #1
 800848e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008490:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008492:	8bfb      	ldrh	r3, [r7, #30]
 8008494:	429a      	cmp	r2, r3
 8008496:	d3f0      	bcc.n	800847a <Custom_STM_Event_Handler+0x12e>
            }
            printf("\n");
 8008498:	200a      	movs	r0, #10
 800849a:	f000 fe8b 	bl	80091b4 <putchar>

            HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 800849e:	2101      	movs	r1, #1
 80084a0:	4812      	ldr	r0, [pc, #72]	@ (80084ec <Custom_STM_Event_Handler+0x1a0>)
 80084a2:	f7fa fa63 	bl	800296c <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80084a6:	e011      	b.n	80084cc <Custom_STM_Event_Handler+0x180>
 80084a8:	e010      	b.n	80084cc <Custom_STM_Event_Handler+0x180>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80084aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ac:	3302      	adds	r3, #2
 80084ae:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80084b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff fed9 	bl	8008278 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 80084c6:	e002      	b.n	80084ce <Custom_STM_Event_Handler+0x182>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80084c8:	bf00      	nop
 80084ca:	e002      	b.n	80084d2 <Custom_STM_Event_Handler+0x186>
          break;
 80084cc:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80084ce:	e000      	b.n	80084d2 <Custom_STM_Event_Handler+0x186>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80084d0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80084d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 80084d6:	4618      	mov	r0, r3
 80084d8:	3738      	adds	r7, #56	@ 0x38
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20000634 	.word	0x20000634
 80084e4:	08009fa8 	.word	0x08009fa8
 80084e8:	08009fcc 	.word	0x08009fcc
 80084ec:	48000400 	.word	0x48000400

080084f0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08c      	sub	sp, #48	@ 0x30
 80084f4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80084f6:	2392      	movs	r3, #146	@ 0x92
 80084f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80084fa:	484f      	ldr	r0, [pc, #316]	@ (8008638 <SVCCTL_InitCustomSvc+0x148>)
 80084fc:	f7fe fc28 	bl	8006d50 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8008500:	2306      	movs	r3, #6
 8008502:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8008504:	238f      	movs	r3, #143	@ 0x8f
 8008506:	713b      	strb	r3, [r7, #4]
 8008508:	23e5      	movs	r3, #229	@ 0xe5
 800850a:	717b      	strb	r3, [r7, #5]
 800850c:	23b3      	movs	r3, #179	@ 0xb3
 800850e:	71bb      	strb	r3, [r7, #6]
 8008510:	23d5      	movs	r3, #213	@ 0xd5
 8008512:	71fb      	strb	r3, [r7, #7]
 8008514:	232e      	movs	r3, #46	@ 0x2e
 8008516:	723b      	strb	r3, [r7, #8]
 8008518:	237f      	movs	r3, #127	@ 0x7f
 800851a:	727b      	strb	r3, [r7, #9]
 800851c:	234a      	movs	r3, #74	@ 0x4a
 800851e:	72bb      	strb	r3, [r7, #10]
 8008520:	2398      	movs	r3, #152	@ 0x98
 8008522:	72fb      	strb	r3, [r7, #11]
 8008524:	232a      	movs	r3, #42	@ 0x2a
 8008526:	733b      	strb	r3, [r7, #12]
 8008528:	2348      	movs	r3, #72	@ 0x48
 800852a:	737b      	strb	r3, [r7, #13]
 800852c:	237a      	movs	r3, #122	@ 0x7a
 800852e:	73bb      	strb	r3, [r7, #14]
 8008530:	23cc      	movs	r3, #204	@ 0xcc
 8008532:	73fb      	strb	r3, [r7, #15]
 8008534:	2300      	movs	r3, #0
 8008536:	743b      	strb	r3, [r7, #16]
 8008538:	2300      	movs	r3, #0
 800853a:	747b      	strb	r3, [r7, #17]
 800853c:	2300      	movs	r3, #0
 800853e:	74bb      	strb	r3, [r7, #18]
 8008540:	2300      	movs	r3, #0
 8008542:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008544:	7dbb      	ldrb	r3, [r7, #22]
 8008546:	1d39      	adds	r1, r7, #4
 8008548:	4a3c      	ldr	r2, [pc, #240]	@ (800863c <SVCCTL_InitCustomSvc+0x14c>)
 800854a:	9200      	str	r2, [sp, #0]
 800854c:	2201      	movs	r2, #1
 800854e:	2002      	movs	r0, #2
 8008550:	f7fd fe72 	bl	8006238 <aci_gatt_add_service>
 8008554:	4603      	mov	r3, r0
 8008556:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8008558:	2319      	movs	r3, #25
 800855a:	713b      	strb	r3, [r7, #4]
 800855c:	23ed      	movs	r3, #237	@ 0xed
 800855e:	717b      	strb	r3, [r7, #5]
 8008560:	2382      	movs	r3, #130	@ 0x82
 8008562:	71bb      	strb	r3, [r7, #6]
 8008564:	23ae      	movs	r3, #174	@ 0xae
 8008566:	71fb      	strb	r3, [r7, #7]
 8008568:	23ed      	movs	r3, #237	@ 0xed
 800856a:	723b      	strb	r3, [r7, #8]
 800856c:	2321      	movs	r3, #33	@ 0x21
 800856e:	727b      	strb	r3, [r7, #9]
 8008570:	234c      	movs	r3, #76	@ 0x4c
 8008572:	72bb      	strb	r3, [r7, #10]
 8008574:	239d      	movs	r3, #157	@ 0x9d
 8008576:	72fb      	strb	r3, [r7, #11]
 8008578:	2341      	movs	r3, #65	@ 0x41
 800857a:	733b      	strb	r3, [r7, #12]
 800857c:	2345      	movs	r3, #69	@ 0x45
 800857e:	737b      	strb	r3, [r7, #13]
 8008580:	2322      	movs	r3, #34	@ 0x22
 8008582:	73bb      	strb	r3, [r7, #14]
 8008584:	238e      	movs	r3, #142	@ 0x8e
 8008586:	73fb      	strb	r3, [r7, #15]
 8008588:	2300      	movs	r3, #0
 800858a:	743b      	strb	r3, [r7, #16]
 800858c:	2300      	movs	r3, #0
 800858e:	747b      	strb	r3, [r7, #17]
 8008590:	2300      	movs	r3, #0
 8008592:	74bb      	strb	r3, [r7, #18]
 8008594:	2300      	movs	r3, #0
 8008596:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8008598:	4b28      	ldr	r3, [pc, #160]	@ (800863c <SVCCTL_InitCustomSvc+0x14c>)
 800859a:	8818      	ldrh	r0, [r3, #0]
 800859c:	4b28      	ldr	r3, [pc, #160]	@ (8008640 <SVCCTL_InitCustomSvc+0x150>)
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	1d3a      	adds	r2, r7, #4
 80085a2:	4928      	ldr	r1, [pc, #160]	@ (8008644 <SVCCTL_InitCustomSvc+0x154>)
 80085a4:	9105      	str	r1, [sp, #20]
 80085a6:	2100      	movs	r1, #0
 80085a8:	9104      	str	r1, [sp, #16]
 80085aa:	2110      	movs	r1, #16
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	2101      	movs	r1, #1
 80085b0:	9102      	str	r1, [sp, #8]
 80085b2:	2100      	movs	r1, #0
 80085b4:	9101      	str	r1, [sp, #4]
 80085b6:	2108      	movs	r1, #8
 80085b8:	9100      	str	r1, [sp, #0]
 80085ba:	2102      	movs	r1, #2
 80085bc:	f7fd ff12 	bl	80063e4 <aci_gatt_add_char>
 80085c0:	4603      	mov	r3, r0
 80085c2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 80085c4:	2319      	movs	r3, #25
 80085c6:	713b      	strb	r3, [r7, #4]
 80085c8:	23ed      	movs	r3, #237	@ 0xed
 80085ca:	717b      	strb	r3, [r7, #5]
 80085cc:	2382      	movs	r3, #130	@ 0x82
 80085ce:	71bb      	strb	r3, [r7, #6]
 80085d0:	23ae      	movs	r3, #174	@ 0xae
 80085d2:	71fb      	strb	r3, [r7, #7]
 80085d4:	23ed      	movs	r3, #237	@ 0xed
 80085d6:	723b      	strb	r3, [r7, #8]
 80085d8:	2321      	movs	r3, #33	@ 0x21
 80085da:	727b      	strb	r3, [r7, #9]
 80085dc:	234c      	movs	r3, #76	@ 0x4c
 80085de:	72bb      	strb	r3, [r7, #10]
 80085e0:	239d      	movs	r3, #157	@ 0x9d
 80085e2:	72fb      	strb	r3, [r7, #11]
 80085e4:	2341      	movs	r3, #65	@ 0x41
 80085e6:	733b      	strb	r3, [r7, #12]
 80085e8:	2345      	movs	r3, #69	@ 0x45
 80085ea:	737b      	strb	r3, [r7, #13]
 80085ec:	2322      	movs	r3, #34	@ 0x22
 80085ee:	73bb      	strb	r3, [r7, #14]
 80085f0:	238e      	movs	r3, #142	@ 0x8e
 80085f2:	73fb      	strb	r3, [r7, #15]
 80085f4:	2300      	movs	r3, #0
 80085f6:	743b      	strb	r3, [r7, #16]
 80085f8:	2310      	movs	r3, #16
 80085fa:	747b      	strb	r3, [r7, #17]
 80085fc:	2300      	movs	r3, #0
 80085fe:	74bb      	strb	r3, [r7, #18]
 8008600:	2300      	movs	r3, #0
 8008602:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8008604:	4b0d      	ldr	r3, [pc, #52]	@ (800863c <SVCCTL_InitCustomSvc+0x14c>)
 8008606:	8818      	ldrh	r0, [r3, #0]
 8008608:	4b0f      	ldr	r3, [pc, #60]	@ (8008648 <SVCCTL_InitCustomSvc+0x158>)
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	1d3a      	adds	r2, r7, #4
 800860e:	490f      	ldr	r1, [pc, #60]	@ (800864c <SVCCTL_InitCustomSvc+0x15c>)
 8008610:	9105      	str	r1, [sp, #20]
 8008612:	2100      	movs	r1, #0
 8008614:	9104      	str	r1, [sp, #16]
 8008616:	2110      	movs	r1, #16
 8008618:	9103      	str	r1, [sp, #12]
 800861a:	210f      	movs	r1, #15
 800861c:	9102      	str	r1, [sp, #8]
 800861e:	2100      	movs	r1, #0
 8008620:	9101      	str	r1, [sp, #4]
 8008622:	2110      	movs	r1, #16
 8008624:	9100      	str	r1, [sp, #0]
 8008626:	2102      	movs	r1, #2
 8008628:	f7fd fedc 	bl	80063e4 <aci_gatt_add_char>
 800862c:	4603      	mov	r3, r0
 800862e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008630:	bf00      	nop
}
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	0800834d 	.word	0x0800834d
 800863c:	20000634 	.word	0x20000634
 8008640:	2000005e 	.word	0x2000005e
 8008644:	20000636 	.word	0x20000636
 8008648:	20000060 	.word	0x20000060
 800864c:	20000638 	.word	0x20000638

08008650 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af02      	add	r7, sp, #8
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800865c:	2392      	movs	r3, #146	@ 0x92
 800865e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <Custom_STM_App_Update_Char+0x1c>
 8008666:	2b01      	cmp	r3, #1
 8008668:	d010      	beq.n	800868c <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800866a:	e01f      	b.n	80086ac <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800866c:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <Custom_STM_App_Update_Char+0x68>)
 800866e:	8818      	ldrh	r0, [r3, #0]
 8008670:	4b11      	ldr	r3, [pc, #68]	@ (80086b8 <Custom_STM_App_Update_Char+0x68>)
 8008672:	8859      	ldrh	r1, [r3, #2]
 8008674:	4b11      	ldr	r3, [pc, #68]	@ (80086bc <Custom_STM_App_Update_Char+0x6c>)
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b2da      	uxtb	r2, r3
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	4613      	mov	r3, r2
 8008680:	2200      	movs	r2, #0
 8008682:	f7fd ffb7 	bl	80065f4 <aci_gatt_update_char_value>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	e00f      	b.n	80086ac <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800868c:	4b0a      	ldr	r3, [pc, #40]	@ (80086b8 <Custom_STM_App_Update_Char+0x68>)
 800868e:	8818      	ldrh	r0, [r3, #0]
 8008690:	4b09      	ldr	r3, [pc, #36]	@ (80086b8 <Custom_STM_App_Update_Char+0x68>)
 8008692:	8899      	ldrh	r1, [r3, #4]
 8008694:	4b0a      	ldr	r3, [pc, #40]	@ (80086c0 <Custom_STM_App_Update_Char+0x70>)
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	b2da      	uxtb	r2, r3
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	4613      	mov	r3, r2
 80086a0:	2200      	movs	r2, #0
 80086a2:	f7fd ffa7 	bl	80065f4 <aci_gatt_update_char_value>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73fb      	strb	r3, [r7, #15]
      break;
 80086aa:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000634 	.word	0x20000634
 80086bc:	2000005e 	.word	0x2000005e
 80086c0:	20000060 	.word	0x20000060

080086c4 <LL_PWR_EnableBootC2>:
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80086c8:	4b05      	ldr	r3, [pc, #20]	@ (80086e0 <LL_PWR_EnableBootC2+0x1c>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4a04      	ldr	r2, [pc, #16]	@ (80086e0 <LL_PWR_EnableBootC2+0x1c>)
 80086ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d2:	60d3      	str	r3, [r2, #12]
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	58000400 	.word	0x58000400

080086e4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80086ec:	4b06      	ldr	r3, [pc, #24]	@ (8008708 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80086ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80086f2:	4905      	ldr	r1, [pc, #20]	@ (8008708 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	58000800 	.word	0x58000800

0800870c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008714:	4b05      	ldr	r3, [pc, #20]	@ (800872c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008716:	6a1a      	ldr	r2, [r3, #32]
 8008718:	4904      	ldr	r1, [pc, #16]	@ (800872c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4313      	orrs	r3, r2
 800871e:	620b      	str	r3, [r1, #32]
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	58000800 	.word	0x58000800

08008730 <LL_AHB3_GRP1_EnableClock>:
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800873c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800873e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4313      	orrs	r3, r2
 8008746:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800874c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4013      	ands	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008754:	68fb      	ldr	r3, [r7, #12]
}
 8008756:	bf00      	nop
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008762:	b480      	push	{r7}
 8008764:	b085      	sub	sp, #20
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800876a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800876e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008772:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800877e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008782:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4013      	ands	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800878c:	68fb      	ldr	r3, [r7, #12]
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	601a      	str	r2, [r3, #0]
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f043 0201 	orr.w	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	601a      	str	r2, [r3, #0]
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	041b      	lsls	r3, r3, #16
 80087ec:	43db      	mvns	r3, r3
 80087ee:	401a      	ands	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	605a      	str	r2, [r3, #4]
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	605a      	str	r2, [r3, #4]
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	43db      	mvns	r3, r3
 8008836:	401a      	ands	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	605a      	str	r2, [r3, #4]
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	609a      	str	r2, [r3, #8]
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	041a      	lsls	r2, r3, #16
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	609a      	str	r2, [r3, #8]
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	4013      	ands	r3, r2
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d101      	bne.n	800889e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69da      	ldr	r2, [r3, #28]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	4013      	ands	r3, r2
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d101      	bne.n	80088c8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80088c4:	2301      	movs	r3, #1
 80088c6:	e000      	b.n	80088ca <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
	...

080088d8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80088dc:	2102      	movs	r1, #2
 80088de:	4818      	ldr	r0, [pc, #96]	@ (8008940 <HW_IPCC_Rx_Handler+0x68>)
 80088e0:	f7ff ffe4 	bl	80088ac <LL_C2_IPCC_IsActiveFlag_CHx>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d008      	beq.n	80088fc <HW_IPCC_Rx_Handler+0x24>
 80088ea:	4b15      	ldr	r3, [pc, #84]	@ (8008940 <HW_IPCC_Rx_Handler+0x68>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d102      	bne.n	80088fc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80088f6:	f000 f8d5 	bl	8008aa4 <HW_IPCC_SYS_EvtHandler>
 80088fa:	e01e      	b.n	800893a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80088fc:	2101      	movs	r1, #1
 80088fe:	4810      	ldr	r0, [pc, #64]	@ (8008940 <HW_IPCC_Rx_Handler+0x68>)
 8008900:	f7ff ffd4 	bl	80088ac <LL_C2_IPCC_IsActiveFlag_CHx>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d008      	beq.n	800891c <HW_IPCC_Rx_Handler+0x44>
 800890a:	4b0d      	ldr	r3, [pc, #52]	@ (8008940 <HW_IPCC_Rx_Handler+0x68>)
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d102      	bne.n	800891c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8008916:	f000 f889 	bl	8008a2c <HW_IPCC_BLE_EvtHandler>
 800891a:	e00e      	b.n	800893a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800891c:	2108      	movs	r1, #8
 800891e:	4808      	ldr	r0, [pc, #32]	@ (8008940 <HW_IPCC_Rx_Handler+0x68>)
 8008920:	f7ff ffc4 	bl	80088ac <LL_C2_IPCC_IsActiveFlag_CHx>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d008      	beq.n	800893c <HW_IPCC_Rx_Handler+0x64>
 800892a:	4b05      	ldr	r3, [pc, #20]	@ (8008940 <HW_IPCC_Rx_Handler+0x68>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008936:	f000 f901 	bl	8008b3c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800893a:	bf00      	nop
 800893c:	bf00      	nop
}
 800893e:	bd80      	pop	{r7, pc}
 8008940:	58000c00 	.word	0x58000c00

08008944 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008948:	2102      	movs	r1, #2
 800894a:	4818      	ldr	r0, [pc, #96]	@ (80089ac <HW_IPCC_Tx_Handler+0x68>)
 800894c:	f7ff ff99 	bl	8008882 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d108      	bne.n	8008968 <HW_IPCC_Tx_Handler+0x24>
 8008956:	4b15      	ldr	r3, [pc, #84]	@ (80089ac <HW_IPCC_Tx_Handler+0x68>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008962:	f000 f893 	bl	8008a8c <HW_IPCC_SYS_CmdEvtHandler>
 8008966:	e01e      	b.n	80089a6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008968:	2108      	movs	r1, #8
 800896a:	4810      	ldr	r0, [pc, #64]	@ (80089ac <HW_IPCC_Tx_Handler+0x68>)
 800896c:	f7ff ff89 	bl	8008882 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d108      	bne.n	8008988 <HW_IPCC_Tx_Handler+0x44>
 8008976:	4b0d      	ldr	r3, [pc, #52]	@ (80089ac <HW_IPCC_Tx_Handler+0x68>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008982:	f000 f8bd 	bl	8008b00 <HW_IPCC_MM_FreeBufHandler>
 8008986:	e00e      	b.n	80089a6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008988:	2120      	movs	r1, #32
 800898a:	4808      	ldr	r0, [pc, #32]	@ (80089ac <HW_IPCC_Tx_Handler+0x68>)
 800898c:	f7ff ff79 	bl	8008882 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d108      	bne.n	80089a8 <HW_IPCC_Tx_Handler+0x64>
 8008996:	4b05      	ldr	r3, [pc, #20]	@ (80089ac <HW_IPCC_Tx_Handler+0x68>)
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80089a2:	f000 f84f 	bl	8008a44 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
}
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	58000c00 	.word	0x58000c00

080089b0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80089b4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80089b8:	f7ff fed3 	bl	8008762 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80089bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80089c0:	f7ff fea4 	bl	800870c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80089c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80089c8:	f7ff fe8c 	bl	80086e4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80089cc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80089ce:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80089d0:	f7ff fe78 	bl	80086c4 <LL_PWR_EnableBootC2>

  return;
 80089d4:	bf00      	nop
}
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80089dc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80089e0:	f7ff fea6 	bl	8008730 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80089e4:	4806      	ldr	r0, [pc, #24]	@ (8008a00 <HW_IPCC_Init+0x28>)
 80089e6:	f7ff fee8 	bl	80087ba <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80089ea:	4805      	ldr	r0, [pc, #20]	@ (8008a00 <HW_IPCC_Init+0x28>)
 80089ec:	f7ff fed5 	bl	800879a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80089f0:	202c      	movs	r0, #44	@ 0x2c
 80089f2:	f7f9 fdc8 	bl	8002586 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80089f6:	202d      	movs	r0, #45	@ 0x2d
 80089f8:	f7f9 fdc5 	bl	8002586 <HAL_NVIC_EnableIRQ>

  return;
 80089fc:	bf00      	nop
}
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	58000c00 	.word	0x58000c00

08008a04 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008a08:	2101      	movs	r1, #1
 8008a0a:	4802      	ldr	r0, [pc, #8]	@ (8008a14 <HW_IPCC_BLE_Init+0x10>)
 8008a0c:	f7ff ff0a 	bl	8008824 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008a10:	bf00      	nop
}
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	58000c00 	.word	0x58000c00

08008a18 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	4802      	ldr	r0, [pc, #8]	@ (8008a28 <HW_IPCC_BLE_SendCmd+0x10>)
 8008a20:	f7ff ff20 	bl	8008864 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008a24:	bf00      	nop
}
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	58000c00 	.word	0x58000c00

08008a2c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008a30:	f7fe fe52 	bl	80076d8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008a34:	2101      	movs	r1, #1
 8008a36:	4802      	ldr	r0, [pc, #8]	@ (8008a40 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008a38:	f7ff ff06 	bl	8008848 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008a3c:	bf00      	nop
}
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	58000c00 	.word	0x58000c00

08008a44 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008a48:	2120      	movs	r1, #32
 8008a4a:	4803      	ldr	r0, [pc, #12]	@ (8008a58 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008a4c:	f7ff fed8 	bl	8008800 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008a50:	f7fe fe72 	bl	8007738 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008a54:	bf00      	nop
}
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	58000c00 	.word	0x58000c00

08008a5c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008a60:	2102      	movs	r1, #2
 8008a62:	4802      	ldr	r0, [pc, #8]	@ (8008a6c <HW_IPCC_SYS_Init+0x10>)
 8008a64:	f7ff fede 	bl	8008824 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008a68:	bf00      	nop
}
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	58000c00 	.word	0x58000c00

08008a70 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008a74:	2102      	movs	r1, #2
 8008a76:	4804      	ldr	r0, [pc, #16]	@ (8008a88 <HW_IPCC_SYS_SendCmd+0x18>)
 8008a78:	f7ff fef4 	bl	8008864 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	4802      	ldr	r0, [pc, #8]	@ (8008a88 <HW_IPCC_SYS_SendCmd+0x18>)
 8008a80:	f7ff feab 	bl	80087da <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008a84:	bf00      	nop
}
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	58000c00 	.word	0x58000c00

08008a8c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008a90:	2102      	movs	r1, #2
 8008a92:	4803      	ldr	r0, [pc, #12]	@ (8008aa0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008a94:	f7ff feb4 	bl	8008800 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008a98:	f7fe fe9e 	bl	80077d8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008a9c:	bf00      	nop
}
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	58000c00 	.word	0x58000c00

08008aa4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008aa8:	f7fe feac 	bl	8007804 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008aac:	2102      	movs	r1, #2
 8008aae:	4802      	ldr	r0, [pc, #8]	@ (8008ab8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008ab0:	f7ff feca 	bl	8008848 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008ab4:	bf00      	nop
}
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	58000c00 	.word	0x58000c00

08008abc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008ac4:	2108      	movs	r1, #8
 8008ac6:	480c      	ldr	r0, [pc, #48]	@ (8008af8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008ac8:	f7ff fedb 	bl	8008882 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d007      	beq.n	8008ae2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8008afc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008ad8:	2108      	movs	r1, #8
 8008ada:	4807      	ldr	r0, [pc, #28]	@ (8008af8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008adc:	f7ff fe7d 	bl	80087da <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008ae0:	e006      	b.n	8008af0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008ae6:	2108      	movs	r1, #8
 8008ae8:	4803      	ldr	r0, [pc, #12]	@ (8008af8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008aea:	f7ff febb 	bl	8008864 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008aee:	bf00      	nop
}
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	58000c00 	.word	0x58000c00
 8008afc:	2000063c 	.word	0x2000063c

08008b00 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008b04:	2108      	movs	r1, #8
 8008b06:	4806      	ldr	r0, [pc, #24]	@ (8008b20 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008b08:	f7ff fe7a 	bl	8008800 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008b0c:	4b05      	ldr	r3, [pc, #20]	@ (8008b24 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008b12:	2108      	movs	r1, #8
 8008b14:	4802      	ldr	r0, [pc, #8]	@ (8008b20 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008b16:	f7ff fea5 	bl	8008864 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008b1a:	bf00      	nop
}
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	58000c00 	.word	0x58000c00
 8008b24:	2000063c 	.word	0x2000063c

08008b28 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008b2c:	2108      	movs	r1, #8
 8008b2e:	4802      	ldr	r0, [pc, #8]	@ (8008b38 <HW_IPCC_TRACES_Init+0x10>)
 8008b30:	f7ff fe78 	bl	8008824 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008b34:	bf00      	nop
}
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	58000c00 	.word	0x58000c00

08008b3c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008b40:	f7fe ff08 	bl	8007954 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008b44:	2108      	movs	r1, #8
 8008b46:	4802      	ldr	r0, [pc, #8]	@ (8008b50 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008b48:	f7ff fe7e 	bl	8008848 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008b4c:	bf00      	nop
}
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	58000c00 	.word	0x58000c00

08008b54 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008b58:	4b05      	ldr	r3, [pc, #20]	@ (8008b70 <UTIL_LPM_Init+0x1c>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008b5e:	4b05      	ldr	r3, [pc, #20]	@ (8008b74 <UTIL_LPM_Init+0x20>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000640 	.word	0x20000640
 8008b74:	20000644 	.word	0x20000644

08008b78 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b84:	f3ef 8310 	mrs	r3, PRIMASK
 8008b88:	613b      	str	r3, [r7, #16]
  return(result);
 8008b8a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b8e:	b672      	cpsid	i
}
 8008b90:	bf00      	nop
  
  switch(state)
 8008b92:	78fb      	ldrb	r3, [r7, #3]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <UTIL_LPM_SetOffMode+0x32>
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d10e      	bne.n	8008bba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd4 <UTIL_LPM_SetOffMode+0x5c>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8008bd4 <UTIL_LPM_SetOffMode+0x5c>)
 8008ba6:	6013      	str	r3, [r2, #0]
      break;
 8008ba8:	e008      	b.n	8008bbc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	43da      	mvns	r2, r3
 8008bae:	4b09      	ldr	r3, [pc, #36]	@ (8008bd4 <UTIL_LPM_SetOffMode+0x5c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	4a07      	ldr	r2, [pc, #28]	@ (8008bd4 <UTIL_LPM_SetOffMode+0x5c>)
 8008bb6:	6013      	str	r3, [r2, #0]
      break;
 8008bb8:	e000      	b.n	8008bbc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008bba:	bf00      	nop
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f383 8810 	msr	PRIMASK, r3
}
 8008bc6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008bc8:	bf00      	nop
 8008bca:	371c      	adds	r7, #28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20000644 	.word	0x20000644

08008bd8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b090      	sub	sp, #64	@ 0x40
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008be0:	4b73      	ldr	r3, [pc, #460]	@ (8008db0 <UTIL_SEQ_Run+0x1d8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8008be6:	4b72      	ldr	r3, [pc, #456]	@ (8008db0 <UTIL_SEQ_Run+0x1d8>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4013      	ands	r3, r2
 8008bee:	4a70      	ldr	r2, [pc, #448]	@ (8008db0 <UTIL_SEQ_Run+0x1d8>)
 8008bf0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008bf2:	4b70      	ldr	r3, [pc, #448]	@ (8008db4 <UTIL_SEQ_Run+0x1dc>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8008db8 <UTIL_SEQ_Run+0x1e0>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8008dbc <UTIL_SEQ_Run+0x1e4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008c04:	4b6e      	ldr	r3, [pc, #440]	@ (8008dc0 <UTIL_SEQ_Run+0x1e8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008c0a:	e08d      	b.n	8008d28 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008c10:	e002      	b.n	8008c18 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c14:	3301      	adds	r3, #1
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008c18:	4a6a      	ldr	r2, [pc, #424]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	401a      	ands	r2, r3
 8008c24:	4b62      	ldr	r3, [pc, #392]	@ (8008db0 <UTIL_SEQ_Run+0x1d8>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0f1      	beq.n	8008c12 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008c2e:	4a65      	ldr	r2, [pc, #404]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c32:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	401a      	ands	r2, r3
 8008c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8008db0 <UTIL_SEQ_Run+0x1d8>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008c42:	4a60      	ldr	r2, [pc, #384]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4413      	add	r3, r2
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4e:	4013      	ands	r3, r2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008c54:	4a5b      	ldr	r2, [pc, #364]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c60:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008c62:	4a58      	ldr	r2, [pc, #352]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	4413      	add	r3, r2
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	4013      	ands	r3, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f9b3 	bl	8008fdc <SEQ_BitPosition>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4b53      	ldr	r3, [pc, #332]	@ (8008dc8 <UTIL_SEQ_Run+0x1f0>)
 8008c7c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008c7e:	4a51      	ldr	r2, [pc, #324]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	4413      	add	r3, r2
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	4b4f      	ldr	r3, [pc, #316]	@ (8008dc8 <UTIL_SEQ_Run+0x1f0>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c92:	43db      	mvns	r3, r3
 8008c94:	401a      	ands	r2, r3
 8008c96:	494b      	ldr	r1, [pc, #300]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	440b      	add	r3, r1
 8008c9e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca4:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ca6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008ca8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008caa:	b672      	cpsid	i
}
 8008cac:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008cae:	4b46      	ldr	r3, [pc, #280]	@ (8008dc8 <UTIL_SEQ_Run+0x1f0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	43da      	mvns	r2, r3
 8008cba:	4b3e      	ldr	r3, [pc, #248]	@ (8008db4 <UTIL_SEQ_Run+0x1dc>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8008db4 <UTIL_SEQ_Run+0x1dc>)
 8008cc2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cc8:	e013      	b.n	8008cf2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	4a3d      	ldr	r2, [pc, #244]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008cd0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8008dc8 <UTIL_SEQ_Run+0x1f0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	43da      	mvns	r2, r3
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	400a      	ands	r2, r1
 8008ce6:	4937      	ldr	r1, [pc, #220]	@ (8008dc4 <UTIL_SEQ_Run+0x1ec>)
 8008ce8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e8      	bne.n	8008cca <UTIL_SEQ_Run+0xf2>
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f383 8810 	msr	PRIMASK, r3
}
 8008d02:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008d04:	4b30      	ldr	r3, [pc, #192]	@ (8008dc8 <UTIL_SEQ_Run+0x1f0>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a30      	ldr	r2, [pc, #192]	@ (8008dcc <UTIL_SEQ_Run+0x1f4>)
 8008d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d0e:	4798      	blx	r3

    local_taskset = TaskSet;
 8008d10:	4b28      	ldr	r3, [pc, #160]	@ (8008db4 <UTIL_SEQ_Run+0x1dc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8008d16:	4b28      	ldr	r3, [pc, #160]	@ (8008db8 <UTIL_SEQ_Run+0x1e0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008d1c:	4b27      	ldr	r3, [pc, #156]	@ (8008dbc <UTIL_SEQ_Run+0x1e4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8008d22:	4b27      	ldr	r3, [pc, #156]	@ (8008dc0 <UTIL_SEQ_Run+0x1e8>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008d28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	401a      	ands	r2, r3
 8008d2e:	4b20      	ldr	r3, [pc, #128]	@ (8008db0 <UTIL_SEQ_Run+0x1d8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4013      	ands	r3, r2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <UTIL_SEQ_Run+0x16c>
 8008d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f43f af64 	beq.w	8008c0c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008d44:	4b20      	ldr	r3, [pc, #128]	@ (8008dc8 <UTIL_SEQ_Run+0x1f0>)
 8008d46:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008d4c:	f000 f938 	bl	8008fc0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d50:	f3ef 8310 	mrs	r3, PRIMASK
 8008d54:	613b      	str	r3, [r7, #16]
  return(result);
 8008d56:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008d58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d5a:	b672      	cpsid	i
}
 8008d5c:	bf00      	nop
  local_taskset = TaskSet;
 8008d5e:	4b15      	ldr	r3, [pc, #84]	@ (8008db4 <UTIL_SEQ_Run+0x1dc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008d64:	4b14      	ldr	r3, [pc, #80]	@ (8008db8 <UTIL_SEQ_Run+0x1e0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008d6a:	4b14      	ldr	r3, [pc, #80]	@ (8008dbc <UTIL_SEQ_Run+0x1e4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008d70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	401a      	ands	r2, r3
 8008d76:	4b0e      	ldr	r3, [pc, #56]	@ (8008db0 <UTIL_SEQ_Run+0x1d8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d107      	bne.n	8008d90 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008d80:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc0 <UTIL_SEQ_Run+0x1e8>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d86:	4013      	ands	r3, r2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008d8c:	f7f7 fdf1 	bl	8000972 <UTIL_SEQ_Idle>
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f383 8810 	msr	PRIMASK, r3
}
 8008d9a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008d9c:	f000 f917 	bl	8008fce <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008da0:	4a03      	ldr	r2, [pc, #12]	@ (8008db0 <UTIL_SEQ_Run+0x1d8>)
 8008da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da4:	6013      	str	r3, [r2, #0]

  return;
 8008da6:	bf00      	nop
}
 8008da8:	3740      	adds	r7, #64	@ 0x40
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000068 	.word	0x20000068
 8008db4:	20000648 	.word	0x20000648
 8008db8:	2000064c 	.word	0x2000064c
 8008dbc:	20000064 	.word	0x20000064
 8008dc0:	20000650 	.word	0x20000650
 8008dc4:	200006d8 	.word	0x200006d8
 8008dc8:	20000654 	.word	0x20000654
 8008dcc:	20000658 	.word	0x20000658

08008dd0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8008de0:	617b      	str	r3, [r7, #20]
  return(result);
 8008de2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008de4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008de6:	b672      	cpsid	i
}
 8008de8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 f8f6 	bl	8008fdc <SEQ_BitPosition>
 8008df0:	4603      	mov	r3, r0
 8008df2:	4619      	mov	r1, r3
 8008df4:	4a06      	ldr	r2, [pc, #24]	@ (8008e10 <UTIL_SEQ_RegTask+0x40>)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f383 8810 	msr	PRIMASK, r3
}
 8008e06:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008e08:	bf00      	nop
}
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20000658 	.word	0x20000658

08008e14 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e22:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e24:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e28:	b672      	cpsid	i
}
 8008e2a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <UTIL_SEQ_SetTask+0x50>)
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	4a0b      	ldr	r2, [pc, #44]	@ (8008e64 <UTIL_SEQ_SetTask+0x50>)
 8008e36:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008e38:	4a0b      	ldr	r2, [pc, #44]	@ (8008e68 <UTIL_SEQ_SetTask+0x54>)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	4908      	ldr	r1, [pc, #32]	@ (8008e68 <UTIL_SEQ_SetTask+0x54>)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f383 8810 	msr	PRIMASK, r3
}
 8008e56:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008e58:	bf00      	nop
}
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	20000648 	.word	0x20000648
 8008e68:	200006d8 	.word	0x200006d8

08008e6c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e74:	f3ef 8310 	mrs	r3, PRIMASK
 8008e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008e7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e7e:	b672      	cpsid	i
}
 8008e80:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	43da      	mvns	r2, r3
 8008e86:	4b08      	ldr	r3, [pc, #32]	@ (8008ea8 <UTIL_SEQ_PauseTask+0x3c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	4a06      	ldr	r2, [pc, #24]	@ (8008ea8 <UTIL_SEQ_PauseTask+0x3c>)
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f383 8810 	msr	PRIMASK, r3
}
 8008e9a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008e9c:	bf00      	nop
}
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	20000064 	.word	0x20000064

08008eac <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ebe:	b672      	cpsid	i
}
 8008ec0:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008ec2:	4b09      	ldr	r3, [pc, #36]	@ (8008ee8 <UTIL_SEQ_ResumeTask+0x3c>)
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	4a07      	ldr	r2, [pc, #28]	@ (8008ee8 <UTIL_SEQ_ResumeTask+0x3c>)
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f383 8810 	msr	PRIMASK, r3
}
 8008ed8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008eda:	bf00      	nop
}
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000064 	.word	0x20000064

08008eec <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008efa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008efe:	b672      	cpsid	i
}
 8008f00:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008f02:	4b09      	ldr	r3, [pc, #36]	@ (8008f28 <UTIL_SEQ_SetEvt+0x3c>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	4a07      	ldr	r2, [pc, #28]	@ (8008f28 <UTIL_SEQ_SetEvt+0x3c>)
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	f383 8810 	msr	PRIMASK, r3
}
 8008f18:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008f1a:	bf00      	nop
}
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	2000064c 	.word	0x2000064c

08008f2c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008f34:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb4 <UTIL_SEQ_WaitEvt+0x88>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb4 <UTIL_SEQ_WaitEvt+0x88>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f42:	d102      	bne.n	8008f4a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	e005      	b.n	8008f56 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8008fb4 <UTIL_SEQ_WaitEvt+0x88>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	fa02 f303 	lsl.w	r3, r2, r3
 8008f54:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008f56:	4b18      	ldr	r3, [pc, #96]	@ (8008fb8 <UTIL_SEQ_WaitEvt+0x8c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008f5c:	4a16      	ldr	r2, [pc, #88]	@ (8008fb8 <UTIL_SEQ_WaitEvt+0x8c>)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8008f62:	e003      	b.n	8008f6c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	69f8      	ldr	r0, [r7, #28]
 8008f68:	f7f7 fd0a 	bl	8000980 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008f6c:	4b13      	ldr	r3, [pc, #76]	@ (8008fbc <UTIL_SEQ_WaitEvt+0x90>)
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4013      	ands	r3, r2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0f5      	beq.n	8008f64 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008f78:	4a0e      	ldr	r2, [pc, #56]	@ (8008fb4 <UTIL_SEQ_WaitEvt+0x88>)
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f82:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f84:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008f86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f88:	b672      	cpsid	i
}
 8008f8a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	43da      	mvns	r2, r3
 8008f90:	4b0a      	ldr	r3, [pc, #40]	@ (8008fbc <UTIL_SEQ_WaitEvt+0x90>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4013      	ands	r3, r2
 8008f96:	4a09      	ldr	r2, [pc, #36]	@ (8008fbc <UTIL_SEQ_WaitEvt+0x90>)
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f383 8810 	msr	PRIMASK, r3
}
 8008fa4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8008fa6:	4a04      	ldr	r2, [pc, #16]	@ (8008fb8 <UTIL_SEQ_WaitEvt+0x8c>)
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	6013      	str	r3, [r2, #0]
  return;
 8008fac:	bf00      	nop
}
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000654 	.word	0x20000654
 8008fb8:	20000650 	.word	0x20000650
 8008fbc:	2000064c 	.word	0x2000064c

08008fc0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008fc4:	bf00      	nop
}
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008fce:	b480      	push	{r7}
 8008fd0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008fd2:	bf00      	nop
}
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <SEQ_BitPosition+0x16>
    return 32U;
 8008fee:	2320      	movs	r3, #32
 8008ff0:	e003      	b.n	8008ffa <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	fab3 f383 	clz	r3, r3
 8008ff8:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8008ffa:	f1c3 031f 	rsb	r3, r3, #31
 8008ffe:	b2db      	uxtb	r3, r3
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <std>:
 800900c:	2300      	movs	r3, #0
 800900e:	b510      	push	{r4, lr}
 8009010:	4604      	mov	r4, r0
 8009012:	e9c0 3300 	strd	r3, r3, [r0]
 8009016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800901a:	6083      	str	r3, [r0, #8]
 800901c:	8181      	strh	r1, [r0, #12]
 800901e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009020:	81c2      	strh	r2, [r0, #14]
 8009022:	6183      	str	r3, [r0, #24]
 8009024:	4619      	mov	r1, r3
 8009026:	2208      	movs	r2, #8
 8009028:	305c      	adds	r0, #92	@ 0x5c
 800902a:	f000 f90e 	bl	800924a <memset>
 800902e:	4b0d      	ldr	r3, [pc, #52]	@ (8009064 <std+0x58>)
 8009030:	6263      	str	r3, [r4, #36]	@ 0x24
 8009032:	4b0d      	ldr	r3, [pc, #52]	@ (8009068 <std+0x5c>)
 8009034:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009036:	4b0d      	ldr	r3, [pc, #52]	@ (800906c <std+0x60>)
 8009038:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <std+0x64>)
 800903c:	6323      	str	r3, [r4, #48]	@ 0x30
 800903e:	4b0d      	ldr	r3, [pc, #52]	@ (8009074 <std+0x68>)
 8009040:	6224      	str	r4, [r4, #32]
 8009042:	429c      	cmp	r4, r3
 8009044:	d006      	beq.n	8009054 <std+0x48>
 8009046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800904a:	4294      	cmp	r4, r2
 800904c:	d002      	beq.n	8009054 <std+0x48>
 800904e:	33d0      	adds	r3, #208	@ 0xd0
 8009050:	429c      	cmp	r4, r3
 8009052:	d105      	bne.n	8009060 <std+0x54>
 8009054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800905c:	f000 b96e 	b.w	800933c <__retarget_lock_init_recursive>
 8009060:	bd10      	pop	{r4, pc}
 8009062:	bf00      	nop
 8009064:	080091c5 	.word	0x080091c5
 8009068:	080091e7 	.word	0x080091e7
 800906c:	0800921f 	.word	0x0800921f
 8009070:	08009243 	.word	0x08009243
 8009074:	200006e0 	.word	0x200006e0

08009078 <stdio_exit_handler>:
 8009078:	4a02      	ldr	r2, [pc, #8]	@ (8009084 <stdio_exit_handler+0xc>)
 800907a:	4903      	ldr	r1, [pc, #12]	@ (8009088 <stdio_exit_handler+0x10>)
 800907c:	4803      	ldr	r0, [pc, #12]	@ (800908c <stdio_exit_handler+0x14>)
 800907e:	f000 b869 	b.w	8009154 <_fwalk_sglue>
 8009082:	bf00      	nop
 8009084:	2000006c 	.word	0x2000006c
 8009088:	08009bf9 	.word	0x08009bf9
 800908c:	2000007c 	.word	0x2000007c

08009090 <cleanup_stdio>:
 8009090:	6841      	ldr	r1, [r0, #4]
 8009092:	4b0c      	ldr	r3, [pc, #48]	@ (80090c4 <cleanup_stdio+0x34>)
 8009094:	4299      	cmp	r1, r3
 8009096:	b510      	push	{r4, lr}
 8009098:	4604      	mov	r4, r0
 800909a:	d001      	beq.n	80090a0 <cleanup_stdio+0x10>
 800909c:	f000 fdac 	bl	8009bf8 <_fflush_r>
 80090a0:	68a1      	ldr	r1, [r4, #8]
 80090a2:	4b09      	ldr	r3, [pc, #36]	@ (80090c8 <cleanup_stdio+0x38>)
 80090a4:	4299      	cmp	r1, r3
 80090a6:	d002      	beq.n	80090ae <cleanup_stdio+0x1e>
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 fda5 	bl	8009bf8 <_fflush_r>
 80090ae:	68e1      	ldr	r1, [r4, #12]
 80090b0:	4b06      	ldr	r3, [pc, #24]	@ (80090cc <cleanup_stdio+0x3c>)
 80090b2:	4299      	cmp	r1, r3
 80090b4:	d004      	beq.n	80090c0 <cleanup_stdio+0x30>
 80090b6:	4620      	mov	r0, r4
 80090b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090bc:	f000 bd9c 	b.w	8009bf8 <_fflush_r>
 80090c0:	bd10      	pop	{r4, pc}
 80090c2:	bf00      	nop
 80090c4:	200006e0 	.word	0x200006e0
 80090c8:	20000748 	.word	0x20000748
 80090cc:	200007b0 	.word	0x200007b0

080090d0 <global_stdio_init.part.0>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009100 <global_stdio_init.part.0+0x30>)
 80090d4:	4c0b      	ldr	r4, [pc, #44]	@ (8009104 <global_stdio_init.part.0+0x34>)
 80090d6:	4a0c      	ldr	r2, [pc, #48]	@ (8009108 <global_stdio_init.part.0+0x38>)
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	4620      	mov	r0, r4
 80090dc:	2200      	movs	r2, #0
 80090de:	2104      	movs	r1, #4
 80090e0:	f7ff ff94 	bl	800900c <std>
 80090e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090e8:	2201      	movs	r2, #1
 80090ea:	2109      	movs	r1, #9
 80090ec:	f7ff ff8e 	bl	800900c <std>
 80090f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090f4:	2202      	movs	r2, #2
 80090f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090fa:	2112      	movs	r1, #18
 80090fc:	f7ff bf86 	b.w	800900c <std>
 8009100:	20000818 	.word	0x20000818
 8009104:	200006e0 	.word	0x200006e0
 8009108:	08009079 	.word	0x08009079

0800910c <__sfp_lock_acquire>:
 800910c:	4801      	ldr	r0, [pc, #4]	@ (8009114 <__sfp_lock_acquire+0x8>)
 800910e:	f000 b916 	b.w	800933e <__retarget_lock_acquire_recursive>
 8009112:	bf00      	nop
 8009114:	20000821 	.word	0x20000821

08009118 <__sfp_lock_release>:
 8009118:	4801      	ldr	r0, [pc, #4]	@ (8009120 <__sfp_lock_release+0x8>)
 800911a:	f000 b911 	b.w	8009340 <__retarget_lock_release_recursive>
 800911e:	bf00      	nop
 8009120:	20000821 	.word	0x20000821

08009124 <__sinit>:
 8009124:	b510      	push	{r4, lr}
 8009126:	4604      	mov	r4, r0
 8009128:	f7ff fff0 	bl	800910c <__sfp_lock_acquire>
 800912c:	6a23      	ldr	r3, [r4, #32]
 800912e:	b11b      	cbz	r3, 8009138 <__sinit+0x14>
 8009130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009134:	f7ff bff0 	b.w	8009118 <__sfp_lock_release>
 8009138:	4b04      	ldr	r3, [pc, #16]	@ (800914c <__sinit+0x28>)
 800913a:	6223      	str	r3, [r4, #32]
 800913c:	4b04      	ldr	r3, [pc, #16]	@ (8009150 <__sinit+0x2c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1f5      	bne.n	8009130 <__sinit+0xc>
 8009144:	f7ff ffc4 	bl	80090d0 <global_stdio_init.part.0>
 8009148:	e7f2      	b.n	8009130 <__sinit+0xc>
 800914a:	bf00      	nop
 800914c:	08009091 	.word	0x08009091
 8009150:	20000818 	.word	0x20000818

08009154 <_fwalk_sglue>:
 8009154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009158:	4607      	mov	r7, r0
 800915a:	4688      	mov	r8, r1
 800915c:	4614      	mov	r4, r2
 800915e:	2600      	movs	r6, #0
 8009160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009164:	f1b9 0901 	subs.w	r9, r9, #1
 8009168:	d505      	bpl.n	8009176 <_fwalk_sglue+0x22>
 800916a:	6824      	ldr	r4, [r4, #0]
 800916c:	2c00      	cmp	r4, #0
 800916e:	d1f7      	bne.n	8009160 <_fwalk_sglue+0xc>
 8009170:	4630      	mov	r0, r6
 8009172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d907      	bls.n	800918c <_fwalk_sglue+0x38>
 800917c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009180:	3301      	adds	r3, #1
 8009182:	d003      	beq.n	800918c <_fwalk_sglue+0x38>
 8009184:	4629      	mov	r1, r5
 8009186:	4638      	mov	r0, r7
 8009188:	47c0      	blx	r8
 800918a:	4306      	orrs	r6, r0
 800918c:	3568      	adds	r5, #104	@ 0x68
 800918e:	e7e9      	b.n	8009164 <_fwalk_sglue+0x10>

08009190 <iprintf>:
 8009190:	b40f      	push	{r0, r1, r2, r3}
 8009192:	b507      	push	{r0, r1, r2, lr}
 8009194:	4906      	ldr	r1, [pc, #24]	@ (80091b0 <iprintf+0x20>)
 8009196:	ab04      	add	r3, sp, #16
 8009198:	6808      	ldr	r0, [r1, #0]
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	6881      	ldr	r1, [r0, #8]
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	f000 f9ff 	bl	80095a4 <_vfiprintf_r>
 80091a6:	b003      	add	sp, #12
 80091a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ac:	b004      	add	sp, #16
 80091ae:	4770      	bx	lr
 80091b0:	20000078 	.word	0x20000078

080091b4 <putchar>:
 80091b4:	4b02      	ldr	r3, [pc, #8]	@ (80091c0 <putchar+0xc>)
 80091b6:	4601      	mov	r1, r0
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	6882      	ldr	r2, [r0, #8]
 80091bc:	f000 bd44 	b.w	8009c48 <_putc_r>
 80091c0:	20000078 	.word	0x20000078

080091c4 <__sread>:
 80091c4:	b510      	push	{r4, lr}
 80091c6:	460c      	mov	r4, r1
 80091c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091cc:	f000 f868 	bl	80092a0 <_read_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	bfab      	itete	ge
 80091d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091d6:	89a3      	ldrhlt	r3, [r4, #12]
 80091d8:	181b      	addge	r3, r3, r0
 80091da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091de:	bfac      	ite	ge
 80091e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091e2:	81a3      	strhlt	r3, [r4, #12]
 80091e4:	bd10      	pop	{r4, pc}

080091e6 <__swrite>:
 80091e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ea:	461f      	mov	r7, r3
 80091ec:	898b      	ldrh	r3, [r1, #12]
 80091ee:	05db      	lsls	r3, r3, #23
 80091f0:	4605      	mov	r5, r0
 80091f2:	460c      	mov	r4, r1
 80091f4:	4616      	mov	r6, r2
 80091f6:	d505      	bpl.n	8009204 <__swrite+0x1e>
 80091f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fc:	2302      	movs	r3, #2
 80091fe:	2200      	movs	r2, #0
 8009200:	f000 f83c 	bl	800927c <_lseek_r>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800920a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800920e:	81a3      	strh	r3, [r4, #12]
 8009210:	4632      	mov	r2, r6
 8009212:	463b      	mov	r3, r7
 8009214:	4628      	mov	r0, r5
 8009216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800921a:	f000 b853 	b.w	80092c4 <_write_r>

0800921e <__sseek>:
 800921e:	b510      	push	{r4, lr}
 8009220:	460c      	mov	r4, r1
 8009222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009226:	f000 f829 	bl	800927c <_lseek_r>
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	bf15      	itete	ne
 8009230:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009232:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009236:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800923a:	81a3      	strheq	r3, [r4, #12]
 800923c:	bf18      	it	ne
 800923e:	81a3      	strhne	r3, [r4, #12]
 8009240:	bd10      	pop	{r4, pc}

08009242 <__sclose>:
 8009242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009246:	f000 b809 	b.w	800925c <_close_r>

0800924a <memset>:
 800924a:	4402      	add	r2, r0
 800924c:	4603      	mov	r3, r0
 800924e:	4293      	cmp	r3, r2
 8009250:	d100      	bne.n	8009254 <memset+0xa>
 8009252:	4770      	bx	lr
 8009254:	f803 1b01 	strb.w	r1, [r3], #1
 8009258:	e7f9      	b.n	800924e <memset+0x4>
	...

0800925c <_close_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4d06      	ldr	r5, [pc, #24]	@ (8009278 <_close_r+0x1c>)
 8009260:	2300      	movs	r3, #0
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	602b      	str	r3, [r5, #0]
 8009268:	f7f8 fdc7 	bl	8001dfa <_close>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_close_r+0x1a>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_close_r+0x1a>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	2000081c 	.word	0x2000081c

0800927c <_lseek_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	@ (800929c <_lseek_r+0x20>)
 8009280:	4604      	mov	r4, r0
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7f8 fddc 	bl	8001e48 <_lseek>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_lseek_r+0x1e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_lseek_r+0x1e>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	2000081c 	.word	0x2000081c

080092a0 <_read_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d07      	ldr	r5, [pc, #28]	@ (80092c0 <_read_r+0x20>)
 80092a4:	4604      	mov	r4, r0
 80092a6:	4608      	mov	r0, r1
 80092a8:	4611      	mov	r1, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	602a      	str	r2, [r5, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f7f8 fd6a 	bl	8001d88 <_read>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_read_r+0x1e>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_read_r+0x1e>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	2000081c 	.word	0x2000081c

080092c4 <_write_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d07      	ldr	r5, [pc, #28]	@ (80092e4 <_write_r+0x20>)
 80092c8:	4604      	mov	r4, r0
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	602a      	str	r2, [r5, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f7f8 fd75 	bl	8001dc2 <_write>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_write_r+0x1e>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_write_r+0x1e>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	2000081c 	.word	0x2000081c

080092e8 <__errno>:
 80092e8:	4b01      	ldr	r3, [pc, #4]	@ (80092f0 <__errno+0x8>)
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	20000078 	.word	0x20000078

080092f4 <__libc_init_array>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	4d0d      	ldr	r5, [pc, #52]	@ (800932c <__libc_init_array+0x38>)
 80092f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009330 <__libc_init_array+0x3c>)
 80092fa:	1b64      	subs	r4, r4, r5
 80092fc:	10a4      	asrs	r4, r4, #2
 80092fe:	2600      	movs	r6, #0
 8009300:	42a6      	cmp	r6, r4
 8009302:	d109      	bne.n	8009318 <__libc_init_array+0x24>
 8009304:	4d0b      	ldr	r5, [pc, #44]	@ (8009334 <__libc_init_array+0x40>)
 8009306:	4c0c      	ldr	r4, [pc, #48]	@ (8009338 <__libc_init_array+0x44>)
 8009308:	f000 fdfa 	bl	8009f00 <_init>
 800930c:	1b64      	subs	r4, r4, r5
 800930e:	10a4      	asrs	r4, r4, #2
 8009310:	2600      	movs	r6, #0
 8009312:	42a6      	cmp	r6, r4
 8009314:	d105      	bne.n	8009322 <__libc_init_array+0x2e>
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	f855 3b04 	ldr.w	r3, [r5], #4
 800931c:	4798      	blx	r3
 800931e:	3601      	adds	r6, #1
 8009320:	e7ee      	b.n	8009300 <__libc_init_array+0xc>
 8009322:	f855 3b04 	ldr.w	r3, [r5], #4
 8009326:	4798      	blx	r3
 8009328:	3601      	adds	r6, #1
 800932a:	e7f2      	b.n	8009312 <__libc_init_array+0x1e>
 800932c:	0800a250 	.word	0x0800a250
 8009330:	0800a250 	.word	0x0800a250
 8009334:	0800a250 	.word	0x0800a250
 8009338:	0800a254 	.word	0x0800a254

0800933c <__retarget_lock_init_recursive>:
 800933c:	4770      	bx	lr

0800933e <__retarget_lock_acquire_recursive>:
 800933e:	4770      	bx	lr

08009340 <__retarget_lock_release_recursive>:
 8009340:	4770      	bx	lr

08009342 <memcpy>:
 8009342:	440a      	add	r2, r1
 8009344:	4291      	cmp	r1, r2
 8009346:	f100 33ff 	add.w	r3, r0, #4294967295
 800934a:	d100      	bne.n	800934e <memcpy+0xc>
 800934c:	4770      	bx	lr
 800934e:	b510      	push	{r4, lr}
 8009350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009358:	4291      	cmp	r1, r2
 800935a:	d1f9      	bne.n	8009350 <memcpy+0xe>
 800935c:	bd10      	pop	{r4, pc}
	...

08009360 <_free_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4605      	mov	r5, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	d041      	beq.n	80093ec <_free_r+0x8c>
 8009368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800936c:	1f0c      	subs	r4, r1, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfb8      	it	lt
 8009372:	18e4      	addlt	r4, r4, r3
 8009374:	f000 f8e0 	bl	8009538 <__malloc_lock>
 8009378:	4a1d      	ldr	r2, [pc, #116]	@ (80093f0 <_free_r+0x90>)
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	b933      	cbnz	r3, 800938c <_free_r+0x2c>
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	6014      	str	r4, [r2, #0]
 8009382:	4628      	mov	r0, r5
 8009384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009388:	f000 b8dc 	b.w	8009544 <__malloc_unlock>
 800938c:	42a3      	cmp	r3, r4
 800938e:	d908      	bls.n	80093a2 <_free_r+0x42>
 8009390:	6820      	ldr	r0, [r4, #0]
 8009392:	1821      	adds	r1, r4, r0
 8009394:	428b      	cmp	r3, r1
 8009396:	bf01      	itttt	eq
 8009398:	6819      	ldreq	r1, [r3, #0]
 800939a:	685b      	ldreq	r3, [r3, #4]
 800939c:	1809      	addeq	r1, r1, r0
 800939e:	6021      	streq	r1, [r4, #0]
 80093a0:	e7ed      	b.n	800937e <_free_r+0x1e>
 80093a2:	461a      	mov	r2, r3
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	b10b      	cbz	r3, 80093ac <_free_r+0x4c>
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d9fa      	bls.n	80093a2 <_free_r+0x42>
 80093ac:	6811      	ldr	r1, [r2, #0]
 80093ae:	1850      	adds	r0, r2, r1
 80093b0:	42a0      	cmp	r0, r4
 80093b2:	d10b      	bne.n	80093cc <_free_r+0x6c>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	4401      	add	r1, r0
 80093b8:	1850      	adds	r0, r2, r1
 80093ba:	4283      	cmp	r3, r0
 80093bc:	6011      	str	r1, [r2, #0]
 80093be:	d1e0      	bne.n	8009382 <_free_r+0x22>
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	6053      	str	r3, [r2, #4]
 80093c6:	4408      	add	r0, r1
 80093c8:	6010      	str	r0, [r2, #0]
 80093ca:	e7da      	b.n	8009382 <_free_r+0x22>
 80093cc:	d902      	bls.n	80093d4 <_free_r+0x74>
 80093ce:	230c      	movs	r3, #12
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	e7d6      	b.n	8009382 <_free_r+0x22>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	1821      	adds	r1, r4, r0
 80093d8:	428b      	cmp	r3, r1
 80093da:	bf04      	itt	eq
 80093dc:	6819      	ldreq	r1, [r3, #0]
 80093de:	685b      	ldreq	r3, [r3, #4]
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	bf04      	itt	eq
 80093e4:	1809      	addeq	r1, r1, r0
 80093e6:	6021      	streq	r1, [r4, #0]
 80093e8:	6054      	str	r4, [r2, #4]
 80093ea:	e7ca      	b.n	8009382 <_free_r+0x22>
 80093ec:	bd38      	pop	{r3, r4, r5, pc}
 80093ee:	bf00      	nop
 80093f0:	20000828 	.word	0x20000828

080093f4 <sbrk_aligned>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009434 <sbrk_aligned+0x40>)
 80093f8:	460c      	mov	r4, r1
 80093fa:	6831      	ldr	r1, [r6, #0]
 80093fc:	4605      	mov	r5, r0
 80093fe:	b911      	cbnz	r1, 8009406 <sbrk_aligned+0x12>
 8009400:	f000 fcea 	bl	8009dd8 <_sbrk_r>
 8009404:	6030      	str	r0, [r6, #0]
 8009406:	4621      	mov	r1, r4
 8009408:	4628      	mov	r0, r5
 800940a:	f000 fce5 	bl	8009dd8 <_sbrk_r>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d103      	bne.n	800941a <sbrk_aligned+0x26>
 8009412:	f04f 34ff 	mov.w	r4, #4294967295
 8009416:	4620      	mov	r0, r4
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	1cc4      	adds	r4, r0, #3
 800941c:	f024 0403 	bic.w	r4, r4, #3
 8009420:	42a0      	cmp	r0, r4
 8009422:	d0f8      	beq.n	8009416 <sbrk_aligned+0x22>
 8009424:	1a21      	subs	r1, r4, r0
 8009426:	4628      	mov	r0, r5
 8009428:	f000 fcd6 	bl	8009dd8 <_sbrk_r>
 800942c:	3001      	adds	r0, #1
 800942e:	d1f2      	bne.n	8009416 <sbrk_aligned+0x22>
 8009430:	e7ef      	b.n	8009412 <sbrk_aligned+0x1e>
 8009432:	bf00      	nop
 8009434:	20000824 	.word	0x20000824

08009438 <_malloc_r>:
 8009438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943c:	1ccd      	adds	r5, r1, #3
 800943e:	f025 0503 	bic.w	r5, r5, #3
 8009442:	3508      	adds	r5, #8
 8009444:	2d0c      	cmp	r5, #12
 8009446:	bf38      	it	cc
 8009448:	250c      	movcc	r5, #12
 800944a:	2d00      	cmp	r5, #0
 800944c:	4606      	mov	r6, r0
 800944e:	db01      	blt.n	8009454 <_malloc_r+0x1c>
 8009450:	42a9      	cmp	r1, r5
 8009452:	d904      	bls.n	800945e <_malloc_r+0x26>
 8009454:	230c      	movs	r3, #12
 8009456:	6033      	str	r3, [r6, #0]
 8009458:	2000      	movs	r0, #0
 800945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009534 <_malloc_r+0xfc>
 8009462:	f000 f869 	bl	8009538 <__malloc_lock>
 8009466:	f8d8 3000 	ldr.w	r3, [r8]
 800946a:	461c      	mov	r4, r3
 800946c:	bb44      	cbnz	r4, 80094c0 <_malloc_r+0x88>
 800946e:	4629      	mov	r1, r5
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ffbf 	bl	80093f4 <sbrk_aligned>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	4604      	mov	r4, r0
 800947a:	d158      	bne.n	800952e <_malloc_r+0xf6>
 800947c:	f8d8 4000 	ldr.w	r4, [r8]
 8009480:	4627      	mov	r7, r4
 8009482:	2f00      	cmp	r7, #0
 8009484:	d143      	bne.n	800950e <_malloc_r+0xd6>
 8009486:	2c00      	cmp	r4, #0
 8009488:	d04b      	beq.n	8009522 <_malloc_r+0xea>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	4639      	mov	r1, r7
 800948e:	4630      	mov	r0, r6
 8009490:	eb04 0903 	add.w	r9, r4, r3
 8009494:	f000 fca0 	bl	8009dd8 <_sbrk_r>
 8009498:	4581      	cmp	r9, r0
 800949a:	d142      	bne.n	8009522 <_malloc_r+0xea>
 800949c:	6821      	ldr	r1, [r4, #0]
 800949e:	1a6d      	subs	r5, r5, r1
 80094a0:	4629      	mov	r1, r5
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff ffa6 	bl	80093f4 <sbrk_aligned>
 80094a8:	3001      	adds	r0, #1
 80094aa:	d03a      	beq.n	8009522 <_malloc_r+0xea>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	442b      	add	r3, r5
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	f8d8 3000 	ldr.w	r3, [r8]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	bb62      	cbnz	r2, 8009514 <_malloc_r+0xdc>
 80094ba:	f8c8 7000 	str.w	r7, [r8]
 80094be:	e00f      	b.n	80094e0 <_malloc_r+0xa8>
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	1b52      	subs	r2, r2, r5
 80094c4:	d420      	bmi.n	8009508 <_malloc_r+0xd0>
 80094c6:	2a0b      	cmp	r2, #11
 80094c8:	d917      	bls.n	80094fa <_malloc_r+0xc2>
 80094ca:	1961      	adds	r1, r4, r5
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	6025      	str	r5, [r4, #0]
 80094d0:	bf18      	it	ne
 80094d2:	6059      	strne	r1, [r3, #4]
 80094d4:	6863      	ldr	r3, [r4, #4]
 80094d6:	bf08      	it	eq
 80094d8:	f8c8 1000 	streq.w	r1, [r8]
 80094dc:	5162      	str	r2, [r4, r5]
 80094de:	604b      	str	r3, [r1, #4]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 f82f 	bl	8009544 <__malloc_unlock>
 80094e6:	f104 000b 	add.w	r0, r4, #11
 80094ea:	1d23      	adds	r3, r4, #4
 80094ec:	f020 0007 	bic.w	r0, r0, #7
 80094f0:	1ac2      	subs	r2, r0, r3
 80094f2:	bf1c      	itt	ne
 80094f4:	1a1b      	subne	r3, r3, r0
 80094f6:	50a3      	strne	r3, [r4, r2]
 80094f8:	e7af      	b.n	800945a <_malloc_r+0x22>
 80094fa:	6862      	ldr	r2, [r4, #4]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	bf0c      	ite	eq
 8009500:	f8c8 2000 	streq.w	r2, [r8]
 8009504:	605a      	strne	r2, [r3, #4]
 8009506:	e7eb      	b.n	80094e0 <_malloc_r+0xa8>
 8009508:	4623      	mov	r3, r4
 800950a:	6864      	ldr	r4, [r4, #4]
 800950c:	e7ae      	b.n	800946c <_malloc_r+0x34>
 800950e:	463c      	mov	r4, r7
 8009510:	687f      	ldr	r7, [r7, #4]
 8009512:	e7b6      	b.n	8009482 <_malloc_r+0x4a>
 8009514:	461a      	mov	r2, r3
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	42a3      	cmp	r3, r4
 800951a:	d1fb      	bne.n	8009514 <_malloc_r+0xdc>
 800951c:	2300      	movs	r3, #0
 800951e:	6053      	str	r3, [r2, #4]
 8009520:	e7de      	b.n	80094e0 <_malloc_r+0xa8>
 8009522:	230c      	movs	r3, #12
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	4630      	mov	r0, r6
 8009528:	f000 f80c 	bl	8009544 <__malloc_unlock>
 800952c:	e794      	b.n	8009458 <_malloc_r+0x20>
 800952e:	6005      	str	r5, [r0, #0]
 8009530:	e7d6      	b.n	80094e0 <_malloc_r+0xa8>
 8009532:	bf00      	nop
 8009534:	20000828 	.word	0x20000828

08009538 <__malloc_lock>:
 8009538:	4801      	ldr	r0, [pc, #4]	@ (8009540 <__malloc_lock+0x8>)
 800953a:	f7ff bf00 	b.w	800933e <__retarget_lock_acquire_recursive>
 800953e:	bf00      	nop
 8009540:	20000820 	.word	0x20000820

08009544 <__malloc_unlock>:
 8009544:	4801      	ldr	r0, [pc, #4]	@ (800954c <__malloc_unlock+0x8>)
 8009546:	f7ff befb 	b.w	8009340 <__retarget_lock_release_recursive>
 800954a:	bf00      	nop
 800954c:	20000820 	.word	0x20000820

08009550 <__sfputc_r>:
 8009550:	6893      	ldr	r3, [r2, #8]
 8009552:	3b01      	subs	r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	b410      	push	{r4}
 8009558:	6093      	str	r3, [r2, #8]
 800955a:	da08      	bge.n	800956e <__sfputc_r+0x1e>
 800955c:	6994      	ldr	r4, [r2, #24]
 800955e:	42a3      	cmp	r3, r4
 8009560:	db01      	blt.n	8009566 <__sfputc_r+0x16>
 8009562:	290a      	cmp	r1, #10
 8009564:	d103      	bne.n	800956e <__sfputc_r+0x1e>
 8009566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800956a:	f000 bba1 	b.w	8009cb0 <__swbuf_r>
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	1c58      	adds	r0, r3, #1
 8009572:	6010      	str	r0, [r2, #0]
 8009574:	7019      	strb	r1, [r3, #0]
 8009576:	4608      	mov	r0, r1
 8009578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800957c:	4770      	bx	lr

0800957e <__sfputs_r>:
 800957e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	4614      	mov	r4, r2
 8009586:	18d5      	adds	r5, r2, r3
 8009588:	42ac      	cmp	r4, r5
 800958a:	d101      	bne.n	8009590 <__sfputs_r+0x12>
 800958c:	2000      	movs	r0, #0
 800958e:	e007      	b.n	80095a0 <__sfputs_r+0x22>
 8009590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009594:	463a      	mov	r2, r7
 8009596:	4630      	mov	r0, r6
 8009598:	f7ff ffda 	bl	8009550 <__sfputc_r>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d1f3      	bne.n	8009588 <__sfputs_r+0xa>
 80095a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095a4 <_vfiprintf_r>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	460d      	mov	r5, r1
 80095aa:	b09d      	sub	sp, #116	@ 0x74
 80095ac:	4614      	mov	r4, r2
 80095ae:	4698      	mov	r8, r3
 80095b0:	4606      	mov	r6, r0
 80095b2:	b118      	cbz	r0, 80095bc <_vfiprintf_r+0x18>
 80095b4:	6a03      	ldr	r3, [r0, #32]
 80095b6:	b90b      	cbnz	r3, 80095bc <_vfiprintf_r+0x18>
 80095b8:	f7ff fdb4 	bl	8009124 <__sinit>
 80095bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095be:	07d9      	lsls	r1, r3, #31
 80095c0:	d405      	bmi.n	80095ce <_vfiprintf_r+0x2a>
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	059a      	lsls	r2, r3, #22
 80095c6:	d402      	bmi.n	80095ce <_vfiprintf_r+0x2a>
 80095c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ca:	f7ff feb8 	bl	800933e <__retarget_lock_acquire_recursive>
 80095ce:	89ab      	ldrh	r3, [r5, #12]
 80095d0:	071b      	lsls	r3, r3, #28
 80095d2:	d501      	bpl.n	80095d8 <_vfiprintf_r+0x34>
 80095d4:	692b      	ldr	r3, [r5, #16]
 80095d6:	b99b      	cbnz	r3, 8009600 <_vfiprintf_r+0x5c>
 80095d8:	4629      	mov	r1, r5
 80095da:	4630      	mov	r0, r6
 80095dc:	f000 fba6 	bl	8009d2c <__swsetup_r>
 80095e0:	b170      	cbz	r0, 8009600 <_vfiprintf_r+0x5c>
 80095e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095e4:	07dc      	lsls	r4, r3, #31
 80095e6:	d504      	bpl.n	80095f2 <_vfiprintf_r+0x4e>
 80095e8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ec:	b01d      	add	sp, #116	@ 0x74
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	0598      	lsls	r0, r3, #22
 80095f6:	d4f7      	bmi.n	80095e8 <_vfiprintf_r+0x44>
 80095f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095fa:	f7ff fea1 	bl	8009340 <__retarget_lock_release_recursive>
 80095fe:	e7f3      	b.n	80095e8 <_vfiprintf_r+0x44>
 8009600:	2300      	movs	r3, #0
 8009602:	9309      	str	r3, [sp, #36]	@ 0x24
 8009604:	2320      	movs	r3, #32
 8009606:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800960a:	f8cd 800c 	str.w	r8, [sp, #12]
 800960e:	2330      	movs	r3, #48	@ 0x30
 8009610:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80097c0 <_vfiprintf_r+0x21c>
 8009614:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009618:	f04f 0901 	mov.w	r9, #1
 800961c:	4623      	mov	r3, r4
 800961e:	469a      	mov	sl, r3
 8009620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009624:	b10a      	cbz	r2, 800962a <_vfiprintf_r+0x86>
 8009626:	2a25      	cmp	r2, #37	@ 0x25
 8009628:	d1f9      	bne.n	800961e <_vfiprintf_r+0x7a>
 800962a:	ebba 0b04 	subs.w	fp, sl, r4
 800962e:	d00b      	beq.n	8009648 <_vfiprintf_r+0xa4>
 8009630:	465b      	mov	r3, fp
 8009632:	4622      	mov	r2, r4
 8009634:	4629      	mov	r1, r5
 8009636:	4630      	mov	r0, r6
 8009638:	f7ff ffa1 	bl	800957e <__sfputs_r>
 800963c:	3001      	adds	r0, #1
 800963e:	f000 80a7 	beq.w	8009790 <_vfiprintf_r+0x1ec>
 8009642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009644:	445a      	add	r2, fp
 8009646:	9209      	str	r2, [sp, #36]	@ 0x24
 8009648:	f89a 3000 	ldrb.w	r3, [sl]
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 809f 	beq.w	8009790 <_vfiprintf_r+0x1ec>
 8009652:	2300      	movs	r3, #0
 8009654:	f04f 32ff 	mov.w	r2, #4294967295
 8009658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800965c:	f10a 0a01 	add.w	sl, sl, #1
 8009660:	9304      	str	r3, [sp, #16]
 8009662:	9307      	str	r3, [sp, #28]
 8009664:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009668:	931a      	str	r3, [sp, #104]	@ 0x68
 800966a:	4654      	mov	r4, sl
 800966c:	2205      	movs	r2, #5
 800966e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009672:	4853      	ldr	r0, [pc, #332]	@ (80097c0 <_vfiprintf_r+0x21c>)
 8009674:	f7f6 fd8c 	bl	8000190 <memchr>
 8009678:	9a04      	ldr	r2, [sp, #16]
 800967a:	b9d8      	cbnz	r0, 80096b4 <_vfiprintf_r+0x110>
 800967c:	06d1      	lsls	r1, r2, #27
 800967e:	bf44      	itt	mi
 8009680:	2320      	movmi	r3, #32
 8009682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009686:	0713      	lsls	r3, r2, #28
 8009688:	bf44      	itt	mi
 800968a:	232b      	movmi	r3, #43	@ 0x2b
 800968c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009690:	f89a 3000 	ldrb.w	r3, [sl]
 8009694:	2b2a      	cmp	r3, #42	@ 0x2a
 8009696:	d015      	beq.n	80096c4 <_vfiprintf_r+0x120>
 8009698:	9a07      	ldr	r2, [sp, #28]
 800969a:	4654      	mov	r4, sl
 800969c:	2000      	movs	r0, #0
 800969e:	f04f 0c0a 	mov.w	ip, #10
 80096a2:	4621      	mov	r1, r4
 80096a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a8:	3b30      	subs	r3, #48	@ 0x30
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d94b      	bls.n	8009746 <_vfiprintf_r+0x1a2>
 80096ae:	b1b0      	cbz	r0, 80096de <_vfiprintf_r+0x13a>
 80096b0:	9207      	str	r2, [sp, #28]
 80096b2:	e014      	b.n	80096de <_vfiprintf_r+0x13a>
 80096b4:	eba0 0308 	sub.w	r3, r0, r8
 80096b8:	fa09 f303 	lsl.w	r3, r9, r3
 80096bc:	4313      	orrs	r3, r2
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	46a2      	mov	sl, r4
 80096c2:	e7d2      	b.n	800966a <_vfiprintf_r+0xc6>
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	1d19      	adds	r1, r3, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	9103      	str	r1, [sp, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bfbb      	ittet	lt
 80096d0:	425b      	neglt	r3, r3
 80096d2:	f042 0202 	orrlt.w	r2, r2, #2
 80096d6:	9307      	strge	r3, [sp, #28]
 80096d8:	9307      	strlt	r3, [sp, #28]
 80096da:	bfb8      	it	lt
 80096dc:	9204      	strlt	r2, [sp, #16]
 80096de:	7823      	ldrb	r3, [r4, #0]
 80096e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80096e2:	d10a      	bne.n	80096fa <_vfiprintf_r+0x156>
 80096e4:	7863      	ldrb	r3, [r4, #1]
 80096e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e8:	d132      	bne.n	8009750 <_vfiprintf_r+0x1ac>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	1d1a      	adds	r2, r3, #4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	9203      	str	r2, [sp, #12]
 80096f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096f6:	3402      	adds	r4, #2
 80096f8:	9305      	str	r3, [sp, #20]
 80096fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097d0 <_vfiprintf_r+0x22c>
 80096fe:	7821      	ldrb	r1, [r4, #0]
 8009700:	2203      	movs	r2, #3
 8009702:	4650      	mov	r0, sl
 8009704:	f7f6 fd44 	bl	8000190 <memchr>
 8009708:	b138      	cbz	r0, 800971a <_vfiprintf_r+0x176>
 800970a:	9b04      	ldr	r3, [sp, #16]
 800970c:	eba0 000a 	sub.w	r0, r0, sl
 8009710:	2240      	movs	r2, #64	@ 0x40
 8009712:	4082      	lsls	r2, r0
 8009714:	4313      	orrs	r3, r2
 8009716:	3401      	adds	r4, #1
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971e:	4829      	ldr	r0, [pc, #164]	@ (80097c4 <_vfiprintf_r+0x220>)
 8009720:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009724:	2206      	movs	r2, #6
 8009726:	f7f6 fd33 	bl	8000190 <memchr>
 800972a:	2800      	cmp	r0, #0
 800972c:	d03f      	beq.n	80097ae <_vfiprintf_r+0x20a>
 800972e:	4b26      	ldr	r3, [pc, #152]	@ (80097c8 <_vfiprintf_r+0x224>)
 8009730:	bb1b      	cbnz	r3, 800977a <_vfiprintf_r+0x1d6>
 8009732:	9b03      	ldr	r3, [sp, #12]
 8009734:	3307      	adds	r3, #7
 8009736:	f023 0307 	bic.w	r3, r3, #7
 800973a:	3308      	adds	r3, #8
 800973c:	9303      	str	r3, [sp, #12]
 800973e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009740:	443b      	add	r3, r7
 8009742:	9309      	str	r3, [sp, #36]	@ 0x24
 8009744:	e76a      	b.n	800961c <_vfiprintf_r+0x78>
 8009746:	fb0c 3202 	mla	r2, ip, r2, r3
 800974a:	460c      	mov	r4, r1
 800974c:	2001      	movs	r0, #1
 800974e:	e7a8      	b.n	80096a2 <_vfiprintf_r+0xfe>
 8009750:	2300      	movs	r3, #0
 8009752:	3401      	adds	r4, #1
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	4619      	mov	r1, r3
 8009758:	f04f 0c0a 	mov.w	ip, #10
 800975c:	4620      	mov	r0, r4
 800975e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009762:	3a30      	subs	r2, #48	@ 0x30
 8009764:	2a09      	cmp	r2, #9
 8009766:	d903      	bls.n	8009770 <_vfiprintf_r+0x1cc>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0c6      	beq.n	80096fa <_vfiprintf_r+0x156>
 800976c:	9105      	str	r1, [sp, #20]
 800976e:	e7c4      	b.n	80096fa <_vfiprintf_r+0x156>
 8009770:	fb0c 2101 	mla	r1, ip, r1, r2
 8009774:	4604      	mov	r4, r0
 8009776:	2301      	movs	r3, #1
 8009778:	e7f0      	b.n	800975c <_vfiprintf_r+0x1b8>
 800977a:	ab03      	add	r3, sp, #12
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	462a      	mov	r2, r5
 8009780:	4b12      	ldr	r3, [pc, #72]	@ (80097cc <_vfiprintf_r+0x228>)
 8009782:	a904      	add	r1, sp, #16
 8009784:	4630      	mov	r0, r6
 8009786:	f3af 8000 	nop.w
 800978a:	4607      	mov	r7, r0
 800978c:	1c78      	adds	r0, r7, #1
 800978e:	d1d6      	bne.n	800973e <_vfiprintf_r+0x19a>
 8009790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009792:	07d9      	lsls	r1, r3, #31
 8009794:	d405      	bmi.n	80097a2 <_vfiprintf_r+0x1fe>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	059a      	lsls	r2, r3, #22
 800979a:	d402      	bmi.n	80097a2 <_vfiprintf_r+0x1fe>
 800979c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800979e:	f7ff fdcf 	bl	8009340 <__retarget_lock_release_recursive>
 80097a2:	89ab      	ldrh	r3, [r5, #12]
 80097a4:	065b      	lsls	r3, r3, #25
 80097a6:	f53f af1f 	bmi.w	80095e8 <_vfiprintf_r+0x44>
 80097aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097ac:	e71e      	b.n	80095ec <_vfiprintf_r+0x48>
 80097ae:	ab03      	add	r3, sp, #12
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	462a      	mov	r2, r5
 80097b4:	4b05      	ldr	r3, [pc, #20]	@ (80097cc <_vfiprintf_r+0x228>)
 80097b6:	a904      	add	r1, sp, #16
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 f879 	bl	80098b0 <_printf_i>
 80097be:	e7e4      	b.n	800978a <_vfiprintf_r+0x1e6>
 80097c0:	0800a214 	.word	0x0800a214
 80097c4:	0800a21e 	.word	0x0800a21e
 80097c8:	00000000 	.word	0x00000000
 80097cc:	0800957f 	.word	0x0800957f
 80097d0:	0800a21a 	.word	0x0800a21a

080097d4 <_printf_common>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	4616      	mov	r6, r2
 80097da:	4698      	mov	r8, r3
 80097dc:	688a      	ldr	r2, [r1, #8]
 80097de:	690b      	ldr	r3, [r1, #16]
 80097e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	bfb8      	it	lt
 80097e8:	4613      	movlt	r3, r2
 80097ea:	6033      	str	r3, [r6, #0]
 80097ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097f0:	4607      	mov	r7, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	b10a      	cbz	r2, 80097fa <_printf_common+0x26>
 80097f6:	3301      	adds	r3, #1
 80097f8:	6033      	str	r3, [r6, #0]
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	0699      	lsls	r1, r3, #26
 80097fe:	bf42      	ittt	mi
 8009800:	6833      	ldrmi	r3, [r6, #0]
 8009802:	3302      	addmi	r3, #2
 8009804:	6033      	strmi	r3, [r6, #0]
 8009806:	6825      	ldr	r5, [r4, #0]
 8009808:	f015 0506 	ands.w	r5, r5, #6
 800980c:	d106      	bne.n	800981c <_printf_common+0x48>
 800980e:	f104 0a19 	add.w	sl, r4, #25
 8009812:	68e3      	ldr	r3, [r4, #12]
 8009814:	6832      	ldr	r2, [r6, #0]
 8009816:	1a9b      	subs	r3, r3, r2
 8009818:	42ab      	cmp	r3, r5
 800981a:	dc26      	bgt.n	800986a <_printf_common+0x96>
 800981c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	3b00      	subs	r3, #0
 8009824:	bf18      	it	ne
 8009826:	2301      	movne	r3, #1
 8009828:	0692      	lsls	r2, r2, #26
 800982a:	d42b      	bmi.n	8009884 <_printf_common+0xb0>
 800982c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009830:	4641      	mov	r1, r8
 8009832:	4638      	mov	r0, r7
 8009834:	47c8      	blx	r9
 8009836:	3001      	adds	r0, #1
 8009838:	d01e      	beq.n	8009878 <_printf_common+0xa4>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	6922      	ldr	r2, [r4, #16]
 800983e:	f003 0306 	and.w	r3, r3, #6
 8009842:	2b04      	cmp	r3, #4
 8009844:	bf02      	ittt	eq
 8009846:	68e5      	ldreq	r5, [r4, #12]
 8009848:	6833      	ldreq	r3, [r6, #0]
 800984a:	1aed      	subeq	r5, r5, r3
 800984c:	68a3      	ldr	r3, [r4, #8]
 800984e:	bf0c      	ite	eq
 8009850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009854:	2500      	movne	r5, #0
 8009856:	4293      	cmp	r3, r2
 8009858:	bfc4      	itt	gt
 800985a:	1a9b      	subgt	r3, r3, r2
 800985c:	18ed      	addgt	r5, r5, r3
 800985e:	2600      	movs	r6, #0
 8009860:	341a      	adds	r4, #26
 8009862:	42b5      	cmp	r5, r6
 8009864:	d11a      	bne.n	800989c <_printf_common+0xc8>
 8009866:	2000      	movs	r0, #0
 8009868:	e008      	b.n	800987c <_printf_common+0xa8>
 800986a:	2301      	movs	r3, #1
 800986c:	4652      	mov	r2, sl
 800986e:	4641      	mov	r1, r8
 8009870:	4638      	mov	r0, r7
 8009872:	47c8      	blx	r9
 8009874:	3001      	adds	r0, #1
 8009876:	d103      	bne.n	8009880 <_printf_common+0xac>
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	3501      	adds	r5, #1
 8009882:	e7c6      	b.n	8009812 <_printf_common+0x3e>
 8009884:	18e1      	adds	r1, r4, r3
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	2030      	movs	r0, #48	@ 0x30
 800988a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800988e:	4422      	add	r2, r4
 8009890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009898:	3302      	adds	r3, #2
 800989a:	e7c7      	b.n	800982c <_printf_common+0x58>
 800989c:	2301      	movs	r3, #1
 800989e:	4622      	mov	r2, r4
 80098a0:	4641      	mov	r1, r8
 80098a2:	4638      	mov	r0, r7
 80098a4:	47c8      	blx	r9
 80098a6:	3001      	adds	r0, #1
 80098a8:	d0e6      	beq.n	8009878 <_printf_common+0xa4>
 80098aa:	3601      	adds	r6, #1
 80098ac:	e7d9      	b.n	8009862 <_printf_common+0x8e>
	...

080098b0 <_printf_i>:
 80098b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	7e0f      	ldrb	r7, [r1, #24]
 80098b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098b8:	2f78      	cmp	r7, #120	@ 0x78
 80098ba:	4691      	mov	r9, r2
 80098bc:	4680      	mov	r8, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	469a      	mov	sl, r3
 80098c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098c6:	d807      	bhi.n	80098d8 <_printf_i+0x28>
 80098c8:	2f62      	cmp	r7, #98	@ 0x62
 80098ca:	d80a      	bhi.n	80098e2 <_printf_i+0x32>
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	f000 80d2 	beq.w	8009a76 <_printf_i+0x1c6>
 80098d2:	2f58      	cmp	r7, #88	@ 0x58
 80098d4:	f000 80b9 	beq.w	8009a4a <_printf_i+0x19a>
 80098d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098e0:	e03a      	b.n	8009958 <_printf_i+0xa8>
 80098e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098e6:	2b15      	cmp	r3, #21
 80098e8:	d8f6      	bhi.n	80098d8 <_printf_i+0x28>
 80098ea:	a101      	add	r1, pc, #4	@ (adr r1, 80098f0 <_printf_i+0x40>)
 80098ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098f0:	08009949 	.word	0x08009949
 80098f4:	0800995d 	.word	0x0800995d
 80098f8:	080098d9 	.word	0x080098d9
 80098fc:	080098d9 	.word	0x080098d9
 8009900:	080098d9 	.word	0x080098d9
 8009904:	080098d9 	.word	0x080098d9
 8009908:	0800995d 	.word	0x0800995d
 800990c:	080098d9 	.word	0x080098d9
 8009910:	080098d9 	.word	0x080098d9
 8009914:	080098d9 	.word	0x080098d9
 8009918:	080098d9 	.word	0x080098d9
 800991c:	08009a5d 	.word	0x08009a5d
 8009920:	08009987 	.word	0x08009987
 8009924:	08009a17 	.word	0x08009a17
 8009928:	080098d9 	.word	0x080098d9
 800992c:	080098d9 	.word	0x080098d9
 8009930:	08009a7f 	.word	0x08009a7f
 8009934:	080098d9 	.word	0x080098d9
 8009938:	08009987 	.word	0x08009987
 800993c:	080098d9 	.word	0x080098d9
 8009940:	080098d9 	.word	0x080098d9
 8009944:	08009a1f 	.word	0x08009a1f
 8009948:	6833      	ldr	r3, [r6, #0]
 800994a:	1d1a      	adds	r2, r3, #4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6032      	str	r2, [r6, #0]
 8009950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009958:	2301      	movs	r3, #1
 800995a:	e09d      	b.n	8009a98 <_printf_i+0x1e8>
 800995c:	6833      	ldr	r3, [r6, #0]
 800995e:	6820      	ldr	r0, [r4, #0]
 8009960:	1d19      	adds	r1, r3, #4
 8009962:	6031      	str	r1, [r6, #0]
 8009964:	0606      	lsls	r6, r0, #24
 8009966:	d501      	bpl.n	800996c <_printf_i+0xbc>
 8009968:	681d      	ldr	r5, [r3, #0]
 800996a:	e003      	b.n	8009974 <_printf_i+0xc4>
 800996c:	0645      	lsls	r5, r0, #25
 800996e:	d5fb      	bpl.n	8009968 <_printf_i+0xb8>
 8009970:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009974:	2d00      	cmp	r5, #0
 8009976:	da03      	bge.n	8009980 <_printf_i+0xd0>
 8009978:	232d      	movs	r3, #45	@ 0x2d
 800997a:	426d      	negs	r5, r5
 800997c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009980:	4859      	ldr	r0, [pc, #356]	@ (8009ae8 <_printf_i+0x238>)
 8009982:	230a      	movs	r3, #10
 8009984:	e011      	b.n	80099aa <_printf_i+0xfa>
 8009986:	6821      	ldr	r1, [r4, #0]
 8009988:	6833      	ldr	r3, [r6, #0]
 800998a:	0608      	lsls	r0, r1, #24
 800998c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009990:	d402      	bmi.n	8009998 <_printf_i+0xe8>
 8009992:	0649      	lsls	r1, r1, #25
 8009994:	bf48      	it	mi
 8009996:	b2ad      	uxthmi	r5, r5
 8009998:	2f6f      	cmp	r7, #111	@ 0x6f
 800999a:	4853      	ldr	r0, [pc, #332]	@ (8009ae8 <_printf_i+0x238>)
 800999c:	6033      	str	r3, [r6, #0]
 800999e:	bf14      	ite	ne
 80099a0:	230a      	movne	r3, #10
 80099a2:	2308      	moveq	r3, #8
 80099a4:	2100      	movs	r1, #0
 80099a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099aa:	6866      	ldr	r6, [r4, #4]
 80099ac:	60a6      	str	r6, [r4, #8]
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	bfa2      	ittt	ge
 80099b2:	6821      	ldrge	r1, [r4, #0]
 80099b4:	f021 0104 	bicge.w	r1, r1, #4
 80099b8:	6021      	strge	r1, [r4, #0]
 80099ba:	b90d      	cbnz	r5, 80099c0 <_printf_i+0x110>
 80099bc:	2e00      	cmp	r6, #0
 80099be:	d04b      	beq.n	8009a58 <_printf_i+0x1a8>
 80099c0:	4616      	mov	r6, r2
 80099c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80099c6:	fb03 5711 	mls	r7, r3, r1, r5
 80099ca:	5dc7      	ldrb	r7, [r0, r7]
 80099cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099d0:	462f      	mov	r7, r5
 80099d2:	42bb      	cmp	r3, r7
 80099d4:	460d      	mov	r5, r1
 80099d6:	d9f4      	bls.n	80099c2 <_printf_i+0x112>
 80099d8:	2b08      	cmp	r3, #8
 80099da:	d10b      	bne.n	80099f4 <_printf_i+0x144>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	07df      	lsls	r7, r3, #31
 80099e0:	d508      	bpl.n	80099f4 <_printf_i+0x144>
 80099e2:	6923      	ldr	r3, [r4, #16]
 80099e4:	6861      	ldr	r1, [r4, #4]
 80099e6:	4299      	cmp	r1, r3
 80099e8:	bfde      	ittt	le
 80099ea:	2330      	movle	r3, #48	@ 0x30
 80099ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099f4:	1b92      	subs	r2, r2, r6
 80099f6:	6122      	str	r2, [r4, #16]
 80099f8:	f8cd a000 	str.w	sl, [sp]
 80099fc:	464b      	mov	r3, r9
 80099fe:	aa03      	add	r2, sp, #12
 8009a00:	4621      	mov	r1, r4
 8009a02:	4640      	mov	r0, r8
 8009a04:	f7ff fee6 	bl	80097d4 <_printf_common>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d14a      	bne.n	8009aa2 <_printf_i+0x1f2>
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	b004      	add	sp, #16
 8009a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	f043 0320 	orr.w	r3, r3, #32
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	4833      	ldr	r0, [pc, #204]	@ (8009aec <_printf_i+0x23c>)
 8009a20:	2778      	movs	r7, #120	@ 0x78
 8009a22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	6831      	ldr	r1, [r6, #0]
 8009a2a:	061f      	lsls	r7, r3, #24
 8009a2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a30:	d402      	bmi.n	8009a38 <_printf_i+0x188>
 8009a32:	065f      	lsls	r7, r3, #25
 8009a34:	bf48      	it	mi
 8009a36:	b2ad      	uxthmi	r5, r5
 8009a38:	6031      	str	r1, [r6, #0]
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	bf44      	itt	mi
 8009a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a42:	6023      	strmi	r3, [r4, #0]
 8009a44:	b11d      	cbz	r5, 8009a4e <_printf_i+0x19e>
 8009a46:	2310      	movs	r3, #16
 8009a48:	e7ac      	b.n	80099a4 <_printf_i+0xf4>
 8009a4a:	4827      	ldr	r0, [pc, #156]	@ (8009ae8 <_printf_i+0x238>)
 8009a4c:	e7e9      	b.n	8009a22 <_printf_i+0x172>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	f023 0320 	bic.w	r3, r3, #32
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	e7f6      	b.n	8009a46 <_printf_i+0x196>
 8009a58:	4616      	mov	r6, r2
 8009a5a:	e7bd      	b.n	80099d8 <_printf_i+0x128>
 8009a5c:	6833      	ldr	r3, [r6, #0]
 8009a5e:	6825      	ldr	r5, [r4, #0]
 8009a60:	6961      	ldr	r1, [r4, #20]
 8009a62:	1d18      	adds	r0, r3, #4
 8009a64:	6030      	str	r0, [r6, #0]
 8009a66:	062e      	lsls	r6, r5, #24
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	d501      	bpl.n	8009a70 <_printf_i+0x1c0>
 8009a6c:	6019      	str	r1, [r3, #0]
 8009a6e:	e002      	b.n	8009a76 <_printf_i+0x1c6>
 8009a70:	0668      	lsls	r0, r5, #25
 8009a72:	d5fb      	bpl.n	8009a6c <_printf_i+0x1bc>
 8009a74:	8019      	strh	r1, [r3, #0]
 8009a76:	2300      	movs	r3, #0
 8009a78:	6123      	str	r3, [r4, #16]
 8009a7a:	4616      	mov	r6, r2
 8009a7c:	e7bc      	b.n	80099f8 <_printf_i+0x148>
 8009a7e:	6833      	ldr	r3, [r6, #0]
 8009a80:	1d1a      	adds	r2, r3, #4
 8009a82:	6032      	str	r2, [r6, #0]
 8009a84:	681e      	ldr	r6, [r3, #0]
 8009a86:	6862      	ldr	r2, [r4, #4]
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f7f6 fb80 	bl	8000190 <memchr>
 8009a90:	b108      	cbz	r0, 8009a96 <_printf_i+0x1e6>
 8009a92:	1b80      	subs	r0, r0, r6
 8009a94:	6060      	str	r0, [r4, #4]
 8009a96:	6863      	ldr	r3, [r4, #4]
 8009a98:	6123      	str	r3, [r4, #16]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aa0:	e7aa      	b.n	80099f8 <_printf_i+0x148>
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	47d0      	blx	sl
 8009aac:	3001      	adds	r0, #1
 8009aae:	d0ad      	beq.n	8009a0c <_printf_i+0x15c>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	079b      	lsls	r3, r3, #30
 8009ab4:	d413      	bmi.n	8009ade <_printf_i+0x22e>
 8009ab6:	68e0      	ldr	r0, [r4, #12]
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	4298      	cmp	r0, r3
 8009abc:	bfb8      	it	lt
 8009abe:	4618      	movlt	r0, r3
 8009ac0:	e7a6      	b.n	8009a10 <_printf_i+0x160>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	4640      	mov	r0, r8
 8009aca:	47d0      	blx	sl
 8009acc:	3001      	adds	r0, #1
 8009ace:	d09d      	beq.n	8009a0c <_printf_i+0x15c>
 8009ad0:	3501      	adds	r5, #1
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	9903      	ldr	r1, [sp, #12]
 8009ad6:	1a5b      	subs	r3, r3, r1
 8009ad8:	42ab      	cmp	r3, r5
 8009ada:	dcf2      	bgt.n	8009ac2 <_printf_i+0x212>
 8009adc:	e7eb      	b.n	8009ab6 <_printf_i+0x206>
 8009ade:	2500      	movs	r5, #0
 8009ae0:	f104 0619 	add.w	r6, r4, #25
 8009ae4:	e7f5      	b.n	8009ad2 <_printf_i+0x222>
 8009ae6:	bf00      	nop
 8009ae8:	0800a225 	.word	0x0800a225
 8009aec:	0800a236 	.word	0x0800a236

08009af0 <__sflush_r>:
 8009af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af8:	0716      	lsls	r6, r2, #28
 8009afa:	4605      	mov	r5, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	d454      	bmi.n	8009baa <__sflush_r+0xba>
 8009b00:	684b      	ldr	r3, [r1, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dc02      	bgt.n	8009b0c <__sflush_r+0x1c>
 8009b06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dd48      	ble.n	8009b9e <__sflush_r+0xae>
 8009b0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b0e:	2e00      	cmp	r6, #0
 8009b10:	d045      	beq.n	8009b9e <__sflush_r+0xae>
 8009b12:	2300      	movs	r3, #0
 8009b14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b18:	682f      	ldr	r7, [r5, #0]
 8009b1a:	6a21      	ldr	r1, [r4, #32]
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	d030      	beq.n	8009b82 <__sflush_r+0x92>
 8009b20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	0759      	lsls	r1, r3, #29
 8009b26:	d505      	bpl.n	8009b34 <__sflush_r+0x44>
 8009b28:	6863      	ldr	r3, [r4, #4]
 8009b2a:	1ad2      	subs	r2, r2, r3
 8009b2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b2e:	b10b      	cbz	r3, 8009b34 <__sflush_r+0x44>
 8009b30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b32:	1ad2      	subs	r2, r2, r3
 8009b34:	2300      	movs	r3, #0
 8009b36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b38:	6a21      	ldr	r1, [r4, #32]
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	47b0      	blx	r6
 8009b3e:	1c43      	adds	r3, r0, #1
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	d106      	bne.n	8009b52 <__sflush_r+0x62>
 8009b44:	6829      	ldr	r1, [r5, #0]
 8009b46:	291d      	cmp	r1, #29
 8009b48:	d82b      	bhi.n	8009ba2 <__sflush_r+0xb2>
 8009b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8009bf4 <__sflush_r+0x104>)
 8009b4c:	410a      	asrs	r2, r1
 8009b4e:	07d6      	lsls	r6, r2, #31
 8009b50:	d427      	bmi.n	8009ba2 <__sflush_r+0xb2>
 8009b52:	2200      	movs	r2, #0
 8009b54:	6062      	str	r2, [r4, #4]
 8009b56:	04d9      	lsls	r1, r3, #19
 8009b58:	6922      	ldr	r2, [r4, #16]
 8009b5a:	6022      	str	r2, [r4, #0]
 8009b5c:	d504      	bpl.n	8009b68 <__sflush_r+0x78>
 8009b5e:	1c42      	adds	r2, r0, #1
 8009b60:	d101      	bne.n	8009b66 <__sflush_r+0x76>
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	b903      	cbnz	r3, 8009b68 <__sflush_r+0x78>
 8009b66:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b6a:	602f      	str	r7, [r5, #0]
 8009b6c:	b1b9      	cbz	r1, 8009b9e <__sflush_r+0xae>
 8009b6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b72:	4299      	cmp	r1, r3
 8009b74:	d002      	beq.n	8009b7c <__sflush_r+0x8c>
 8009b76:	4628      	mov	r0, r5
 8009b78:	f7ff fbf2 	bl	8009360 <_free_r>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b80:	e00d      	b.n	8009b9e <__sflush_r+0xae>
 8009b82:	2301      	movs	r3, #1
 8009b84:	4628      	mov	r0, r5
 8009b86:	47b0      	blx	r6
 8009b88:	4602      	mov	r2, r0
 8009b8a:	1c50      	adds	r0, r2, #1
 8009b8c:	d1c9      	bne.n	8009b22 <__sflush_r+0x32>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0c6      	beq.n	8009b22 <__sflush_r+0x32>
 8009b94:	2b1d      	cmp	r3, #29
 8009b96:	d001      	beq.n	8009b9c <__sflush_r+0xac>
 8009b98:	2b16      	cmp	r3, #22
 8009b9a:	d11e      	bne.n	8009bda <__sflush_r+0xea>
 8009b9c:	602f      	str	r7, [r5, #0]
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	e022      	b.n	8009be8 <__sflush_r+0xf8>
 8009ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ba6:	b21b      	sxth	r3, r3
 8009ba8:	e01b      	b.n	8009be2 <__sflush_r+0xf2>
 8009baa:	690f      	ldr	r7, [r1, #16]
 8009bac:	2f00      	cmp	r7, #0
 8009bae:	d0f6      	beq.n	8009b9e <__sflush_r+0xae>
 8009bb0:	0793      	lsls	r3, r2, #30
 8009bb2:	680e      	ldr	r6, [r1, #0]
 8009bb4:	bf08      	it	eq
 8009bb6:	694b      	ldreq	r3, [r1, #20]
 8009bb8:	600f      	str	r7, [r1, #0]
 8009bba:	bf18      	it	ne
 8009bbc:	2300      	movne	r3, #0
 8009bbe:	eba6 0807 	sub.w	r8, r6, r7
 8009bc2:	608b      	str	r3, [r1, #8]
 8009bc4:	f1b8 0f00 	cmp.w	r8, #0
 8009bc8:	dde9      	ble.n	8009b9e <__sflush_r+0xae>
 8009bca:	6a21      	ldr	r1, [r4, #32]
 8009bcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bce:	4643      	mov	r3, r8
 8009bd0:	463a      	mov	r2, r7
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b0      	blx	r6
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	dc08      	bgt.n	8009bec <__sflush_r+0xfc>
 8009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bec:	4407      	add	r7, r0
 8009bee:	eba8 0800 	sub.w	r8, r8, r0
 8009bf2:	e7e7      	b.n	8009bc4 <__sflush_r+0xd4>
 8009bf4:	dfbffffe 	.word	0xdfbffffe

08009bf8 <_fflush_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	690b      	ldr	r3, [r1, #16]
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	b913      	cbnz	r3, 8009c08 <_fflush_r+0x10>
 8009c02:	2500      	movs	r5, #0
 8009c04:	4628      	mov	r0, r5
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	b118      	cbz	r0, 8009c12 <_fflush_r+0x1a>
 8009c0a:	6a03      	ldr	r3, [r0, #32]
 8009c0c:	b90b      	cbnz	r3, 8009c12 <_fflush_r+0x1a>
 8009c0e:	f7ff fa89 	bl	8009124 <__sinit>
 8009c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0f3      	beq.n	8009c02 <_fflush_r+0xa>
 8009c1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c1c:	07d0      	lsls	r0, r2, #31
 8009c1e:	d404      	bmi.n	8009c2a <_fflush_r+0x32>
 8009c20:	0599      	lsls	r1, r3, #22
 8009c22:	d402      	bmi.n	8009c2a <_fflush_r+0x32>
 8009c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c26:	f7ff fb8a 	bl	800933e <__retarget_lock_acquire_recursive>
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	f7ff ff5f 	bl	8009af0 <__sflush_r>
 8009c32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c34:	07da      	lsls	r2, r3, #31
 8009c36:	4605      	mov	r5, r0
 8009c38:	d4e4      	bmi.n	8009c04 <_fflush_r+0xc>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	059b      	lsls	r3, r3, #22
 8009c3e:	d4e1      	bmi.n	8009c04 <_fflush_r+0xc>
 8009c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c42:	f7ff fb7d 	bl	8009340 <__retarget_lock_release_recursive>
 8009c46:	e7dd      	b.n	8009c04 <_fflush_r+0xc>

08009c48 <_putc_r>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	460d      	mov	r5, r1
 8009c4c:	4614      	mov	r4, r2
 8009c4e:	4606      	mov	r6, r0
 8009c50:	b118      	cbz	r0, 8009c5a <_putc_r+0x12>
 8009c52:	6a03      	ldr	r3, [r0, #32]
 8009c54:	b90b      	cbnz	r3, 8009c5a <_putc_r+0x12>
 8009c56:	f7ff fa65 	bl	8009124 <__sinit>
 8009c5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c5c:	07d8      	lsls	r0, r3, #31
 8009c5e:	d405      	bmi.n	8009c6c <_putc_r+0x24>
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	0599      	lsls	r1, r3, #22
 8009c64:	d402      	bmi.n	8009c6c <_putc_r+0x24>
 8009c66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c68:	f7ff fb69 	bl	800933e <__retarget_lock_acquire_recursive>
 8009c6c:	68a3      	ldr	r3, [r4, #8]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	60a3      	str	r3, [r4, #8]
 8009c74:	da05      	bge.n	8009c82 <_putc_r+0x3a>
 8009c76:	69a2      	ldr	r2, [r4, #24]
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	db12      	blt.n	8009ca2 <_putc_r+0x5a>
 8009c7c:	b2eb      	uxtb	r3, r5
 8009c7e:	2b0a      	cmp	r3, #10
 8009c80:	d00f      	beq.n	8009ca2 <_putc_r+0x5a>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	6022      	str	r2, [r4, #0]
 8009c88:	701d      	strb	r5, [r3, #0]
 8009c8a:	b2ed      	uxtb	r5, r5
 8009c8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c8e:	07da      	lsls	r2, r3, #31
 8009c90:	d405      	bmi.n	8009c9e <_putc_r+0x56>
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	059b      	lsls	r3, r3, #22
 8009c96:	d402      	bmi.n	8009c9e <_putc_r+0x56>
 8009c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c9a:	f7ff fb51 	bl	8009340 <__retarget_lock_release_recursive>
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	bd70      	pop	{r4, r5, r6, pc}
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f000 f802 	bl	8009cb0 <__swbuf_r>
 8009cac:	4605      	mov	r5, r0
 8009cae:	e7ed      	b.n	8009c8c <_putc_r+0x44>

08009cb0 <__swbuf_r>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	460e      	mov	r6, r1
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	b118      	cbz	r0, 8009cc2 <__swbuf_r+0x12>
 8009cba:	6a03      	ldr	r3, [r0, #32]
 8009cbc:	b90b      	cbnz	r3, 8009cc2 <__swbuf_r+0x12>
 8009cbe:	f7ff fa31 	bl	8009124 <__sinit>
 8009cc2:	69a3      	ldr	r3, [r4, #24]
 8009cc4:	60a3      	str	r3, [r4, #8]
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	071a      	lsls	r2, r3, #28
 8009cca:	d501      	bpl.n	8009cd0 <__swbuf_r+0x20>
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	b943      	cbnz	r3, 8009ce2 <__swbuf_r+0x32>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f000 f82a 	bl	8009d2c <__swsetup_r>
 8009cd8:	b118      	cbz	r0, 8009ce2 <__swbuf_r+0x32>
 8009cda:	f04f 37ff 	mov.w	r7, #4294967295
 8009cde:	4638      	mov	r0, r7
 8009ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	6922      	ldr	r2, [r4, #16]
 8009ce6:	1a98      	subs	r0, r3, r2
 8009ce8:	6963      	ldr	r3, [r4, #20]
 8009cea:	b2f6      	uxtb	r6, r6
 8009cec:	4283      	cmp	r3, r0
 8009cee:	4637      	mov	r7, r6
 8009cf0:	dc05      	bgt.n	8009cfe <__swbuf_r+0x4e>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f7ff ff7f 	bl	8009bf8 <_fflush_r>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d1ed      	bne.n	8009cda <__swbuf_r+0x2a>
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	60a3      	str	r3, [r4, #8]
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	6022      	str	r2, [r4, #0]
 8009d0a:	701e      	strb	r6, [r3, #0]
 8009d0c:	6962      	ldr	r2, [r4, #20]
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d004      	beq.n	8009d1e <__swbuf_r+0x6e>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	07db      	lsls	r3, r3, #31
 8009d18:	d5e1      	bpl.n	8009cde <__swbuf_r+0x2e>
 8009d1a:	2e0a      	cmp	r6, #10
 8009d1c:	d1df      	bne.n	8009cde <__swbuf_r+0x2e>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4628      	mov	r0, r5
 8009d22:	f7ff ff69 	bl	8009bf8 <_fflush_r>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d0d9      	beq.n	8009cde <__swbuf_r+0x2e>
 8009d2a:	e7d6      	b.n	8009cda <__swbuf_r+0x2a>

08009d2c <__swsetup_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4b29      	ldr	r3, [pc, #164]	@ (8009dd4 <__swsetup_r+0xa8>)
 8009d30:	4605      	mov	r5, r0
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	460c      	mov	r4, r1
 8009d36:	b118      	cbz	r0, 8009d40 <__swsetup_r+0x14>
 8009d38:	6a03      	ldr	r3, [r0, #32]
 8009d3a:	b90b      	cbnz	r3, 8009d40 <__swsetup_r+0x14>
 8009d3c:	f7ff f9f2 	bl	8009124 <__sinit>
 8009d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d44:	0719      	lsls	r1, r3, #28
 8009d46:	d422      	bmi.n	8009d8e <__swsetup_r+0x62>
 8009d48:	06da      	lsls	r2, r3, #27
 8009d4a:	d407      	bmi.n	8009d5c <__swsetup_r+0x30>
 8009d4c:	2209      	movs	r2, #9
 8009d4e:	602a      	str	r2, [r5, #0]
 8009d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d54:	81a3      	strh	r3, [r4, #12]
 8009d56:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5a:	e033      	b.n	8009dc4 <__swsetup_r+0x98>
 8009d5c:	0758      	lsls	r0, r3, #29
 8009d5e:	d512      	bpl.n	8009d86 <__swsetup_r+0x5a>
 8009d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d62:	b141      	cbz	r1, 8009d76 <__swsetup_r+0x4a>
 8009d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d68:	4299      	cmp	r1, r3
 8009d6a:	d002      	beq.n	8009d72 <__swsetup_r+0x46>
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f7ff faf7 	bl	8009360 <_free_r>
 8009d72:	2300      	movs	r3, #0
 8009d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6063      	str	r3, [r4, #4]
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	f043 0308 	orr.w	r3, r3, #8
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	b94b      	cbnz	r3, 8009da6 <__swsetup_r+0x7a>
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d9c:	d003      	beq.n	8009da6 <__swsetup_r+0x7a>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 f84f 	bl	8009e44 <__smakebuf_r>
 8009da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009daa:	f013 0201 	ands.w	r2, r3, #1
 8009dae:	d00a      	beq.n	8009dc6 <__swsetup_r+0x9a>
 8009db0:	2200      	movs	r2, #0
 8009db2:	60a2      	str	r2, [r4, #8]
 8009db4:	6962      	ldr	r2, [r4, #20]
 8009db6:	4252      	negs	r2, r2
 8009db8:	61a2      	str	r2, [r4, #24]
 8009dba:	6922      	ldr	r2, [r4, #16]
 8009dbc:	b942      	cbnz	r2, 8009dd0 <__swsetup_r+0xa4>
 8009dbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009dc2:	d1c5      	bne.n	8009d50 <__swsetup_r+0x24>
 8009dc4:	bd38      	pop	{r3, r4, r5, pc}
 8009dc6:	0799      	lsls	r1, r3, #30
 8009dc8:	bf58      	it	pl
 8009dca:	6962      	ldrpl	r2, [r4, #20]
 8009dcc:	60a2      	str	r2, [r4, #8]
 8009dce:	e7f4      	b.n	8009dba <__swsetup_r+0x8e>
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	e7f7      	b.n	8009dc4 <__swsetup_r+0x98>
 8009dd4:	20000078 	.word	0x20000078

08009dd8 <_sbrk_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d06      	ldr	r5, [pc, #24]	@ (8009df4 <_sbrk_r+0x1c>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	602b      	str	r3, [r5, #0]
 8009de4:	f7f8 f83e 	bl	8001e64 <_sbrk>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_sbrk_r+0x1a>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_sbrk_r+0x1a>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	2000081c 	.word	0x2000081c

08009df8 <__swhatbuf_r>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e00:	2900      	cmp	r1, #0
 8009e02:	b096      	sub	sp, #88	@ 0x58
 8009e04:	4615      	mov	r5, r2
 8009e06:	461e      	mov	r6, r3
 8009e08:	da0d      	bge.n	8009e26 <__swhatbuf_r+0x2e>
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e10:	f04f 0100 	mov.w	r1, #0
 8009e14:	bf14      	ite	ne
 8009e16:	2340      	movne	r3, #64	@ 0x40
 8009e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	6031      	str	r1, [r6, #0]
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	b016      	add	sp, #88	@ 0x58
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
 8009e26:	466a      	mov	r2, sp
 8009e28:	f000 f848 	bl	8009ebc <_fstat_r>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	dbec      	blt.n	8009e0a <__swhatbuf_r+0x12>
 8009e30:	9901      	ldr	r1, [sp, #4]
 8009e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e3a:	4259      	negs	r1, r3
 8009e3c:	4159      	adcs	r1, r3
 8009e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e42:	e7eb      	b.n	8009e1c <__swhatbuf_r+0x24>

08009e44 <__smakebuf_r>:
 8009e44:	898b      	ldrh	r3, [r1, #12]
 8009e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e48:	079d      	lsls	r5, r3, #30
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	d507      	bpl.n	8009e60 <__smakebuf_r+0x1c>
 8009e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	2301      	movs	r3, #1
 8009e5a:	6163      	str	r3, [r4, #20]
 8009e5c:	b003      	add	sp, #12
 8009e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e60:	ab01      	add	r3, sp, #4
 8009e62:	466a      	mov	r2, sp
 8009e64:	f7ff ffc8 	bl	8009df8 <__swhatbuf_r>
 8009e68:	9f00      	ldr	r7, [sp, #0]
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f7ff fae2 	bl	8009438 <_malloc_r>
 8009e74:	b948      	cbnz	r0, 8009e8a <__smakebuf_r+0x46>
 8009e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e7a:	059a      	lsls	r2, r3, #22
 8009e7c:	d4ee      	bmi.n	8009e5c <__smakebuf_r+0x18>
 8009e7e:	f023 0303 	bic.w	r3, r3, #3
 8009e82:	f043 0302 	orr.w	r3, r3, #2
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	e7e2      	b.n	8009e50 <__smakebuf_r+0xc>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	6020      	str	r0, [r4, #0]
 8009e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e92:	81a3      	strh	r3, [r4, #12]
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e9a:	b15b      	cbz	r3, 8009eb4 <__smakebuf_r+0x70>
 8009e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f000 f81d 	bl	8009ee0 <_isatty_r>
 8009ea6:	b128      	cbz	r0, 8009eb4 <__smakebuf_r+0x70>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f023 0303 	bic.w	r3, r3, #3
 8009eae:	f043 0301 	orr.w	r3, r3, #1
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	431d      	orrs	r5, r3
 8009eb8:	81a5      	strh	r5, [r4, #12]
 8009eba:	e7cf      	b.n	8009e5c <__smakebuf_r+0x18>

08009ebc <_fstat_r>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	4d07      	ldr	r5, [pc, #28]	@ (8009edc <_fstat_r+0x20>)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	f7f7 ffa2 	bl	8001e12 <_fstat>
 8009ece:	1c43      	adds	r3, r0, #1
 8009ed0:	d102      	bne.n	8009ed8 <_fstat_r+0x1c>
 8009ed2:	682b      	ldr	r3, [r5, #0]
 8009ed4:	b103      	cbz	r3, 8009ed8 <_fstat_r+0x1c>
 8009ed6:	6023      	str	r3, [r4, #0]
 8009ed8:	bd38      	pop	{r3, r4, r5, pc}
 8009eda:	bf00      	nop
 8009edc:	2000081c 	.word	0x2000081c

08009ee0 <_isatty_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d06      	ldr	r5, [pc, #24]	@ (8009efc <_isatty_r+0x1c>)
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	4608      	mov	r0, r1
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	f7f7 ffa1 	bl	8001e32 <_isatty>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d102      	bne.n	8009efa <_isatty_r+0x1a>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	b103      	cbz	r3, 8009efa <_isatty_r+0x1a>
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	2000081c 	.word	0x2000081c

08009f00 <_init>:
 8009f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f02:	bf00      	nop
 8009f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f06:	bc08      	pop	{r3}
 8009f08:	469e      	mov	lr, r3
 8009f0a:	4770      	bx	lr

08009f0c <_fini>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr
